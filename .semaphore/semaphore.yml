# This file is managed by ServiceBot plugin - Semaphore. The content in this file is created using a common
# template and configurations in service.yml.
# Any modifications made to version, name, agent, and global_job_config will be overwritten by the generated
# content in nightly runs. Code changes made to the remaining sections will not be affected.
version: v1.0
name: build-test-release
agent:
  machine:
    type: s1-prod-ubuntu24-04-amd64-1

auto_cancel:
  running:
    when: "branch != 'main'"

execution_time_limit:
  hours: 1

queue:
  - when: "branch != 'main'"
    processing: parallel

global_job_config:
  prologue:
    commands:
      - checkout

blocks:
  # --- Build & Test (multi-platform/-arch) for VS Code (stable) ---
  - name: "Build & Test (VS Code: linux x64)"
    dependencies: []
    # Skip when:
    # - change in the release.svg file, signaling a `chore: none version bump vN.N.N` commit.
    # - change in the .versions/next.txt file, signaling a release PR merge commit.
    skip: &build-test-skip-stable
      when: "change_in(['/release.svg', '/.versions/next.txt'], {pipeline_file: 'ignore', branch_range: '$SEMAPHORE_GIT_COMMIT_RANGE', default_branch: 'main'})"
    task:
      env_vars:
        - name: RUN_SONARQUBE_SCAN
          value: "true"
      agent:
        machine:
          type: s1-prod-ubuntu24-04-amd64-1
      prologue: &build-test-prologue
        commands:
          - make ci-bin-sem-cache-restore
          - |
            if [[ "${SEMAPHORE_ORGANIZATION_URL}" == *".semaphoreci.com" ]]; then
              echo "Skipping Vault setup for Semaphore CI"
            else
              . vault-setup
            fi
      jobs: &build-test-jobs-stable
        - name: "Build & Test (VS Code)"
          commands:
            - make test
          env_vars:
            - name: VSCODE_VERSION
              value: stable
      epilogue: &build-test-epilogue
        always:
          commands:
            - make remove-test-env
            - make ci-bin-sem-cache-store
            - make store-test-results-to-semaphore
            # Ensures that we run the SonarQube scan only in this block, and not in the other blocks
            # where this epilogue is referenced.
            - |
              if [[ "${RUN_SONARQUBE_SCAN}" == "true" ]]; then 
                sem-version java 21
                emit-sonarqube-data --run_only_sonar_scan
              fi

  - name: "Build & Test (VS Code: linux arm64)"
    dependencies: []
    skip: *build-test-skip-stable
    task:
      agent:
        machine:
          type: s1-prod-ubuntu24-04-arm64-1
      prologue: *build-test-prologue
      jobs: *build-test-jobs-stable
      epilogue: *build-test-epilogue

  - name: "Build & Test (VS Code: win32 x64)"
    dependencies: []
    skip: *build-test-skip-stable
    task:
      agent:
        machine:
          type: s1-prod-windows
      prologue:
        commands:
          - make ci-bin-sem-cache-restore
          - $Env:PATH += ";C:\Program Files\Git\bin"
          - $Env:PATH += ";C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64"
          # Ensure npm and npx are available
          - npm --version
          - npx --version
          - choco install gh -y
          - $Env:PATH += ";C:\Program Files\GitHub CLI\"
          - gh --version
          - |
            if (Test-Path "$HOME/.gh-token") {
              $Env:GH_TOKEN = Get-Content "$HOME/.gh-token" -Raw | ForEach-Object { $_.Trim() }
              if ([string]::IsNullOrEmpty($Env:GH_TOKEN)) {
                  Write-Error "Token file exists but is empty"
                  exit 1
              }
              gh config set prompt disabled
              $Env:GH_TOKEN | gh auth login --with-token
              gh auth status
            } else {
                Write-Error "Token file not found at $HOME/.gh-token"
                exit 1
            }
          - |
            if ($Env:SEMAPHORE_ORGANIZATION_URL -like "*.semaphoreci.com") {
              Write-Output "Skipping Vault setup for Semaphore CI"
            } else {
              $Env:VAULT_ADDR = "https://vault.cireops.gcp.internal.confluent.cloud"
              $token = $(vault write -field=token "auth/semaphore_self_hosted/login" role="default" jwt="$Env:SEMAPHORE_OIDC_TOKEN")
              vault login -no-print token=$token
            }
          - |
            $E2E_USERNAME = $(vault kv get -field=E2E_USERNAME v1/ci/kv/vscodeextension/testing)
            Set-Content -Path .env -Value "E2E_USERNAME=$E2E_USERNAME"
            $E2E_PASSWORD = $(vault kv get -field=E2E_PASSWORD v1/ci/kv/vscodeextension/testing)
            Add-Content -Path .env -Value "E2E_PASSWORD=$E2E_PASSWORD"
      jobs:
        - name: "Build & Test (VS Code)"
          commands:
            - npm ci --prefer-offline --include=dev
            - npx playwright install
            - npx gulp ci
            - npx gulp test
      epilogue:
        always:
          commands:
            - Remove-Item .env -ErrorAction SilentlyContinue
            # Windows version of store-test-results-to-semaphore
            - |
              $TestResultFile = Join-Path -Path $PWD -ChildPath "TEST-result.xml"
              if (Test-Path $TestResultFile) {
                  Write-Output "Publishing test results from $TestResultFile"
                  test-results publish $TestResultFile --force
              } else {
                  Write-Output "Test results not found at $TestResultFile"
              }

  # --- End Build & Test (multi-platform/-arch) for VS Code (stable) ---

  - name: "Build & Test (VS Code Insiders: linux x64)"
    dependencies: []
    skip: &build-test-skip-insiders
      when: "branch != 'main' AND change_in(['/release.svg', '/.versions/next.txt'], {pipeline_file: 'ignore', branch_range: '$SEMAPHORE_GIT_COMMIT_RANGE', default_branch: 'main'})"
    task:
      prologue: *build-test-prologue
      jobs: &build-test-jobs-insiders
        - name: "Build & Test (VS Code Insiders)"
          commands:
            - make test
          env_vars:
            - name: VSCODE_VERSION
              value: insiders
      epilogue: *build-test-epilogue

  - name: "Bump microversion"
    dependencies:
      - "Build & Test (VS Code: linux x64)"
    skip:
      # For main branch:    Always bump microversion on every commit (except those that bump next.txt
      #                       to set the next version under development)
      # For release branches: Skip bumping microversion on `chore: none version bump vN.N.N` commits (release commits)
      #                       and on merge commits that bump `next.txt` file (releases current version and prepares for next version).
      # For pull requests:    Skips on all pull requests.
      when: >
        (branch =~ '^v[0-9]+\.[0-9]+\.x$' and change_in(['/release.svg', '/.versions/next.txt'], {pipeline_file: 'ignore', branch_range: '$SEMAPHORE_GIT_COMMIT_RANGE', default_branch: 'main'}))
        or (branch = 'main' and change_in('/.versions/next.txt', {pipeline_file: 'ignore', default_branch: 'main'}))
        or pull_request =~ '.*'
    task:
      jobs:
        - name: "Bump microversion and commit (no tag)"
          commands:
            - make bump-microversion

  - name: "Set next version under development"
    dependencies:
      - "Build & Test (VS Code: linux x64)"
    run:
      when: "branch = 'main' and change_in('/.versions/next.txt', {pipeline_file: 'ignore', default_branch: 'main'})"
    task:
      jobs:
        - name: "Set next version under development"
          commands:
            # Sets the next version under development with microversion set to 1
            - MICROVERSION_POST=-1 make bump-microversion

  # We always release from a release branch, and never directly from main
  - name: "[Release branch] Release current version and prepare for next version"
    dependencies: []
    run:
      # IMPORTANT: We must set the branch_range to $SEMAPHORE_GIT_COMMIT_RANGE to ensure that the change_in function
      #            examines only the commit(s) within the push that triggered the pipeline. We do this because the default
      #            behavior for change_in on non-main branches is to examine commits up to the common ancestor of the
      #            branch and the main branch. This may erroneously detect changes in the next.txt file that are not
      #            part of the current push, but instead were part of a previous push.
      #            Reference: https://docs.semaphoreci.com/reference/conditions-reference/#change_in
      when: "branch =~ '^v[0-9]+.[0-9]+.x$' and change_in('/.versions/next.txt', {pipeline_file: 'ignore', branch_range: '$SEMAPHORE_GIT_COMMIT_RANGE', default_branch: 'main'})"
    task:
      jobs:
        - name: "Release current version and prepare for next version"
          commands:
            # Release the current version
            - make release-current-version
            # Prepare for the next version under development
            - make bump-microversion

  - name: "Validate Release PR"
    dependencies: []
    run:
      when: "pull_request =~ '.*' and change_in('/.versions/next.txt', {pipeline_file: 'ignore', default_branch: 'main'})"
    task:
      jobs:
      - name: "Release"
        commands:
          # In builds triggered by a Pull Request, the value of the SEMAPHORE_GIT_BRANCH
          # is the name of the git branch targeted by the Pull Request.
          - export GIT_BRANCH=$SEMAPHORE_GIT_BRANCH
          - make validate-bump

after_pipeline:
  task:
    jobs:
      - name: Publish Test Results to Semaphore
        commands:
          - test-results gen-pipeline-report || echo "Could not publish pipeline test result report due to probably no test results to publish"

promotions:
  - name: Multi-Arch VSIX Packaging and Upload
    pipeline_file: multi-arch-packaging.yml
    auto_promote:
      when: "result = 'passed' and branch =~ '.*' and change_in('/release.svg', {pipeline_file: 'ignore', branch_range: '$SEMAPHORE_GIT_COMMIT_RANGE', default_branch: 'main'})"
  - name: Third Party Notices
    pipeline_file: third-party-notices.yml
    auto_promote:
      when: "branch =~ '.*' and change_in(['/package.json', '/NOTICE.txt', '/scripts/notices/NOTICE-vsix_PREAMBLE.txt'], {default_branch: 'main', branch_range: '$SEMAPHORE_GIT_COMMIT_RANGE', pipeline_file: 'ignore'})"
  - name: Validate Sidecar Version
    pipeline_file: validate-sidecar-version.yml
    auto_promote:
      when: "result = 'passed' and change_in(['/.versions/ide-sidecar.txt', '/src/clients/sidecar-openapi-specs/sidecar.openapi.yaml'], {default_branch: 'main', branch_range: '$SEMAPHORE_GIT_COMMIT_RANGE', pipeline_file: 'ignore'})"
