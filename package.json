{
  "name": "vscode-confluent",
  "type": "module",
  "displayName": "Confluent",
  "description": "Work with Confluent and Apache KafkaÂ® to design, build and run data streaming applications.",
  "version": "0.24.0-9",
  "homepage": "https://github.com/confluentinc/vscode",
  "preview": true,
  "publisher": "confluentinc",
  "author": {
    "name": "Confluent, Inc."
  },
  "license": "SEE LICENSE IN LICENSE.txt",
  "repository": {
    "type": "git",
    "url": "https://github.com/confluentinc/vscode.git"
  },
  "bugs": {
    "url": "https://github.com/confluentinc/vscode/issues",
    "email": "vscode-extension@confluent.io"
  },
  "icon": "resources/confluent_logo-mark-meadow.png",
  "engines": {
    "vscode": "^1.87.0"
  },
  "categories": [
    "Programming Languages",
    "Other"
  ],
  "keywords": [
    "Confluent",
    "Confluent Cloud",
    "Confluent Platform",
    "Schema Registry",
    "Apache Kafka",
    "Apache Flink",
    "kafka",
    "flink",
    "kstreams",
    "kafka streams",
    "schema",
    "schema registry",
    "producer",
    "consumer",
    "kafka consumer",
    "kafka producer",
    "templates"
  ],
  "activationEvents": [
    "workspaceContains:**/*.confluent.*"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "authentication": [
      {
        "id": "confluent-cloud-auth-provider",
        "label": "Confluent Cloud"
      }
    ],
    "commands": [
      {
        "command": "confluent.connections.ccloud.logIn",
        "icon": "$(plus)",
        "title": "Log in to Confluent Cloud",
        "category": "Confluent: Connections"
      },
      {
        "command": "confluent.connections.direct",
        "title": "Add New Connection",
        "icon": "$(plus)",
        "category": "Confluent: Connections"
      },
      {
        "command": "confluent.connections.direct.delete",
        "icon": "$(debug-disconnect)",
        "title": "Disconnect",
        "category": "Confluent: Connections"
      },
      {
        "command": "confluent.connections.direct.edit",
        "icon": "$(pencil)",
        "title": "Edit Connection",
        "category": "Confluent: Connections"
      },
      {
        "command": "confluent.connections.addSSLPemPath",
        "icon": "$(key)",
        "title": "Add SSL/TLS PEM Path",
        "category": "Confluent: Connections"
      },
      {
        "command": "confluent.copyResourceId",
        "title": "Copy ID",
        "category": "Confluent: Resources"
      },
      {
        "command": "confluent.copyResourceName",
        "title": "Copy Name",
        "category": "Confluent: Resources"
      },
      {
        "command": "confluent.copyResourceUri",
        "title": "Copy URI",
        "category": "Confluent: Resources"
      },
      {
        "command": "confluent.debugtools.globalState.showWebView",
        "title": "Show Global State Inspector",
        "category": "Confluent: Debug Tools"
      },
      {
        "command": "confluent.debugtools.globalState.reset",
        "title": "Reset Global State",
        "category": "Confluent: Debug Tools"
      },
      {
        "command": "confluent.debugtools.workspaceState.showWebView",
        "title": "Show Workspace State Inspector",
        "category": "Confluent: Debug Tools"
      },
      {
        "command": "confluent.debugtools.workspaceState.reset",
        "title": "Reset Workspace State",
        "category": "Confluent: Debug Tools"
      },
      {
        "command": "confluent.docker.setSocketPath",
        "icon": "$(key)",
        "title": "Set Docker Socket Path",
        "category": "Confluent: Docker"
      },
      {
        "command": "confluent.docker.startLocalResources",
        "icon": "$(debug-start)",
        "title": "Start Local Resources",
        "category": "Confluent: Docker"
      },
      {
        "command": "confluent.docker.stopLocalResources",
        "icon": "$(debug-stop)",
        "title": "Stop Local Resources",
        "category": "Confluent: Docker"
      },
      {
        "command": "confluent.schemas.diffMostRecentVersions",
        "title": "Show Latest Changes",
        "category": "Confluent: Compare Resources"
      },
      {
        "command": "confluent.diff.selectForCompare",
        "icon": "$(pass-filled)",
        "title": "Select for Compare",
        "category": "Confluent: Compare Resources"
      },
      {
        "command": "confluent.diff.compareWithSelected",
        "icon": "$(diff)",
        "title": "Compare with Selected",
        "category": "Confluent: Compare Resources",
        "enablement": "confluent.resourceSelectedForCompare"
      },
      {
        "command": "confluent.organizations.use",
        "icon": "$(organization)",
        "title": "Change Organization",
        "category": "Confluent: Organizations"
      },
      {
        "command": "confluent.copyOrganizationId",
        "title": "Copy Organization ID",
        "category": "Confluent: Resources"
      },
      {
        "command": "confluent.resources.refresh",
        "icon": "$(sync)",
        "title": "Refresh",
        "category": "Confluent: Resources"
      },
      {
        "command": "confluent.resources.item.rename",
        "icon": "$(pencil)",
        "title": "Rename Environment",
        "category": "Confluent: Resources"
      },
      {
        "command": "confluent.kafka-clusters.item.rename",
        "icon": "$(pencil)",
        "title": "Rename Kafka Cluster",
        "category": "Confluent: Kafka Clusters"
      },
      {
        "command": "confluent.resources.kafka-cluster.copyBootstrapServers",
        "title": "Copy Bootstrap Server(s)",
        "category": "Confluent: Kafka Clusters"
      },
      {
        "command": "confluent.resources.kafka-cluster.select",
        "icon": "$(confluent-kafka-cluster)",
        "title": "Select Kafka Cluster",
        "category": "Confluent: Resources"
      },
      {
        "command": "confluent.resources.schema-registry.select",
        "icon": "$(confluent-schema-registry)",
        "title": "Select Schema Registry",
        "category": "Confluent: Resources"
      },
      {
        "command": "confluent.scaffold",
        "title": "Generate New Project",
        "category": "Confluent: Project"
      },
      {
        "command": "confluent.schemaViewer.viewLocally",
        "icon": "$(file-code)",
        "title": "View Schema",
        "category": "Confluent: Schema"
      },
      {
        "command": "confluent.schemaViewer.viewLatestLocally",
        "icon": "$(file-code)",
        "title": "View Latest Schema",
        "category": "Confluent: Schema"
      },
      {
        "command": "confluent.schemas.refresh",
        "icon": "$(sync)",
        "title": "Refresh",
        "category": "Confluent: Schemas"
      },
      {
        "command": "confluent.schemas.create",
        "icon": "$(plus)",
        "title": "Create New Schema",
        "category": "Confluent: Schemas"
      },
      {
        "command": "confluent.schemas.upload",
        "icon": "$(cloud-upload)",
        "title": "Upload Schema to Schema Registry",
        "category": "Confluent: Schemas"
      },
      {
        "command": "confluent.schemas.uploadForSubject",
        "icon": "$(cloud-upload)",
        "title": "Upload Schema to Schema Registry for Subject",
        "category": "Confluent: Schemas"
      },
      {
        "command": "confluent.schemas.evolve",
        "icon": "$(confluent-evolve-schema)",
        "title": "Evolve Schema",
        "category": "Confluent: Schemas"
      },
      {
        "command": "confluent.schemas.evolveSchemaSubject",
        "icon": "$(confluent-evolve-schema)",
        "title": "Evolve Latest Schema",
        "category": "Confluent: Schemas"
      },
      {
        "command": "confluent.schemas.copySchemaRegistryId",
        "title": "Copy Schema Registry ID",
        "category": "Confluent: Schemas"
      },
      {
        "command": "confluent.showOutputChannel",
        "title": "Show Output Channel",
        "icon": "$(output)",
        "category": "Confluent"
      },
      {
        "command": "confluent.showSidecarOutputChannel",
        "title": "Show Sidecar Output Channel",
        "icon": "$(output)",
        "category": "Confluent"
      },
      {
        "command": "confluent.support.confluent-walkthrough.launch",
        "title": "Get Started with Kafka",
        "category": "Confluent: Support"
      },
      {
        "command": "confluent.support.saveLogs",
        "title": "Save Logs",
        "category": "Confluent: Support"
      },
      {
        "command": "confluent.support.saveSidecarLogs",
        "title": "Save Sidecar Logs",
        "category": "Confluent: Support"
      },
      {
        "command": "confluent.support.saveSupportZip",
        "title": "Save Support File (.zip)",
        "category": "Confluent: Support"
      },
      {
        "command": "confluent.support.feedback",
        "title": "Give Feedback",
        "category": "Confluent: Support"
      },
      {
        "command": "confluent.support.issue",
        "title": "Report an Issue",
        "category": "Confluent: Support"
      },
      {
        "command": "confluent.support.openSettings",
        "title": "Open Settings",
        "category": "Confluent: Support"
      },
      {
        "command": "confluent.topic.consume",
        "icon": "$(play-circle)",
        "title": "Browse Messages",
        "category": "Confluent: Topic"
      },
      {
        "command": "confluent.topic.consume.duplicate",
        "icon": "$(explorer-view-icon)",
        "title": "Duplicate Message Browser",
        "category": "Confluent: Topic",
        "enablement": "activeWebviewPanelId == message-viewer"
      },
      {
        "command": "confluent.topic.consume.getUri",
        "icon": "$(link)",
        "title": "Copy Link to Message Viewer",
        "category": "Confluent: Topic",
        "enablement": "activeWebviewPanelId == message-viewer"
      },
      {
        "command": "confluent.topic.consume.fromUri",
        "icon": "$(link)",
        "title": "Open Message Viewer from Link",
        "category": "Confluent: Topic",
        "enablement": "false"
      },
      {
        "command": "confluent.topic.produce.fromFile",
        "title": "Produce Message to Kafka Topic from schemaless JSON file",
        "icon": "$(send)",
        "category": "Confluent: Topic"
      },
      {
        "command": "confluent.topics.create",
        "icon": "$(plus)",
        "title": "Create Topic",
        "category": "Confluent: Topics"
      },
      {
        "command": "confluent.topics.edit",
        "title": "Configure Topic",
        "category": "Confluent: Topics"
      },
      {
        "command": "confluent.topics.delete",
        "title": "Delete Topic",
        "category": "Confluent: Topics"
      },
      {
        "command": "confluent.topics.openlatestschemas",
        "title": "View Latest Schema Version(s)",
        "category": "Confluent: Topics"
      },
      {
        "command": "confluent.topics.refresh",
        "icon": "$(sync)",
        "title": "Refresh",
        "category": "Confluent: Topics"
      },
      {
        "command": "confluent.topics.copyKafkaClusterId",
        "title": "Copy Kafka Cluster ID",
        "category": "Confluent: Topics"
      },
      {
        "command": "confluent.topics.copyKafkaClusterName",
        "title": "Copy Kafka Cluster Name",
        "category": "Confluent: Topics"
      },
      {
        "command": "confluent.topics.copyKafkaClusterBootstrapServers",
        "title": "Copy Kafka Cluster Bootstrap Server(s)",
        "category": "Confluent: Topics"
      },
      {
        "command": "confluent.openCCloudLink",
        "icon": "$(confluent-logo)",
        "title": "View in Confluent Cloud",
        "category": "Confluent: Resources"
      }
    ],
    "configuration": {
      "title": "Confluent",
      "properties": {
        "confluent.cloud.messageViewer.showSchemaWarningNotifications": {
          "type": "boolean",
          "default": true,
          "description": "Whether or not warning notifications will appear when consuming messages without permission to access the associated Schema Registry."
        },
        "confluent.debugging.showSidecarExceptions": {
          "type": "boolean",
          "default": false,
          "description": "Alert on sidecar process exceptions"
        },
        "confluent.debugging.sslTls.serverCertificateVerificationDisabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Disable SSL/TLS server certificate verification when making requests to Confluent/Kafka connections or resources.\n\n---\n\nâ ï¸ **WARNING**: This setting may allow a Man-in-the-Middle attack on the network connection between the Confluent extension and Confluent Cloud, which can lead to loss of sensitive data like credentials and PII. **_This should only be used for debugging purposes in non-production environments._**"
        },
        "confluent.ssl.pemPaths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "markdownDescription": "Path(s) to `.pem` file(s) to use for SSL/TLS connections when making requests to Confluent/Kafka resources. (You can also use the [\"Add SSL/TLS PEM Path\" command](command:confluent.connections.addSSLPemPath).)"
        },
        "confluent.localDocker.socketPath": {
          "type": "string",
          "default": "",
          "markdownDescription": "Path to the Docker socket file.  (You can also use the [\"Set Docker Socket Path\" command](command:confluent.docker.setSocketPath).)"
        },
        "confluent.localDocker.kafkaImageRepo": {
          "type": "string",
          "enum": [
            "confluentinc/confluent-local"
          ],
          "default": "confluentinc/confluent-local",
          "description": "Docker image repo to use when starting a local Kafka container"
        },
        "confluent.localDocker.kafkaImageTag": {
          "type": "string",
          "default": "latest",
          "description": "Docker image tag to use when starting a local Kafka container"
        },
        "confluent.localDocker.schemaRegistryImageTag": {
          "type": "string",
          "default": "latest",
          "markdownDescription": "Docker image tag to use when starting a local Schema Registry container. (By default, this will use the [`confluentinc/cp-schema-registry`](https://hub.docker.com/r/confluentinc/cp-schema-registry/tags) image.)"
        },
        "confluent.preview.enableProduceMessages": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Enable message production for Kafka topics.\n\n---\n\nâ ï¸ **WARNING**: This setting may allow you to produce messages without schemas to topics that expect them, which can lead to data loss or corruption.",
          "tags": [
            "preview"
          ]
        }
      }
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "confluent",
          "title": "Confluent",
          "icon": "resources/confluent-logo.svg"
        }
      ]
    },
    "views": {
      "confluent": [
        {
          "id": "confluent-resources",
          "name": "Resources"
        },
        {
          "id": "confluent-topics",
          "name": "Topics",
          "visibility": "collapsed"
        },
        {
          "id": "confluent-schemas",
          "name": "Schemas",
          "visibility": "collapsed"
        },
        {
          "id": "confluent-support",
          "name": "Support"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "confluent-resources",
        "contents": "No resources found."
      },
      {
        "view": "confluent-schemas",
        "contents": "Not connected to Confluent Cloud. Click below to get started.\n[Connect to Confluent Cloud](command:confluent.connections.ccloud.logIn)\nOr start Schema Registry locally with Docker.\n[Start Local Resources](command:confluent.docker.startLocalResources)",
        "when": "!(confluent.ccloudConnectionAvailable || confluent.localSchemaRegistryAvailable || confluent.directSchemaRegistryAvailable)"
      },
      {
        "view": "confluent-schemas",
        "contents": "No Schema Registry selected. Click below to get started.\n[Select Schema Registry](command:confluent.resources.schema-registry.select)",
        "when": "(confluent.ccloudConnectionAvailable || confluent.localSchemaRegistryAvailable || confluent.directSchemaRegistryAvailable) && !confluent.schemaRegistrySelected"
      },
      {
        "view": "confluent-schemas",
        "contents": "No schemas found.\n[Create Schema](command:confluent.schemas.create)",
        "when": "(confluent.ccloudConnectionAvailable || confluent.localSchemaRegistryAvailable || confluent.directSchemaRegistryAvailable) && confluent.schemaRegistrySelected"
      },
      {
        "view": "confluent-topics",
        "contents": "No connections available.\n[Connect to Confluent Cloud](command:confluent.connections.ccloud.logIn)\nOr start Kafka locally with Docker.\n[Start Local Resources](command:confluent.docker.startLocalResources)",
        "when": "!(confluent.ccloudConnectionAvailable || confluent.localKafkaClusterAvailable || confluent.directKafkaClusterAvailable)"
      },
      {
        "view": "confluent-topics",
        "contents": "No Kafka cluster selected. Click below to get started.\n[Select Kafka Cluster](command:confluent.resources.kafka-cluster.select)",
        "when": "(confluent.ccloudConnectionAvailable || confluent.localKafkaClusterAvailable || confluent.directKafkaClusterAvailable) && !confluent.kafkaClusterSelected"
      },
      {
        "view": "confluent-topics",
        "contents": "No topics found.\n[Create Topic](command:confluent.topics.create)",
        "when": "(confluent.ccloudConnectionAvailable || confluent.localKafkaClusterAvailable || confluent.directKafkaClusterAvailable) && confluent.kafkaClusterSelected"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "confluent.connections.ccloud.logIn",
          "when": "!confluent.ccloudConnectionAvailable"
        },
        {
          "command": "confluent.connections.direct.delete",
          "when": "false"
        },
        {
          "command": "confluent.connections.direct.edit",
          "when": "false"
        },
        {
          "command": "confluent.copyOrganizationId",
          "when": "false"
        },
        {
          "command": "confluent.copyResourceId",
          "when": "false"
        },
        {
          "command": "confluent.copyResourceName",
          "when": "false"
        },
        {
          "command": "confluent.topic.produce.fromFile",
          "when": "false"
        },
        {
          "command": "confluent.copyResourceUri",
          "when": "false"
        },
        {
          "command": "confluent.debugtools.globalState.showWebView",
          "when": "true"
        },
        {
          "command": "confluent.debugtools.globalState.reset",
          "when": "true"
        },
        {
          "command": "confluent.debugtools.workspaceState.showWebView",
          "when": "true"
        },
        {
          "command": "confluent.debugtools.workspaceState.reset",
          "when": "true"
        },
        {
          "command": "confluent.resources.kafka-cluster.copyBootstrapServers",
          "when": "false"
        },
        {
          "command": "confluent.kafka-clusters.item.rename",
          "when": "false"
        },
        {
          "command": "confluent.resources.item.rename",
          "when": "false"
        },
        {
          "command": "confluent.schemaViewer.viewLocally",
          "when": "false"
        },
        {
          "command": "confluent.schemaViewer.viewLatestLocally",
          "when": "false"
        },
        {
          "command": "confluent.schemas.upload",
          "when": "false"
        },
        {
          "command": "confluent.schemas.uploadForSubject",
          "when": "false"
        },
        {
          "command": "confluent.schemas.evolve",
          "when": "false"
        },
        {
          "command": "confluent.schemas.evolveSchemaSubject",
          "when": "false"
        },
        {
          "command": "confluent.schemas.refresh",
          "when": "false"
        },
        {
          "command": "confluent.schemas.copySchemaRegistryId",
          "when": "false"
        },
        {
          "command": "confluent.topics.delete",
          "when": "false"
        },
        {
          "command": "confluent.topics.edit",
          "when": "false"
        },
        {
          "command": "confluent.topics.openlatestschemas",
          "when": "false"
        },
        {
          "command": "confluent.topics.copyKafkaClusterId",
          "when": "false"
        },
        {
          "command": "confluent.topics.copyKafkaClusterName",
          "when": "false"
        },
        {
          "command": "confluent.topics.copyKafkaClusterBootstrapServers",
          "when": "false"
        },
        {
          "command": "confluent.schemas.diffMostRecentVersions",
          "when": "false"
        }
      ],
      "editor/title": [
        {
          "command": "confluent.topic.consume.duplicate",
          "group": "navigation@1",
          "when": "activeWebviewPanelId == message-viewer"
        },
        {
          "command": "confluent.topic.consume.getUri",
          "group": "navigation@2",
          "when": "activeWebviewPanelId == message-viewer"
        }
      ],
      "editor/title/context": [
        {
          "command": "confluent.topic.consume.duplicate",
          "group": "navigation",
          "when": "activeWebviewPanelId == message-viewer"
        }
      ],
      "view/title": [
        {
          "command": "confluent.connections.direct",
          "when": "view == confluent-resources",
          "group": "navigation@1"
        },
        {
          "command": "confluent.resources.refresh",
          "when": "view == confluent-resources",
          "group": "navigation@2"
        },
        {
          "command": "confluent.schemas.create",
          "when": "view == confluent-schemas",
          "group": "navigation@1"
        },
        {
          "command": "confluent.schemas.upload",
          "when": "view == confluent-schemas && confluent.schemaRegistrySelected",
          "group": "navigation@2"
        },
        {
          "command": "confluent.resources.schema-registry.select",
          "when": "view == confluent-schemas",
          "group": "navigation@3"
        },
        {
          "command": "confluent.schemas.refresh",
          "when": "view == confluent-schemas",
          "group": "navigation@4"
        },
        {
          "command": "confluent.schemas.copySchemaRegistryId",
          "when": "view == confluent-schemas && confluent.schemaRegistrySelected",
          "group": "2_copy@1"
        },
        {
          "command": "confluent.topics.create",
          "when": "view == confluent-topics && confluent.kafkaClusterSelected",
          "group": "navigation@1"
        },
        {
          "command": "confluent.resources.kafka-cluster.select",
          "when": "view == confluent-topics",
          "group": "navigation@2"
        },
        {
          "command": "confluent.topics.refresh",
          "when": "view == confluent-topics",
          "group": "navigation@3"
        },
        {
          "command": "confluent.topics.copyKafkaClusterId",
          "when": "view == confluent-topics && confluent.kafkaClusterSelected",
          "group": "2_copy@1"
        },
        {
          "command": "confluent.topics.copyKafkaClusterName",
          "when": "view == confluent-topics && confluent.kafkaClusterSelected",
          "group": "2_copy@2"
        },
        {
          "command": "confluent.topics.copyKafkaClusterBootstrapServers",
          "when": "view == confluent-topics && confluent.kafkaClusterSelected",
          "group": "2_copy@3"
        }
      ],
      "view/item/context": [
        {
          "command": "confluent.copyResourceId",
          "when": "view in confluent.viewsWithResources && (viewItem in confluent.resourcesWithIDs || viewItem =~ /.*-schema$/)",
          "group": "2_copy@1"
        },
        {
          "command": "confluent.copyResourceName",
          "when": "view in confluent.viewsWithResources && (viewItem in confluent.resourcesWithNames || viewItem =~ /.*-topic-.*/)",
          "group": "2_copy@2"
        },
        {
          "command": "confluent.copyResourceUri",
          "when": "view in confluent.viewsWithResources && viewItem in confluent.resourcesWithURIs",
          "group": "2_copy@3"
        },
        {
          "command": "confluent.docker.startLocalResources",
          "when": "view == confluent-resources && viewItem =~ /local-container.*/ && !(confluent.localKafkaClusterAvailable && confluent.localSchemaRegistryAvailable)",
          "group": "inline"
        },
        {
          "command": "confluent.docker.stopLocalResources",
          "when": "view == confluent-resources && viewItem == local-container-connected && confluent.localKafkaClusterAvailable",
          "group": "inline"
        },
        {
          "command": "confluent.diff.selectForCompare",
          "when": "view == confluent-schemas && viewItem =~ /.*-schema$/",
          "group": "3_compare"
        },
        {
          "command": "confluent.diff.compareWithSelected",
          "when": "confluent.resourceSelectedForCompare && view == confluent-schemas && viewItem =~ /.*-schema$/",
          "group": "3_compare"
        },
        {
          "command": "confluent.kafka-clusters.item.rename",
          "when": "false",
          "group": "inline@2"
        },
        {
          "command": "confluent.connections.ccloud.logIn",
          "when": "viewItem == resources-ccloud-container",
          "group": "inline@1"
        },
        {
          "command": "confluent.connections.direct.delete",
          "when": "viewItem == direct-environment",
          "group": "inline@3"
        },
        {
          "command": "confluent.connections.direct.edit",
          "when": "viewItem == direct-environment",
          "group": "inline@2"
        },
        {
          "command": "confluent.organizations.use",
          "when": "viewItem == resources-ccloud-container-connected",
          "group": "inline@2"
        },
        {
          "command": "confluent.copyOrganizationId",
          "when": "viewItem == resources-ccloud-container-connected",
          "group": "2_copy@1"
        },
        {
          "command": "confluent.resources.item.rename",
          "when": "false",
          "group": "inline@2"
        },
        {
          "command": "confluent.resources.kafka-cluster.copyBootstrapServers",
          "when": "view == confluent-resources && viewItem =~ /.*-kafka-cluster.*/",
          "group": "2_copy@3"
        },
        {
          "command": "confluent.schemas.copySchemaRegistryId",
          "when": "(view == confluent-schemas || view == confluent-topics) && viewItem =~ /.*-schema*/",
          "group": "4_copy@1"
        },
        {
          "command": "confluent.schemas.diffMostRecentVersions",
          "when": "(view == confluent-schemas || view == confluent-topics) && viewItem =~ /.*multiple-versions.*schema-subject/",
          "group": "3_compare"
        },
        {
          "command": "confluent.schemas.evolve",
          "when": "(view == confluent-schemas || view == confluent-topics) && viewItem =~ /.*evolvable.*schema$/",
          "group": "inline@1"
        },
        {
          "command": "confluent.schemas.evolveSchemaSubject",
          "when": "(view == confluent-schemas || view == confluent-topics) && viewItem =~ /.*schema-subject$/",
          "group": "inline@2"
        },
        {
          "command": "confluent.schemas.upload",
          "when": "view == confluent-resources && viewItem =~ /.*-schema-registry/",
          "group": "inline@1"
        },
        {
          "command": "confluent.schemas.uploadForSubject",
          "when": "(view == confluent-schemas || view == confluent-topics) && viewItem =~ /.*schema-subject$/",
          "group": "inline@2"
        },
        {
          "command": "confluent.schemaViewer.viewLatestLocally",
          "when": "(view == confluent-schemas || view == confluent-topics) && viewItem =~ /.*schema-subject$/",
          "group": "inline@1"
        },
        {
          "command": "confluent.topic.consume",
          "when": "view == confluent-topics && viewItem =~ /.*-topic.*-authzREAD.*/",
          "group": "inline@1"
        },
        {
          "command": "confluent.topics.delete",
          "when": "view == confluent-topics && viewItem =~ /.*-topic.*-authzDELETE.*/",
          "group": "topics"
        },
        {
          "command": "confluent.topics.edit",
          "when": "view == confluent-topics && viewItem =~ /.*-topic.*-authzALTER_CONFIGS.*/",
          "group": "topics"
        },
        {
          "command": "confluent.topics.create",
          "when": "view == confluent-resources && (viewItem == ccloud-kafka-cluster || viewItem == local-kafka-cluster)",
          "group": "topics"
        },
        {
          "command": "confluent.topics.openlatestschemas",
          "when": "view == confluent-topics && viewItem =~ /.*-topic.*-with-schema.*/",
          "group": "topic_schemas@1"
        },
        {
          "command": "confluent.topics.copyKafkaClusterId",
          "when": "view == confluent-topics && viewItem =~ /.*-topic.*/",
          "group": "4_copy@1"
        },
        {
          "command": "confluent.topics.copyKafkaClusterName",
          "when": "view == confluent-topics && viewItem =~ /.*-topic.*/",
          "group": "4_copy@2"
        },
        {
          "command": "confluent.topics.copyKafkaClusterBootstrapServers",
          "when": "view == confluent-topics && viewItem =~ /.*-topic.*/",
          "group": "4_copy@3"
        },
        {
          "command": "confluent.topic.produce.fromFile",
          "when": "view == confluent-topics && viewItem =~ /.*-topic.*-authzWRITE.*/ && confluent.produceMessagesEnabled",
          "group": "inline@1"
        },
        {
          "command": "confluent.openCCloudLink",
          "when": "view in confluent.viewsWithResources && (viewItem in confluent.ccloudResources || viewItem =~ /ccloud-kafka-topic.*/ || viewItem =~ /.*ccloud.*schema$/)",
          "group": "z_openInCloud"
        }
      ]
    },
    "colors": [],
    "icons": {
      "apache-kafka": {
        "description": "apache-kafka icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f101"
        }
      },
      "confluent-environment": {
        "description": "confluent-environment icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f102"
        }
      },
      "confluent-evolve-schema": {
        "description": "confluent-evolve-schema icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f103"
        }
      },
      "confluent-flink-compute-pool": {
        "description": "confluent-flink-compute-pool icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f104"
        }
      },
      "confluent-kafka-cluster": {
        "description": "confluent-kafka-cluster icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f105"
        }
      },
      "confluent-logo": {
        "description": "confluent-logo icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f106"
        }
      },
      "confluent-schema-registry": {
        "description": "confluent-schema-registry icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f107"
        }
      },
      "confluent-topic-without-schema": {
        "description": "confluent-topic-without-schema icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f108"
        }
      },
      "confluent-topic": {
        "description": "confluent-topic icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f109"
        }
      }
    },
    "walkthroughs": [
      {
        "id": "confluent-walkthrough",
        "title": "Connect to Kafka Clusters",
        "description": "Interact with Apache KafkaÂ® clusters running locally or on Confluent Cloud.",
        "steps": [
          {
            "id": "connect-local-cluster",
            "title": "Connect to Kafka",
            "description": "**Confluent Cloud Clusters** \nLog in to your Confluent account to see your Confluent Cloud resources. \n[Log in](command:confluent.connections.ccloud.logIn)\n[Sign up for free](https://confluent.cloud/signup)\n**Local Clusters** \nIf you have Kafka running locally, it appears automatically in the Resources view. \n[Start Local Resources](command:confluent.docker.startLocalResources)",
            "media": {
              "image": "resources/walkthrough/connect.png",
              "altText": "Connect to Kafka clusters"
            },
            "completionEvents": [
              "onCommand:command:confluent.connections.ccloud.logIn",
              "onCommand:confluent.docker.startLocalResources"
            ]
          },
          {
            "id": "create-connections",
            "title": "Connect directly to Kafka / Schema Registry",
            "description": "To connect to an Apache Kafka or Schema Registry cluster, click $(plus) next to Resource > Other. The cluster can be in Confluent Cloud, Confluent Platform, or hosted elsewhere.\n[Open Connection Form](command:confluent.connections.direct)",
            "media": {
              "image": "resources/walkthrough/direct-connection-form.png",
              "altText": "Create a new connection to a Kafka cluster or Schema Registry"
            },
            "completionEvents": [
              "onCommand:confluent.connections.direct"
            ]
          },
          {
            "id": "view-topics",
            "title": "View Messages",
            "description": "Click the $(play) icon next to a topic to open the Message Viewer and explore the messages produced to the topic",
            "media": {
              "image": "resources/walkthrough/message-viewer.png",
              "altText": "Click the Play button next to a topic to see the Message viewer."
            },
            "completionEvents": [
              "onCommand:confluent.topic.consume"
            ]
          },
          {
            "id": "inspect-schemas",
            "title": "Inspect Schemas",
            "description": "Examine schemas associated with your topics either from the Topics panel or the Schemas panel",
            "media": {
              "image": "resources/walkthrough/schema-inspector.png",
              "altText": "Schema structure is shown in the VS Code file viewer while you navigate schemas in the Topics panel or the Schemas panel"
            },
            "completionEvents": []
          },
          {
            "id": "generate-project",
            "title": "Generate Files for a New Project",
            "description": "Just starting out? Run ``Generate New Project`` to get a complete scaffolding setup with all the necessary boilerplate files to kickstart your Kafka project.\n[Create new project](command:confluent.scaffold)",
            "media": {
              "markdown": "resources/walkthrough/generate-project.md"
            },
            "completionEvents": [
              "onCommand:confluent.scaffold"
            ]
          },
          {
            "id": "give-feedback",
            "title": "Provide Feedback",
            "description": "Confluent for VS Code is available for Early Access, and your feedback has a direct impact on the evolution of the product.\n[Give Feedback](https://forms.gle/V4aWAa1PWJRBtGgGA)",
            "media": {
              "markdown": "resources/walkthrough/feedback.md"
            },
            "completionEvents": []
          }
        ]
      }
    ]
  },
  "devDependencies": {
    "@0no-co/graphqlsp": "^1.12.8",
    "@eslint/js": "^9.4.0",
    "@openapitools/openapi-generator-cli": "^2.13.5",
    "@playwright/test": "^1.45.0",
    "@rollup/plugin-alias": "^5.1.0",
    "@rollup/plugin-commonjs": "^26.0.1",
    "@rollup/plugin-json": "^6.1.0",
    "@rollup/plugin-node-resolve": "^15.2.3",
    "@rollup/plugin-replace": "^5.0.7",
    "@rollup/plugin-virtual": "^3.0.2",
    "@twbs/fantasticon": "3.0.0",
    "@types/archiver": "^6.0.3",
    "@types/d3": "^7.4.3",
    "@types/eslint__js": "^8.42.3",
    "@types/gulp": "^4.0.17",
    "@types/mocha": "^10.0.6",
    "@types/node": "^18.19.67",
    "@types/sinon": "^17.0.3",
    "@types/tail": "^2.2.3",
    "@types/vscode": "^1.87.0",
    "@types/ws": "^8.5.13",
    "@vscode/test-cli": "^0.0.6",
    "@vscode/test-electron": "^2.3.9",
    "@vscode/vsce": "^3.1.0",
    "dotenv": "^16.4.5",
    "esbuild": "^0.21.4",
    "eslint": "^9.4.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-prettier": "^5.1.3",
    "globals": "^15.4.0",
    "gulp": "^5.0.0",
    "lightningcss": "^1.26.0",
    "mocha-junit-reporter": "^2.2.1",
    "mocha-multi-reporters": "^1.5.1",
    "prettier": "3.2.5",
    "rimraf": "^6.0.1",
    "rollup": "^4.18.0",
    "rollup-plugin-copy": "^3.5.0",
    "rollup-plugin-esbuild": "^6.1.1",
    "rollwright": "^0.0.6",
    "sinon": "^18.0.1",
    "typescript": "^5.4.2",
    "typescript-eslint": "^8.0.0-alpha.28"
  },
  "dependencies": {
    "@segment/analytics-node": "^2.1.2",
    "@sentry/node": "^8.17.0",
    "@sentry/profiling-node": "^8.17.0",
    "@sentry/rollup-plugin": "^2.21.1",
    "@vscode/codicons": "^0.0.36",
    "@vscode/webview-ui-toolkit": "^1.4.0",
    "archiver": "^7.0.1",
    "async-mutex": "^0.5.0",
    "d3": "^7.9.0",
    "dataclass": "^3.0.0-beta.1",
    "gql.tada": "^1.8.3",
    "graphql": "^16.8.2",
    "inertial": "^0.4.1",
    "tail": "^2.2.6",
    "undici": "^6.19.8",
    "unzipit": "^1.4.3",
    "ws": "^8.18.0"
  }
}
