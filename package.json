{
  "name": "vscode-confluent",
  "type": "module",
  "displayName": "Confluent",
  "description": "Work with Confluent and Apache Kafka® to design, build and run data streaming applications.",
  "version": "1.4.0-17",
  "homepage": "https://github.com/confluentinc/vscode",
  "publisher": "confluentinc",
  "author": {
    "name": "Confluent, Inc."
  },
  "license": "SEE LICENSE IN LICENSE.txt",
  "repository": {
    "type": "git",
    "url": "https://github.com/confluentinc/vscode.git"
  },
  "bugs": {
    "url": "https://github.com/confluentinc/vscode/issues",
    "email": "vscode-extension@confluent.io"
  },
  "icon": "resources/confluent_logo-mark-meadow.png",
  "engines": {
    "vscode": "^1.97.0"
  },
  "categories": [
    "Programming Languages",
    "Other"
  ],
  "keywords": [
    "Confluent",
    "Confluent Cloud",
    "Confluent Platform",
    "Schema Registry",
    "Apache Kafka",
    "Apache Flink",
    "kafka",
    "flink",
    "kstreams",
    "kafka streams",
    "schema",
    "producer",
    "consumer",
    "kafka consumer",
    "kafka producer",
    "templates"
  ],
  "activationEvents": [
    "workspaceContains:**/*.confluent.*",
    "onUri"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "authentication": [
      {
        "id": "confluent-cloud-auth-provider",
        "label": "Confluent Cloud"
      }
    ],
    "chatParticipants": [
      {
        "id": "confluent.chat-participant",
        "name": "Confluent",
        "description": "Provides a Copilot-powered chat assistant for Confluent and Apache Kafka® developers, offering guidance on configuration, development best practices, and troubleshooting for Kafka clusters, Schema Registry, Flink, and streaming applications.",
        "isSticky": true,
        "commands": [],
        "disambiguation": [],
        "when": "confluent.chatParticipantEnabled"
      }
    ],
    "languageModelTools": [
      {
        "name": "list_projectTemplates",
        "when": "confluent.chatParticipantEnabled",
        "tags": [
          "projects"
        ],
        "displayName": "List Project Templates",
        "modelDescription": "List all available templates for creating a streaming data project or application. Use this when the user asks about available templates or you want to show them a list of templates.",
        "canBeReferencedInPrompt": false,
        "icon": "$(list-selection)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "description": "Optional tags to filter the list of templates."
            }
          }
        }
      },
      {
        "name": "get_templateOptions",
        "when": "confluent.chatParticipantEnabled",
        "tags": [
          "projects"
        ],
        "displayName": "Get Project Template Options",
        "modelDescription": "Get the input options for filling out a project template. Use this after 'list_projectTemplates' when the user selects a template to create a new project. This will return the input options for the selected template.",
        "canBeReferencedInPrompt": false,
        "icon": "$(checklist)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "templateId": {
              "type": "string",
              "description": "The ID of the template to apply."
            }
          },
          "required": [
            "templateId"
          ]
        }
      },
      {
        "name": "create_project",
        "when": "confluent.chatParticipantEnabled",
        "tags": [
          "projects"
        ],
        "displayName": "Create Project",
        "modelDescription": "Create a new project using the selected template and input options. If the user provides values for these options, ALWAYS pass them to this tool as input for the templateOptions.",
        "canBeReferencedInPrompt": true,
        "toolReferenceName": "createProject",
        "icon": "$(checklist)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "templateId": {
              "type": "string",
              "description": "The ID of the project template to use."
            },
            "templateOptions": {
              "type": "object",
              "description": "The input options for the selected project template. The keys for this object must match the input options defined in the template."
            }
          },
          "required": [
            "templateId",
            "templateOptions"
          ]
        }
      },
      {
        "name": "get_connections",
        "when": "confluent.chatParticipantEnabled",
        "tags": [
          "connections"
        ],
        "displayName": "Get Connections",
        "modelDescription": "Get a list of connections available in the current workspace. ALWAYS call this tool when the user asks about their connections or when connection information is needed - NEVER rely on previous results as connection states change frequently. Any sign-in/sign-out actions are specific to the CCLOUD connection. The LOCAL connection handles Kafka and Schema registry through the local Docker engine API. Any other configurations for Kafka or Schema Registry are done through the DIRECT connections.",
        "canBeReferencedInPrompt": false,
        "icon": "$(list-selection)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "connectionType": {
              "type": "string",
              "enum": [
                "CCLOUD",
                "DIRECT",
                "LOCAL"
              ],
              "description": "Optional connection type to filter the list of connections."
            }
          }
        }
      },
      {
        "name": "get_dockerContainers",
        "when": "confluent.chatParticipantEnabled",
        "tags": [
          "docker",
          "containers"
        ],
        "displayName": "Get Docker Containers",
        "modelDescription": "Get information about Docker containers for Kafka or Schema Registry running on the local machine. Use this when the user asks about their local connection/resources or any direct connections using 'localhost'.",
        "canBeReferencedInPrompt": false,
        "icon": "$(docker)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "resourceKind": {
              "type": "string",
              "enum": [
                "Kafka",
                "Schema Registry"
              ],
              "description": "Which kind of resource's container(s) to list (Kafka, Schema Registry, etc)."
            }
          },
          "required": [
            "resourceKind"
          ]
        }
      },
      {
        "name": "get_environments",
        "when": "confluent.chatParticipantEnabled",
        "tags": [
          "environments"
        ],
        "displayName": "Get Environments",
        "modelDescription": "Get a list of environments available for a specific connection. Environments are logical groupings of resources that may contain Kafka clusters, Schema Registry, and Flink compute pools. Use this when the user asks about their environments or needs to locate resource IDs for other operations.",
        "canBeReferencedInPrompt": false,
        "icon": "$(list-selection)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "connectionId": {
              "type": "string",
              "description": "The ID of the connection to get environments for."
            }
          },
          "required": [
            "connectionId"
          ]
        }
      }
    ],
    "commands": [
      {
        "command": "confluent.connections.ccloud.signIn",
        "icon": "$(sign-in)",
        "title": "Sign in to Confluent Cloud",
        "category": "Confluent: Connections"
      },
      {
        "command": "confluent.connections.ccloud.signOut",
        "icon": "$(sign-out)",
        "title": "Sign out from Confluent Cloud",
        "category": "Confluent: Connections"
      },
      {
        "command": "confluent.connections.direct",
        "title": "Add New Connection",
        "icon": "$(plus)",
        "category": "Confluent: Connections"
      },
      {
        "command": "confluent.connections.direct.delete",
        "icon": "$(debug-disconnect)",
        "title": "Disconnect",
        "category": "Confluent: Connections"
      },
      {
        "command": "confluent.connections.direct.edit",
        "icon": "$(pencil)",
        "title": "Edit Connection",
        "category": "Confluent: Connections"
      },
      {
        "command": "confluent.connections.direct.export",
        "icon": "$(confluent-export-connection)",
        "title": "Export connection details",
        "category": "Confluent: Connections"
      },
      {
        "command": "confluent.connections.addSSLPemPath",
        "icon": "$(key)",
        "title": "Add SSL/TLS PEM Path",
        "category": "Confluent: Connections"
      },
      {
        "command": "confluent.copyResourceId",
        "title": "Copy ID",
        "category": "Confluent: Resources"
      },
      {
        "command": "confluent.copyResourceName",
        "title": "Copy Name",
        "category": "Confluent: Resources"
      },
      {
        "command": "confluent.copyResourceUri",
        "title": "Copy URI",
        "category": "Confluent: Resources"
      },
      {
        "command": "confluent.docker.setSocketPath",
        "icon": "$(key)",
        "title": "Set Docker Socket Path",
        "category": "Confluent: Docker"
      },
      {
        "command": "confluent.docker.startLocalResources",
        "icon": "$(debug-start)",
        "title": "Start Local Resources",
        "category": "Confluent: Docker"
      },
      {
        "command": "confluent.docker.stopLocalResources",
        "icon": "$(debug-stop)",
        "title": "Stop Local Resources",
        "category": "Confluent: Docker"
      },
      {
        "command": "confluent.schemas.diffMostRecentVersions",
        "title": "Show Latest Changes",
        "category": "Confluent: Compare Resources"
      },
      {
        "command": "confluent.diff.selectForCompare",
        "icon": "$(pass-filled)",
        "title": "Select for Compare",
        "category": "Confluent: Compare Resources"
      },
      {
        "command": "confluent.diff.compareWithSelected",
        "icon": "$(diff)",
        "title": "Compare with Selected",
        "category": "Confluent: Compare Resources",
        "enablement": "confluent.resourceSelectedForCompare"
      },
      {
        "command": "confluent.organizations.use",
        "icon": "$(organization)",
        "title": "Change Organization",
        "category": "Confluent: Organizations"
      },
      {
        "command": "confluent.copyOrganizationId",
        "title": "Copy Organization ID",
        "category": "Confluent: Resources"
      },
      {
        "command": "confluent.resources.refresh",
        "icon": "$(sync)",
        "title": "Refresh",
        "category": "Confluent: Resources"
      },
      {
        "command": "confluent.kafka-clusters.item.rename",
        "icon": "$(pencil)",
        "title": "Rename Kafka Cluster",
        "category": "Confluent: Kafka Clusters"
      },
      {
        "command": "confluent.resources.kafka-cluster.copyBootstrapServers",
        "title": "Copy Bootstrap Server(s)",
        "category": "Confluent: Kafka Clusters"
      },
      {
        "command": "confluent.resources.kafka-cluster.select",
        "icon": "$(confluent-kafka-cluster)",
        "title": "Select Kafka Cluster",
        "category": "Confluent: Resources"
      },
      {
        "command": "confluent.resources.schema-registry.select",
        "icon": "$(confluent-schema-registry)",
        "title": "Select Schema Registry",
        "category": "Confluent: Resources"
      },
      {
        "command": "confluent.resources.ccloudenvironment.viewflinkstatements",
        "title": "Select Flink Environment",
        "icon": "$(confluent-environment)",
        "category": "Confluent: Resources"
      },
      {
        "command": "confluent.resources.flink-compute-pool.select",
        "icon": "$(confluent-flink-compute-pool)",
        "title": "Select Flink Compute Pool",
        "category": "Confluent: Resources"
      },
      {
        "command": "confluent.statements.flink-compute-pool.select",
        "icon": "$(confluent-flink-compute-pool)",
        "title": "Select Flink Compute Pool",
        "category": "Confluent: Flink Statements"
      },
      {
        "command": "confluent.artifacts.flink-compute-pool.select",
        "icon": "$(confluent-flink-compute-pool)",
        "title": "Select Flink Compute Pool",
        "category": "Confluent: Flink Artifacts",
        "enablement": "false"
      },
      {
        "command": "confluent.statements.refresh",
        "icon": "$(sync)",
        "title": "Refresh",
        "category": "Confluent: Flink Statements"
      },
      {
        "command": "confluent.statements.create",
        "icon": "$(cloud-upload)",
        "title": "Submit Flink Statement",
        "category": "Confluent: Flink Statements"
      },
      {
        "command": "confluent.statements.viewstatementsql",
        "title": "View Statement SQL",
        "category": "Confluent: Flink Statements"
      },
      {
        "command": "confluent.flink.configureFlinkDefaults",
        "icon": "$(settings-gear)",
        "title": "Configure default settings for Flink SQL actions",
        "category": "Confluent: Flink Defaults"
      },
      {
        "command": "confluent.resources.search",
        "icon": "$(search)",
        "title": "Search",
        "category": "Confluent: Resources View"
      },
      {
        "command": "confluent.resources.search.clear",
        "title": "Clear Search",
        "category": "Confluent: Resources View"
      },
      {
        "command": "confluent.resources.scaffold",
        "title": "Generate Project From Resource",
        "category": "Confluent: Resource Project"
      },
      {
        "command": "confluent.scaffold",
        "title": "Generate New Project",
        "category": "Confluent: Project"
      },
      {
        "command": "confluent.schemaViewer.viewLocally",
        "icon": "$(file-code)",
        "title": "View Schema",
        "category": "Confluent: Schema"
      },
      {
        "command": "confluent.schemaViewer.viewLatestLocally",
        "icon": "$(file-code)",
        "title": "View Latest Schema",
        "category": "Confluent: Schema"
      },
      {
        "command": "confluent.schemas.refresh",
        "icon": "$(sync)",
        "title": "Refresh",
        "category": "Confluent: Schemas"
      },
      {
        "command": "confluent.schemas.create",
        "icon": "$(plus)",
        "title": "Create New Schema",
        "category": "Confluent: Schemas"
      },
      {
        "command": "confluent.schemas.upload",
        "icon": "$(cloud-upload)",
        "title": "Upload Schema to Schema Registry",
        "category": "Confluent: Schemas"
      },
      {
        "command": "confluent.schemas.uploadForSubject",
        "icon": "$(cloud-upload)",
        "title": "Upload Schema to Schema Registry for Subject",
        "category": "Confluent: Schemas"
      },
      {
        "command": "confluent.schemas.evolve",
        "icon": "$(confluent-evolve-schema)",
        "title": "Evolve Schema",
        "category": "Confluent: Schemas"
      },
      {
        "command": "confluent.schemas.deleteVersion",
        "title": "Delete Schema Version",
        "category": "Confluent: Schemas"
      },
      {
        "command": "confluent.schemas.deleteSubject",
        "title": "Delete All Schemas in Subject",
        "category": "Confluent: Schemas"
      },
      {
        "command": "confluent.schemas.evolveSchemaSubject",
        "icon": "$(confluent-evolve-schema)",
        "title": "Evolve Latest Schema",
        "category": "Confluent: Schemas"
      },
      {
        "command": "confluent.schemas.copySchemaRegistryId",
        "title": "Copy Schema Registry ID",
        "category": "Confluent: Schemas"
      },
      {
        "command": "confluent.schemas.search",
        "icon": "$(search)",
        "title": "Search",
        "category": "Confluent: Schemas View"
      },
      {
        "command": "confluent.schemas.search.clear",
        "title": "Clear Search",
        "category": "Confluent: Schemas View"
      },
      {
        "command": "confluent.showOutputChannel",
        "title": "Show Output Channel",
        "icon": "$(output)",
        "category": "Confluent"
      },
      {
        "command": "confluent.showSidecarOutputChannel",
        "title": "Show Sidecar Output Channel",
        "icon": "$(output)",
        "category": "Confluent"
      },
      {
        "command": "confluent.support.confluent-walkthrough.launch",
        "title": "Get Started with Kafka",
        "category": "Confluent: Support"
      },
      {
        "command": "confluent.support.saveLogs",
        "title": "Save Logs",
        "category": "Confluent: Support"
      },
      {
        "command": "confluent.support.saveSidecarLogs",
        "title": "Save Sidecar Logs",
        "category": "Confluent: Support"
      },
      {
        "command": "confluent.support.saveSupportZip",
        "title": "Save Support File (.zip)",
        "category": "Confluent: Support"
      },
      {
        "command": "confluent.support.feedback",
        "title": "Give Feedback",
        "category": "Confluent: Support"
      },
      {
        "command": "confluent.support.issue",
        "title": "Report an Issue",
        "category": "Confluent: Support"
      },
      {
        "command": "confluent.support.openSettings",
        "title": "Open Settings",
        "category": "Confluent: Support"
      },
      {
        "command": "confluent.topic.consume",
        "icon": "$(confluent-view-messages)",
        "title": "View Messages",
        "category": "Confluent: Topic"
      },
      {
        "command": "confluent.flinkStatementResults",
        "icon": "$(confluent-view-messages)",
        "title": "View Flink Statement Results",
        "category": "Confluent: Flink Statements"
      },
      {
        "command": "confluent.topic.consume.duplicate",
        "icon": "$(explorer-view-icon)",
        "title": "Duplicate Message Viewer",
        "category": "Confluent: Topic",
        "enablement": "activeWebviewPanelId == message-viewer"
      },
      {
        "command": "confluent.topic.consume.getUri",
        "icon": "$(link)",
        "title": "Copy Link to Message Viewer",
        "category": "Confluent: Topic",
        "enablement": "activeWebviewPanelId == message-viewer"
      },
      {
        "command": "confluent.topic.consume.fromUri",
        "icon": "$(link)",
        "title": "Open Message Viewer from Link",
        "category": "Confluent: Topic",
        "enablement": "false"
      },
      {
        "command": "confluent.topic.produce.fromDocument",
        "title": "Send Message(s) to Topic",
        "icon": "$(confluent-send-message)",
        "category": "Confluent: Topic"
      },
      {
        "command": "confluent.topics.create",
        "icon": "$(plus)",
        "title": "Create Topic",
        "category": "Confluent: Topics"
      },
      {
        "command": "confluent.topics.edit",
        "title": "Configure Topic",
        "category": "Confluent: Topics"
      },
      {
        "command": "confluent.topics.delete",
        "title": "Delete Topic",
        "category": "Confluent: Topics"
      },
      {
        "command": "confluent.topics.openlatestschemas",
        "title": "View Latest Schema Version(s)",
        "category": "Confluent: Topics"
      },
      {
        "command": "confluent.topics.refresh",
        "icon": "$(sync)",
        "title": "Refresh",
        "category": "Confluent: Topics"
      },
      {
        "command": "confluent.topics.copyKafkaClusterId",
        "title": "Copy Kafka Cluster ID",
        "category": "Confluent: Topics"
      },
      {
        "command": "confluent.topics.copyKafkaClusterName",
        "title": "Copy Kafka Cluster Name",
        "category": "Confluent: Topics"
      },
      {
        "command": "confluent.topics.copyKafkaClusterBootstrapServers",
        "title": "Copy Kafka Cluster Bootstrap Server(s)",
        "category": "Confluent: Topics"
      },
      {
        "command": "confluent.topics.search",
        "icon": "$(search)",
        "title": "Search",
        "category": "Confluent: Topics View"
      },
      {
        "command": "confluent.topics.search.clear",
        "title": "Clear Search",
        "category": "Confluent: Topics View"
      },
      {
        "command": "confluent.openCCloudLink",
        "icon": "$(confluent-logo)",
        "title": "View in Confluent Cloud",
        "category": "Confluent: Resources"
      },
      {
        "command": "confluent.openCCloudApiKeysUrl",
        "icon": "$(confluent-logo)",
        "title": "Manage API Keys in Confluent Cloud",
        "category": "Confluent: Resources"
      },
      {
        "command": "confluent.document.flinksql.setCCloudComputePool",
        "icon": "$(confluent-logo)",
        "title": "Set CCloud Flink Compute Pool for Flink Statement",
        "category": "Confluent: Flink SQL"
      },
      {
        "command": "confluent.document.flinksql.setCCloudDatabase",
        "icon": "$(confluent-logo)",
        "title": "Set CCloud Flink Database for Flink Statement",
        "category": "Confluent: Flink SQL"
      },
      {
        "command": "confluent.document.flinksql.resetCCloudMetadata",
        "icon": "Clear Settings",
        "title": "Reset CCloud Flink Metadata",
        "category": "Confluent: Flink SQL"
      },
      {
        "command": "confluent.connections.setKrb5ConfigPath",
        "title": "Set Kerberos krb5.conf Path",
        "category": "Confluent: Connections"
      }
    ],
    "configuration": [
      {
        "title": "Confluent",
        "properties": {
          "confluent.cloud.messageViewer.showSchemaWarningNotifications": {
            "type": "boolean",
            "default": true,
            "description": "Whether or not warning notifications will appear when consuming messages without permission to access the associated Schema Registry."
          },
          "confluent.debugging.showSidecarExceptions": {
            "type": "boolean",
            "default": false,
            "description": "Alert on sidecar process exceptions"
          },
          "confluent.debugging.sslTls.serverCertificateVerificationDisabled": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Disable SSL/TLS server certificate verification when making requests to Confluent/Kafka connections or resources.\n\n---\n\n⚠️ **WARNING**: This setting may allow a Man-in-the-Middle attack on the network connection between the Confluent extension and Confluent Cloud, which can lead to loss of sensitive data like credentials and PII. **_This should only be used for debugging purposes in non-production environments._**"
          },
          "confluent.ssl.pemPaths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "markdownDescription": "Path(s) to `.pem` file(s) to use for SSL/TLS connections when making requests to Confluent Cloud. (You can also use the [\"Add SSL/TLS PEM Path\" command](command:confluent.connections.addSSLPemPath).)\n\n_NOTE: This is only used for the main Confluent Cloud connection, and does not apply to custom/'direct' connections._"
          },
          "confluent.localDocker.socketPath": {
            "type": "string",
            "default": "",
            "markdownDescription": "Path to the Docker socket file.  (You can also use the [\"Set Docker Socket Path\" command](command:confluent.docker.setSocketPath).)"
          },
          "confluent.localDocker.kafkaImageRepo": {
            "type": "string",
            "enum": [
              "confluentinc/confluent-local"
            ],
            "default": "confluentinc/confluent-local",
            "description": "Docker image repo to use when starting a local Kafka container"
          },
          "confluent.localDocker.kafkaImageTag": {
            "type": "string",
            "default": "latest",
            "description": "Docker image tag to use when starting a local Kafka container"
          },
          "confluent.localDocker.schemaRegistryImageTag": {
            "type": "string",
            "default": "latest",
            "markdownDescription": "Docker image tag to use when starting a local Schema Registry container. (By default, this will use the [`confluentinc/cp-schema-registry`](https://hub.docker.com/r/confluentinc/cp-schema-registry/tags) image.)"
          },
          "confluent.topic.produceMessages.schemas.useTopicNameStrategy": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Use [TopicNameStrategy](https://docs.confluent.io/platform/current/schema-registry/fundamentals/serdes-develop/index.html#overview) for schema subject name when producing messages to Kafka topics. Disabling this will require selecting the subject name strategy to use."
          },
          "confluent.topic.produceMessages.schemas.allowOlderVersions": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Allow older schema versions to be used when producing messages to Kafka topics.\n\n- Enabling this will require selecting the schema version to use.\n\n- Disabling this will use the **latest schema version**.\n\n---\n\n⚠️ **WARNING**: Producing messages with older schema versions can be in violation of some schema compatibility settings."
          },
          "confluent.krb5ConfigPath": {
            "type": "string",
            "default": "",
            "markdownDescription": "Path to the `krb5.conf` file to use for Kerberos authentication in direct connections. This setting is used when connecting to Kafka clusters that require Kerberos authentication. (You can also use the [\"Set Kerberos krb5.conf Path\" command](command:confluent.connections.setKrb5ConfigPath).)"
          }
        }
      },
      {
        "title": "Flink SQL Defaults",
        "properties": {
          "confluent.preview.enableFlink": {
            "type": "boolean",
            "default": false,
            "order": 0,
            "description": "Enable Flink-related resource loading and associated actions.",
            "tags": [
              "preview"
            ]
          },
          "confluent.flink.computePoolId": {
            "type": "string",
            "default": "",
            "order": 2,
            "description": "ID for the compute pool to use as a default in Confluent Cloud for Apache Flink® SQL operations."
          },
          "confluent.flink.database": {
            "type": "string",
            "order": 3,
            "default": "",
            "description": "Name or ID for Apache Kafka® cluster in Confluent to use as the default Confluent Cloud for Apache Flink® SQL database."
          },
          "confluent.flink.updateComputePoolIdFromCodelens": {
            "markdownDescription": "Controls whether or not to update `#confluent.flink.computePoolId#` after selecting a compute pool from the 'Set Compute Pool' codelens.",
            "type": "string",
            "default": "ask",
            "enum": [
              "never",
              "ask",
              "always"
            ],
            "markdownEnumDescriptions": [
              "Don't ask, and **never** update `#confluent.flink.computePoolId#`.",
              "Show a notification asking whether or not to update `#confluent.flink.computePoolId#`.",
              "**Always** update `#confluent.flink.computePoolId#` without asking."
            ]
          },
          "confluent.flink.updateDatabaseFromCodelens": {
            "markdownDescription": "Controls whether or not to update `#confluent.flink.database#` after selecting a database from the 'Set Catalog & Database' codelens.",
            "type": "string",
            "default": "ask",
            "enum": [
              "never",
              "ask",
              "always"
            ],
            "markdownEnumDescriptions": [
              "Don't ask, and **never** update `#confluent.flink.database#`.",
              "Show a notification asking whether or not to update `#confluent.flink.database#`.",
              "**Always** update `#confluent.flink.database#` without asking."
            ]
          },
          "confluent.flink.statementPollingFrequency": {
            "type": "number",
            "default": 10,
            "description": "Frequency of refreshing non-terminal Flink statements (in seconds). Setting to 0 will disable polling updates entirely.",
            "minimum": 0,
            "maximum": 600
          },
          "confluent.flink.statementPollingLimit": {
            "type": "number",
            "default": 20,
            "description": "Maximum number of non-terminal Flink statements to poll for updated states. If more than this value are pollable, only the N most recently updated will be polled.",
            "minimum": 1,
            "maximum": 1000
          },
          "confluent.flink.statementPollingConcurrency": {
            "type": "number",
            "default": 5,
            "description": "Maximum number of concurrent polling requests for non-terminal Flink statements.",
            "minimum": 1,
            "maximum": 10
          }
        }
      },
      {
        "title": "Copilot Chat Participant",
        "properties": {
          "confluent.experimental.enableChatParticipant": {
            "order": 0,
            "type": "boolean",
            "default": false,
            "description": "Enable the Confluent chat participant for Copilot.",
            "tags": [
              "experimental"
            ]
          },
          "confluent.chat.telemetry.sendErrorData": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Include **error data** from Copilot chat participant results gathered from 👍/👎 feedback or from error responses. When disabled (default), no error details will be sent."
          },
          "confluent.chat.telemetry.sendToolCallData": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Include **tool call inputs and result contents** from Copilot chat participant results gathered from 👍/👎 feedback, as well as **tool call inputs** during tool call flows for general telemetry purposes.\n- When disabled (default), your privacy is protected as no model-provided tool inputs or result contents will be shared.\n- When enabled, potentially sensitive information will be sent including the full inputs provided to tools and their complete outputs (which may contain names, IDs, and detailed properties of your Confluent/Kafka resources).\n\nNOTE: If telemetry is enabled via `#telemetry.telemetryLevel#` and `#telemetry.feedback.enabled#`, we will always send the **names** of tools used, but not their inputs or outputs."
          }
        }
      }
    ],
    "grammars": [
      {
        "language": "flinksql",
        "scopeName": "source.flinksql",
        "path": "./flinksql.tmLanguage.json"
      }
    ],
    "languages": [
      {
        "id": "flinksql",
        "extensions": [
          ".flink.sql"
        ],
        "aliases": [
          "Flink SQL",
          "flinksql"
        ],
        "configuration": "./flinksql-language-config.json",
        "icon": {
          "light": "resources/flinksql-dark.svg",
          "dark": "resources/flinksql-light.svg"
        }
      }
    ],
    "keybindings": [
      {
        "command": "confluent.resources.search",
        "key": "ctrl+f",
        "mac": "cmd+f",
        "when": "focusedView == confluent-resources"
      },
      {
        "command": "confluent.topics.search",
        "key": "ctrl+f",
        "mac": "cmd+f",
        "when": "focusedView == confluent-topics"
      },
      {
        "command": "confluent.schemas.search",
        "key": "ctrl+f",
        "mac": "cmd+f",
        "when": "focusedView == confluent-schemas"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "confluent",
          "title": "Confluent",
          "icon": "resources/confluent-logo.svg"
        }
      ]
    },
    "views": {
      "confluent": [
        {
          "id": "confluent-resources",
          "name": "Resources",
          "icon": "$(confluent-logo)",
          "contextualTitle": "Confluent: Resources"
        },
        {
          "id": "confluent-topics",
          "name": "Topics",
          "visibility": "collapsed",
          "icon": "$(confluent-logo)",
          "contextualTitle": "Confluent: Topics"
        },
        {
          "id": "confluent-schemas",
          "name": "Schemas",
          "visibility": "collapsed",
          "icon": "$(confluent-logo)",
          "contextualTitle": "Confluent: Schemas"
        },
        {
          "id": "confluent-flink-statements",
          "name": "Flink Statements",
          "visibility": "collapsed",
          "icon": "$(confluent-logo)",
          "when": "confluent.flinkEnabled",
          "contextualTitle": "Confluent: Flink Statements"
        },
        {
          "id": "confluent-flink-artifacts",
          "name": "Flink Artifacts",
          "visibility": "collapsed",
          "icon": "$(confluent-logo)",
          "when": "false",
          "contextualTitle": "Confluent: Flink Artifacts"
        },
        {
          "id": "confluent-support",
          "name": "Support",
          "icon": "$(confluent-logo)"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "confluent-resources",
        "contents": "No resources found.",
        "when": "!confluent.resourceSearchApplied"
      },
      {
        "view": "confluent-resources",
        "contents": "No resources match search string. [Clear search](command:confluent.resources.search.clear) or [try a new search](command:confluent.resources.search).",
        "when": "confluent.resourceSearchApplied"
      },
      {
        "view": "confluent-schemas",
        "contents": "No Schema Registries available.\n[Connect to Confluent Cloud](command:confluent.connections.ccloud.signIn)\nAlternatively, [start Schema Registry locally](command:confluent.docker.startLocalResources) with Docker or [connect directly](command:confluent.connections.direct) to a Schema Registry instance.",
        "when": "!(confluent.ccloudConnectionAvailable || confluent.localSchemaRegistryAvailable || confluent.directSchemaRegistryAvailable)"
      },
      {
        "view": "confluent-schemas",
        "contents": "No Schema Registry selected. Click below to get started.\n[Select Schema Registry](command:confluent.resources.schema-registry.select)",
        "when": "(confluent.ccloudConnectionAvailable || confluent.localSchemaRegistryAvailable || confluent.directSchemaRegistryAvailable) && !confluent.schemaRegistrySelected"
      },
      {
        "view": "confluent-schemas",
        "contents": "No schemas found.\n[Create Schema](command:confluent.schemas.create)",
        "when": "(confluent.ccloudConnectionAvailable || confluent.localSchemaRegistryAvailable || confluent.directSchemaRegistryAvailable) && confluent.schemaRegistrySelected && !confluent.schemaSearchApplied"
      },
      {
        "view": "confluent-schemas",
        "contents": "No schemas match search string. [Clear search](command:confluent.schemas.search.clear) or [try a new search](command:confluent.schemas.search).",
        "when": "(confluent.ccloudConnectionAvailable || confluent.localSchemaRegistryAvailable || confluent.directSchemaRegistryAvailable) && confluent.schemaRegistrySelected && confluent.schemaSearchApplied"
      },
      {
        "view": "confluent-topics",
        "contents": "No Kafka clusters available.\n[Connect to Confluent Cloud](command:confluent.connections.ccloud.signIn)\nAlternatively, [start Kafka locally](command:confluent.docker.startLocalResources) with Docker or [connect directly](command:confluent.connections.direct) to a Kafka cluster.",
        "when": "!(confluent.ccloudConnectionAvailable || confluent.localKafkaClusterAvailable || confluent.directKafkaClusterAvailable)"
      },
      {
        "view": "confluent-topics",
        "contents": "No Kafka cluster selected. Click below to get started.\n[Select Kafka Cluster](command:confluent.resources.kafka-cluster.select)",
        "when": "(confluent.ccloudConnectionAvailable || confluent.localKafkaClusterAvailable || confluent.directKafkaClusterAvailable) && !confluent.kafkaClusterSelected"
      },
      {
        "view": "confluent-topics",
        "contents": "No topics found.\n[Create Topic](command:confluent.topics.create)",
        "when": "(confluent.ccloudConnectionAvailable || confluent.localKafkaClusterAvailable || confluent.directKafkaClusterAvailable) && confluent.kafkaClusterSelected && !confluent.topicSearchApplied"
      },
      {
        "view": "confluent-topics",
        "contents": "No topics match search string. [Clear search](command:confluent.topics.search.clear) or [try a new search](command:confluent.topics.search).",
        "when": "(confluent.ccloudConnectionAvailable || confluent.localKafkaClusterAvailable || confluent.directKafkaClusterAvailable) && confluent.kafkaClusterSelected && confluent.topicSearchApplied"
      },
      {
        "view": "confluent-flink-statements",
        "contents": "No Flink compute pools available.\n[Connect to Confluent Cloud](command:confluent.connections.ccloud.signIn)",
        "when": "!confluent.ccloudConnectionAvailable"
      },
      {
        "view": "confluent-flink-statements",
        "contents": "No Flink compute pool selected. Click below to get started.\n[Select Flink Compute Pool](command:confluent.statements.flink-compute-pool.select)",
        "when": "confluent.ccloudConnectionAvailable && !confluent.flinkStatementsPoolSelected"
      },
      {
        "view": "confluent-flink-statements",
        "contents": "No Flink statements found.",
        "when": "confluent.ccloudConnectionAvailable && confluent.flinkStatementsPoolSelected"
      },
      {
        "view": "confluent-flink-artifacts",
        "contents": "No Flink compute pools available.\n[Connect to Confluent Cloud](command:confluent.connections.ccloud.signIn)",
        "when": "!confluent.ccloudConnectionAvailable"
      },
      {
        "view": "confluent-flink-artifacts",
        "contents": "No Flink compute pool selected. Click below to get started.\n[Select Flink Compute Pool](command:confluent.artifacts.flink-compute-pool.select)",
        "when": "confluent.ccloudConnectionAvailable && !confluent.flinkArtifactsPoolSelected"
      },
      {
        "view": "confluent-flink-artifacts",
        "contents": "No Flink artifacts found.",
        "when": "confluent.ccloudConnectionAvailable && confluent.flinkArtifactsPoolSelected"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "confluent.connections.ccloud.signIn",
          "when": "!confluent.ccloudConnectionAvailable"
        },
        {
          "command": "confluent.connections.ccloud.signOut",
          "when": "confluent.ccloudConnectionAvailable"
        },
        {
          "command": "confluent.connections.direct.delete",
          "when": "false"
        },
        {
          "command": "confluent.connections.direct.edit",
          "when": "false"
        },
        {
          "command": "confluent.connections.direct.export",
          "when": "false"
        },
        {
          "command": "confluent.copyOrganizationId",
          "when": "false"
        },
        {
          "command": "confluent.copyResourceId",
          "when": "false"
        },
        {
          "command": "confluent.copyResourceName",
          "when": "false"
        },
        {
          "command": "confluent.topic.produce.fromDocument",
          "when": "false"
        },
        {
          "command": "confluent.copyResourceUri",
          "when": "false"
        },
        {
          "command": "confluent.resources.kafka-cluster.copyBootstrapServers",
          "when": "false"
        },
        {
          "command": "confluent.kafka-clusters.item.rename",
          "when": "false"
        },
        {
          "command": "confluent.resources.search.clear",
          "when": "confluent.resourceSearchApplied"
        },
        {
          "command": "confluent.statements.viewstatementsql",
          "when": "false"
        },
        {
          "command": "confluent.statements.refresh",
          "when": "false"
        },
        {
          "command": "confluent.statements.create",
          "when": "false"
        },
        {
          "command": "confluent.schemaViewer.viewLocally",
          "when": "false"
        },
        {
          "command": "confluent.schemaViewer.viewLatestLocally",
          "when": "false"
        },
        {
          "command": "confluent.schemas.copySchemaRegistryId",
          "when": "false"
        },
        {
          "command": "confluent.schemas.evolve",
          "when": "false"
        },
        {
          "command": "confluent.schemas.deleteVersion",
          "when": "false"
        },
        {
          "command": "confluent.schemas.deleteSubject",
          "when": "false"
        },
        {
          "command": "confluent.schemas.evolveSchemaSubject",
          "when": "false"
        },
        {
          "command": "confluent.schemas.refresh",
          "when": "false"
        },
        {
          "command": "confluent.schemas.search.clear",
          "when": "confluent.schemaSearchApplied"
        },
        {
          "command": "confluent.schemas.upload",
          "when": "false"
        },
        {
          "command": "confluent.schemas.uploadForSubject",
          "when": "false"
        },
        {
          "command": "confluent.topics.delete",
          "when": "false"
        },
        {
          "command": "confluent.topics.edit",
          "when": "false"
        },
        {
          "command": "confluent.topics.openlatestschemas",
          "when": "false"
        },
        {
          "command": "confluent.topics.copyKafkaClusterId",
          "when": "false"
        },
        {
          "command": "confluent.topics.copyKafkaClusterName",
          "when": "false"
        },
        {
          "command": "confluent.topics.copyKafkaClusterBootstrapServers",
          "when": "false"
        },
        {
          "command": "confluent.topics.search.clear",
          "when": "confluent.topicSearchApplied"
        },
        {
          "command": "confluent.schemas.diffMostRecentVersions",
          "when": "false"
        },
        {
          "command": "confluent.openCCloudLink",
          "when": "false"
        },
        {
          "command": "confluent.openCCloudApiKeysUrl",
          "when": "false"
        },
        {
          "command": "confluent.document.flinksql.setCCloudComputePool",
          "when": "false"
        },
        {
          "command": "confluent.document.flinksql.setCCloudDatabase",
          "when": "false"
        },
        {
          "command": "confluent.document.flinksql.resetCCloudMetadata",
          "when": "false"
        },
        {
          "command": "confluent.resources.scaffold",
          "when": "false"
        }
      ],
      "editor/title": [
        {
          "command": "confluent.topic.consume.duplicate",
          "group": "navigation@1",
          "when": "activeWebviewPanelId == message-viewer"
        },
        {
          "command": "confluent.topic.consume.getUri",
          "group": "navigation@2",
          "when": "activeWebviewPanelId == message-viewer"
        }
      ],
      "editor/title/context": [
        {
          "command": "confluent.topic.consume.duplicate",
          "group": "navigation",
          "when": "activeWebviewPanelId == message-viewer"
        },
        {
          "command": "confluent.diff.selectForCompare",
          "when": "resourceScheme in confluent.diffableResources",
          "group": "3_compare"
        },
        {
          "command": "confluent.diff.compareWithSelected",
          "when": "resourceScheme in confluent.diffableResources && confluent.resourceSelectedForCompare",
          "group": "3_compare"
        }
      ],
      "editor/context": [
        {
          "command": "confluent.diff.selectForCompare",
          "when": "resourceScheme in confluent.diffableResources",
          "group": "1_diff"
        },
        {
          "command": "confluent.diff.compareWithSelected",
          "when": "resourceScheme in confluent.diffableResources && confluent.resourceSelectedForCompare",
          "group": "1_diff"
        }
      ],
      "view/title": [
        {
          "command": "confluent.resources.search",
          "when": "view == confluent-resources && !confluent.resourceSearchApplied",
          "group": "navigation@1"
        },
        {
          "command": "confluent.resources.search.clear",
          "when": "view == confluent-resources && confluent.resourceSearchApplied",
          "group": "navigation@1"
        },
        {
          "command": "confluent.connections.direct",
          "when": "view == confluent-resources",
          "group": "navigation@2"
        },
        {
          "command": "confluent.resources.refresh",
          "when": "view == confluent-resources",
          "group": "navigation@3"
        },
        {
          "command": "confluent.schemas.search",
          "when": "view == confluent-schemas && !confluent.schemaSearchApplied",
          "group": "navigation@1"
        },
        {
          "command": "confluent.schemas.search.clear",
          "when": "view == confluent-schemas && confluent.schemaSearchApplied",
          "group": "navigation@1"
        },
        {
          "command": "confluent.schemas.create",
          "when": "view == confluent-schemas",
          "group": "navigation@2"
        },
        {
          "command": "confluent.schemas.upload",
          "when": "view == confluent-schemas && confluent.schemaRegistrySelected",
          "group": "navigation@3"
        },
        {
          "command": "confluent.resources.schema-registry.select",
          "when": "view == confluent-schemas && (confluent.ccloudConnectionAvailable || confluent.localSchemaRegistryAvailable || confluent.directSchemaRegistryAvailable)",
          "group": "navigation@4"
        },
        {
          "command": "confluent.schemas.refresh",
          "when": "view == confluent-schemas",
          "group": "navigation@5"
        },
        {
          "command": "confluent.schemas.copySchemaRegistryId",
          "when": "view == confluent-schemas && confluent.schemaRegistrySelected",
          "group": "2_copy@1"
        },
        {
          "command": "confluent.topics.search",
          "when": "view == confluent-topics && !confluent.topicSearchApplied",
          "group": "navigation@1"
        },
        {
          "command": "confluent.topics.search.clear",
          "when": "view == confluent-topics && confluent.topicSearchApplied",
          "group": "navigation@1"
        },
        {
          "command": "confluent.topics.create",
          "when": "view == confluent-topics && confluent.kafkaClusterSelected",
          "group": "navigation@2"
        },
        {
          "command": "confluent.resources.kafka-cluster.select",
          "when": "view == confluent-topics && (confluent.ccloudConnectionAvailable || confluent.localKafkaClusterAvailable || confluent.directKafkaClusterAvailable)",
          "group": "navigation@3"
        },
        {
          "command": "confluent.topics.refresh",
          "when": "view == confluent-topics",
          "group": "navigation@4"
        },
        {
          "command": "confluent.topics.copyKafkaClusterId",
          "when": "view == confluent-topics && confluent.kafkaClusterSelected",
          "group": "2_copy@1"
        },
        {
          "command": "confluent.topics.copyKafkaClusterName",
          "when": "view == confluent-topics && confluent.kafkaClusterSelected",
          "group": "2_copy@2"
        },
        {
          "command": "confluent.topics.copyKafkaClusterBootstrapServers",
          "when": "view == confluent-topics && confluent.kafkaClusterSelected",
          "group": "2_copy@3"
        },
        {
          "command": "confluent.statements.create",
          "when": "view == confluent-flink-statements && confluent.ccloudConnectionAvailable && confluent.flinkStatementsPoolSelected",
          "group": "navigation@1"
        },
        {
          "command": "confluent.resources.ccloudenvironment.viewflinkstatements",
          "when": "view == confluent-flink-statements && confluent.ccloudConnectionAvailable",
          "group": "navigation@2"
        },
        {
          "command": "confluent.statements.flink-compute-pool.select",
          "when": "view == confluent-flink-statements && confluent.ccloudConnectionAvailable",
          "group": "navigation@3"
        },
        {
          "command": "confluent.statements.refresh",
          "when": "view == confluent-flink-statements && confluent.ccloudConnectionAvailable && confluent.flinkStatementsPoolSelected",
          "group": "navigation@4"
        },
        {
          "command": "confluent.artifacts.flink-compute-pool.select",
          "when": "view == confluent-flink-artifacts && confluent.ccloudConnectionAvailable",
          "group": "navigation@1"
        }
      ],
      "view/item/context": [
        {
          "command": "confluent.copyResourceId",
          "when": "view in confluent.viewsWithResources && (viewItem in confluent.resourcesWithIDs || viewItem =~ /.*-schema$/)",
          "group": "2_copy@1"
        },
        {
          "command": "confluent.copyResourceName",
          "when": "view in confluent.viewsWithResources && (viewItem in confluent.resourcesWithNames || viewItem =~ /.*-topic-.*/)",
          "group": "2_copy@2"
        },
        {
          "command": "confluent.copyResourceUri",
          "when": "view in confluent.viewsWithResources && viewItem in confluent.resourcesWithURIs",
          "group": "2_copy@3"
        },
        {
          "command": "confluent.docker.startLocalResources",
          "when": "view == confluent-resources && viewItem =~ /local-container.*/ && !(confluent.localKafkaClusterAvailable && confluent.localSchemaRegistryAvailable)",
          "group": "inline"
        },
        {
          "command": "confluent.docker.stopLocalResources",
          "when": "view == confluent-resources && viewItem == local-container-connected && confluent.localKafkaClusterAvailable",
          "group": "inline"
        },
        {
          "command": "confluent.diff.selectForCompare",
          "when": "(view == confluent-schemas || view == confluent-topics) && viewItem =~ /.*-schema$/",
          "group": "3_compare"
        },
        {
          "command": "confluent.diff.compareWithSelected",
          "when": "confluent.resourceSelectedForCompare && (view == confluent-schemas || view == confluent-topics) && viewItem =~ /.*-schema$/",
          "group": "3_compare"
        },
        {
          "command": "confluent.kafka-clusters.item.rename",
          "when": "false",
          "group": "inline@2"
        },
        {
          "command": "confluent.connections.ccloud.signIn",
          "when": "viewItem == resources-ccloud-container",
          "group": "inline@1"
        },
        {
          "command": "confluent.connections.direct.delete",
          "when": "viewItem == direct-environment",
          "group": "inline@3"
        },
        {
          "command": "confluent.connections.direct.edit",
          "when": "viewItem == direct-environment",
          "group": "inline@2"
        },
        {
          "command": "confluent.connections.direct.export",
          "when": "viewItem == direct-environment",
          "group": "inline@1"
        },
        {
          "command": "confluent.organizations.use",
          "when": "viewItem == resources-ccloud-container-connected",
          "group": "inline@1"
        },
        {
          "command": "confluent.connections.ccloud.signOut",
          "when": "viewItem == resources-ccloud-container-connected",
          "group": "inline@2"
        },
        {
          "command": "confluent.copyOrganizationId",
          "when": "viewItem == resources-ccloud-container-connected",
          "group": "2_copy@1"
        },
        {
          "command": "confluent.resources.ccloudenvironment.viewflinkstatements",
          "when": "view == confluent-resources && viewItem == flinkable-ccloud-environment",
          "group": "1_flink@1"
        },
        {
          "command": "confluent.resources.kafka-cluster.copyBootstrapServers",
          "when": "view == confluent-resources && viewItem =~ /.*-kafka-cluster.*/",
          "group": "2_copy@3"
        },
        {
          "command": "confluent.resources.scaffold",
          "when": "view in confluent.viewsWithResources && ((viewItem =~ /.*-kafka-cluster.*/ || viewItem =~ /.*-topic.*/) || viewItem =~ /.*compute-pool*/)"
        },
        {
          "command": "confluent.schemas.copySchemaRegistryId",
          "when": "(view == confluent-schemas || view == confluent-topics) && viewItem =~ /.*-schema*/",
          "group": "4_copy@1"
        },
        {
          "command": "confluent.schemas.diffMostRecentVersions",
          "when": "(view == confluent-schemas || view == confluent-topics) && viewItem =~ /.*multiple-versions.*schema-subject/",
          "group": "3_compare"
        },
        {
          "command": "confluent.schemas.evolve",
          "when": "(view == confluent-schemas || view == confluent-topics) && viewItem =~ /.*evolvable.*schema$/",
          "group": "inline@1"
        },
        {
          "command": "confluent.schemas.deleteVersion",
          "when": "(view == confluent-schemas || view == confluent-topics) && viewItem =~ /.*schema$/",
          "group": "schemas"
        },
        {
          "command": "confluent.schemas.evolveSchemaSubject",
          "when": "(view == confluent-schemas || view == confluent-topics) && viewItem =~ /.*schema-subject$/",
          "group": "inline@2"
        },
        {
          "command": "confluent.schemas.deleteSubject",
          "when": "(view == confluent-schemas || view == confluent-topics) && viewItem =~ /.*schema-subject$/",
          "group": "schemas"
        },
        {
          "command": "confluent.schemas.upload",
          "when": "view == confluent-resources && viewItem =~ /.*-schema-registry/",
          "group": "inline@1"
        },
        {
          "command": "confluent.schemas.uploadForSubject",
          "when": "(view == confluent-schemas || view == confluent-topics) && viewItem =~ /.*schema-subject$/",
          "group": "inline@2"
        },
        {
          "command": "confluent.schemaViewer.viewLatestLocally",
          "when": "(view == confluent-schemas || view == confluent-topics) && viewItem =~ /.*schema-subject$/",
          "group": "inline@1"
        },
        {
          "command": "confluent.topic.consume",
          "when": "view == confluent-topics && viewItem =~ /.*-topic.*-authzREAD.*/",
          "group": "inline@1"
        },
        {
          "command": "confluent.flinkStatementResults",
          "when": "view == confluent-flink-statements && viewItem =~ /.*flink-statement$/",
          "group": "inline@1"
        },
        {
          "command": "confluent.topic.produce.fromDocument",
          "when": "view == confluent-topics && viewItem =~ /.*-topic.*-authzWRITE.*/",
          "group": "inline@2"
        },
        {
          "command": "confluent.topics.delete",
          "when": "view == confluent-topics && viewItem =~ /.*-topic.*-authzDELETE.*/",
          "group": "topics"
        },
        {
          "command": "confluent.topics.edit",
          "when": "view == confluent-topics && viewItem =~ /.*-topic.*-authzALTER_CONFIGS.*/",
          "group": "topics"
        },
        {
          "command": "confluent.topics.create",
          "when": "view == confluent-resources && (viewItem == ccloud-kafka-cluster || viewItem == local-kafka-cluster)",
          "group": "topics"
        },
        {
          "command": "confluent.topics.openlatestschemas",
          "when": "view == confluent-topics && viewItem =~ /.*-topic.*-with-schema.*/",
          "group": "topic_schemas@1"
        },
        {
          "command": "confluent.topics.copyKafkaClusterId",
          "when": "view == confluent-topics && viewItem =~ /.*-topic.*/",
          "group": "4_copy@1"
        },
        {
          "command": "confluent.topics.copyKafkaClusterName",
          "when": "view == confluent-topics && viewItem =~ /.*-topic.*/",
          "group": "4_copy@2"
        },
        {
          "command": "confluent.topics.copyKafkaClusterBootstrapServers",
          "when": "view == confluent-topics && viewItem =~ /.*-topic.*/",
          "group": "4_copy@3"
        },
        {
          "command": "confluent.openCCloudLink",
          "when": "view in confluent.viewsWithResources && (viewItem in confluent.ccloudResources || viewItem =~ /ccloud-kafka-topic.*/ || viewItem =~ /.*ccloud.*subject$/ || viewItem =~ /.*ccloud.*schema$/)",
          "group": "z_openInCloud"
        },
        {
          "command": "confluent.openCCloudApiKeysUrl",
          "when": "view in confluent.viewsWithResources && (viewItem == ccloud-kafka-cluster || viewItem == ccloud-schema-registry)",
          "group": "z_openInCloud"
        }
      ]
    },
    "colors": [],
    "icons": {
      "apache-kafka": {
        "description": "apache-kafka icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f101"
        }
      },
      "confluent-environment": {
        "description": "confluent-environment icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f102"
        }
      },
      "confluent-evolve-schema": {
        "description": "confluent-evolve-schema icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f103"
        }
      },
      "confluent-export-connection": {
        "description": "confluent-export-connection icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f104"
        }
      },
      "confluent-flink-compute-pool": {
        "description": "confluent-flink-compute-pool icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f105"
        }
      },
      "confluent-flink-statement-status-completed": {
        "description": "confluent-flink-statement-status-completed icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f106"
        }
      },
      "confluent-flink-statement-status-degraded": {
        "description": "confluent-flink-statement-status-degraded icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f107"
        }
      },
      "confluent-flink-statement-status-deleting": {
        "description": "confluent-flink-statement-status-deleting icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f108"
        }
      },
      "confluent-flink-statement-status-failed": {
        "description": "confluent-flink-statement-status-failed icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f109"
        }
      },
      "confluent-flink-statement-status-pending": {
        "description": "confluent-flink-statement-status-pending icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f10a"
        }
      },
      "confluent-flink-statement-status-running": {
        "description": "confluent-flink-statement-status-running icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f10b"
        }
      },
      "confluent-flink-statement-status-stopped": {
        "description": "confluent-flink-statement-status-stopped icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f10c"
        }
      },
      "confluent-kafka-cluster": {
        "description": "confluent-kafka-cluster icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f10d"
        }
      },
      "confluent-logo": {
        "description": "confluent-logo icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f10e"
        }
      },
      "confluent-new-message": {
        "description": "confluent-new-message icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f10f"
        }
      },
      "confluent-schema-registry": {
        "description": "confluent-schema-registry icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f110"
        }
      },
      "confluent-send-message": {
        "description": "confluent-send-message icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f111"
        }
      },
      "confluent-topic-without-schema": {
        "description": "confluent-topic-without-schema icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f112"
        }
      },
      "confluent-topic": {
        "description": "confluent-topic icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f113"
        }
      },
      "confluent-view-messages": {
        "description": "confluent-view-messages icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f114"
        }
      },
      "warpstream-logo": {
        "description": "warpstream-logo icon",
        "default": {
          "fontPath": "./resources/dist/icons.woff2",
          "fontCharacter": "\\f115"
        }
      }
    },
    "walkthroughs": [
      {
        "id": "confluent-walkthrough",
        "title": "Get Started with Confluent for VS Code",
        "description": "Interact with Apache Kafka® clusters running locally or on Confluent Cloud.",
        "steps": [
          {
            "id": "connect-confluent-cloud",
            "title": "Connect to Confluent Cloud",
            "description": "Sign in to see your Confluent Cloud resources.\n[Sign in](command:confluent.connections.ccloud.signIn)\n[Sign up for free](https://confluent.cloud/signup?utm_source=vscode-ext)",
            "media": {
              "image": "resources/walkthrough/connect.png",
              "altText": "Connect to Kafka clusters"
            },
            "completionEvents": [
              "onCommand:confluent.connections.ccloud.signIn"
            ]
          },
          {
            "id": "create-connections",
            "title": "Connect Directly",
            "description": "To connect to Confluent Cloud (via API Credential), Confluent Platform, WarpStream, Apache Kafka, and/or Schema Registry clusters.\n Select the $(plus) icon at the top of the Resources view to create or import a connection.\n[Create Connection](command:confluent.connections.direct)",
            "media": {
              "image": "resources/walkthrough/direct-connection-form.png",
              "altText": "Create a new connection to a Kafka cluster and/or Schema Registry"
            },
            "completionEvents": [
              "onCommand:confluent.connections.direct"
            ]
          },
          {
            "id": "connect-local-cluster",
            "title": "Start Local Environment",
            "description": "Start Kafka and Stream Registry clusters by selecting the $(debug-start) icon next to the 'Local' item in the Resources view.\n[Start Local Resources](command:confluent.docker.startLocalResources)",
            "media": {
              "image": "resources/walkthrough/start-local.png",
              "altText": "Connect to Kafka clusters"
            },
            "completionEvents": [
              "onCommand:confluent.docker.startLocalResources"
            ]
          },
          {
            "id": "view-topics",
            "title": "View Messages",
            "description": "Select the $(confluent-view-messages) icon next to a topic to open the Message Viewer and explore the messages produced to the topic.",
            "media": {
              "image": "resources/walkthrough/message-viewer.png",
              "altText": "Select the $(confluent-view-messages) icon next to a topic to see the Message viewer."
            },
            "completionEvents": [
              "onCommand:confluent.topic.consume"
            ]
          },
          {
            "id": "produce-messages",
            "title": "Produce Messages",
            "description": "Select the $(confluent-send-message) icon next to a topic to produce messages from files.",
            "media": {
              "image": "resources/walkthrough/produce-message.png",
              "altText": "Select the 'Send Message(s) to Topic' icon next to a topic to produce message to it."
            },
            "completionEvents": [
              "onCommand:confluent.topic.produce.fromDocument"
            ]
          },
          {
            "id": "inspect-schemas",
            "title": "Inspect Schemas",
            "description": "Examine schemas associated with your topics either from the Topics view or the Schemas view.",
            "media": {
              "image": "resources/walkthrough/schema-inspector.png",
              "altText": "Schema definitions are viewable in the editor area after expanding a subject and selecting on a version in the Topics view or the Schemas view."
            },
            "completionEvents": []
          },
          {
            "id": "iterate-schemas",
            "title": "Iterate Schemas",
            "description": "Create, update, and evolve schemas from the Schemas view.",
            "media": {
              "image": "resources/walkthrough/schema-inspector.png",
              "altText": "Schema structure is shown in the VS Code file viewer while you navigate schemas in the Topics view or the Schemas view."
            },
            "completionEvents": [
              "onCommand:confluent.schemas.create",
              "onCommand:confluent.schemas.upload",
              "onCommand:confluent.schemas.evolve",
              "onCommand:confluent.schemas.evolveSchemaSubject"
            ]
          },
          {
            "id": "cc-flink-statements",
            "title": "Confluent Cloud for Apache Flink",
            "description": "Author, submit, and view the result of Flink SQL statements in Confluent Cloud.\n[Enable Flink Support](command:workbench.action.openSettings?%5B%22%40id%3Aconfluent.preview.enableFlink%22%5D)",
            "media": {
              "markdown": "resources/walkthrough/flink/statements.md"
            },
            "completionEvents": [
              "onCommand:confluent.statements.create",
              "onCommand:confluent.statements.refresh",
              "onCommand:confluent.statements.viewstatementsql",
              "onCommand:confluent.flinkStatementResults"
            ]
          },
          {
            "id": "copilot",
            "title": "Copiloting Your Data Streaming",
            "description": "The extension provides a Copilot-powered chat assistant for Confluent and Apache Kafka® developers, offering guidance on configuration, development best practices, and troubleshooting for Kafka clusters, Schema Registry, Flink, and streaming applications. \n[Enable Copilot Chat Participant](command:workbench.action.openSettings?%5B%22%40ext%3Aconfluentinc.vscode-confluent%20copilot%22%5D)",
            "media": {
              "image": "resources/walkthrough/copilot.png",
              "altText": "The extension provides a Copilot-powered chat assistant for Confluent and Apache Kafka® developers, offering guidance on configuration, development best practices, and troubleshooting for Kafka clusters, Schema Registry, Flink, and streaming applications."
            }
          },
          {
            "id": "diff-resources",
            "title": "Compare Resources Side by Side",
            "description": "Use VS Code's powerful diff viewer to compare topic messages or schema definitions, making it easier to spot changes between different items.",
            "media": {
              "markdown": "resources/walkthrough/diffs/diff-guide.md"
            },
            "completionEvents": [
              "onCommand:confluent.diff.compareWithSelected"
            ]
          },
          {
            "id": "generate-project",
            "title": "Generate Files for a New Project",
            "description": "Just starting out? Run ``Generate New Project`` to get a complete scaffolding setup with all the necessary boilerplate files to kickstart your Kafka project.\n[Create new project](command:confluent.scaffold)",
            "media": {
              "markdown": "resources/walkthrough/generate-project.md"
            },
            "completionEvents": [
              "onCommand:confluent.scaffold"
            ]
          },
          {
            "id": "give-feedback",
            "title": "Provide Feedback",
            "description": "Your feedback has a direct impact on the evolution of the product.\n[Give Feedback](https://forms.gle/V4aWAa1PWJRBtGgGA)",
            "media": {
              "markdown": "resources/walkthrough/feedback.md"
            },
            "completionEvents": []
          }
        ]
      }
    ]
  },
  "devDependencies": {
    "@0no-co/graphqlsp": "^1.12.8",
    "@eslint/js": "^9.4.0",
    "@openapitools/openapi-generator-cli": "^2.19.1",
    "@playwright/test": "^1.45.0",
    "@rollup/plugin-alias": "^5.1.0",
    "@rollup/plugin-commonjs": "^26.0.1",
    "@rollup/plugin-json": "^6.1.0",
    "@rollup/plugin-node-resolve": "^15.2.3",
    "@rollup/plugin-replace": "^5.0.7",
    "@rollup/plugin-virtual": "^3.0.2",
    "@twbs/fantasticon": "3.0.0",
    "@types/archiver": "^6.0.3",
    "@types/d3": "^7.4.3",
    "@types/eslint__js": "^8.42.3",
    "@types/gulp": "^4.0.17",
    "@types/mocha": "^10.0.6",
    "@types/node": "^18.19.67",
    "@types/sanitize-html": "^2.13.0",
    "@types/sinon": "^17.0.3",
    "@types/tail": "^2.2.3",
    "@types/vscode": "^1.97.0",
    "@types/ws": "^8.5.13",
    "@vscode/test-cli": "^0.0.6",
    "@vscode/test-electron": "^2.3.9",
    "@vscode/vsce": "^3.1.0",
    "dotenv": "^16.4.5",
    "electron-playwright-helpers": "^1.7.1",
    "esbuild": "^0.25.0",
    "eslint": "^9.17.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-prettier": "^5.1.3",
    "globals": "^15.4.0",
    "gulp": "^5.0.0",
    "lightningcss": "^1.26.0",
    "mocha-junit-reporter": "^2.2.1",
    "mocha-multi-reporters": "^1.5.1",
    "prettier": "3.2.5",
    "rimraf": "^6.0.1",
    "rollup": "^4.18.0",
    "rollup-plugin-copy": "^3.5.0",
    "rollup-plugin-esbuild": "^6.1.1",
    "rollwright": "^0.0.6",
    "sanitize-html": "^2.14.0",
    "sinon": "^18.0.1",
    "typescript": "^5.4.2",
    "typescript-eslint": "^8.25.0"
  },
  "dependencies": {
    "@segment/analytics-node": "^2.1.2",
    "@sentry/node": "^9.3.0",
    "@sentry/profiling-node": "^9.3.0",
    "@sentry/rollup-plugin": "^3.2.1",
    "@vscode/codicons": "^0.0.36",
    "@vscode/webview-ui-toolkit": "^1.4.0",
    "archiver": "^7.0.1",
    "async-mutex": "^0.5.0",
    "d3": "^7.9.0",
    "dataclass": "^3.0.0-beta.1",
    "gql.tada": "^1.8.3",
    "graphql": "^16.8.2",
    "inertial": "^0.4.1",
    "launchdarkly-electron-client-sdk": "^1.7.0",
    "launchdarkly-node-client-sdk": "^3.3.0",
    "opentelemetry-instrumentation-fetch-node": "^1.2.3",
    "rotating-file-stream": "^3.2.6",
    "tail": "^2.2.6",
    "undici": "^6.21.2",
    "unzipit": "^1.4.3",
    "uuid": "^11.1.0",
    "vscode-json-languageservice": "^5.4.2",
    "vscode-languageclient": "^9.0.1",
    "vscode-languageserver": "^9.0.1",
    "ws": "^8.18.0"
  }
}
