/* tslint:disable */
/* eslint-disable */
/**
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client\'s commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don\'t break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.43) is used. For example, calling `/info` is the same as calling `/v1.43/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * The version of the OpenAPI document: 1.43
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { PluginsInfo } from "./PluginsInfo";
import { PluginsInfoFromJSON, PluginsInfoFromJSONTyped, PluginsInfoToJSON } from "./PluginsInfo";
import type { GenericResourcesInner } from "./GenericResourcesInner";
import {
  GenericResourcesInnerFromJSON,
  GenericResourcesInnerFromJSONTyped,
  GenericResourcesInnerToJSON,
} from "./GenericResourcesInner";
import type { Runtime } from "./Runtime";
import { RuntimeFromJSON, RuntimeFromJSONTyped, RuntimeToJSON } from "./Runtime";
import type { SystemInfoDefaultAddressPoolsInner } from "./SystemInfoDefaultAddressPoolsInner";
import {
  SystemInfoDefaultAddressPoolsInnerFromJSON,
  SystemInfoDefaultAddressPoolsInnerFromJSONTyped,
  SystemInfoDefaultAddressPoolsInnerToJSON,
} from "./SystemInfoDefaultAddressPoolsInner";
import type { Commit } from "./Commit";
import { CommitFromJSON, CommitFromJSONTyped, CommitToJSON } from "./Commit";
import type { RegistryServiceConfig } from "./RegistryServiceConfig";
import {
  RegistryServiceConfigFromJSON,
  RegistryServiceConfigFromJSONTyped,
  RegistryServiceConfigToJSON,
} from "./RegistryServiceConfig";
import type { SwarmInfo } from "./SwarmInfo";
import { SwarmInfoFromJSON, SwarmInfoFromJSONTyped, SwarmInfoToJSON } from "./SwarmInfo";

/**
 *
 * @export
 * @interface SystemInfo
 */
export interface SystemInfo {
  /**
   * Unique identifier of the daemon.
   *
   * <p><br /></p>
   *
   * > **Note**: The format of the ID itself is not part of the API, and
   * > should not be considered stable.
   *
   * @type {string}
   * @memberof SystemInfo
   */
  ID?: string;
  /**
   * Total number of containers on the host.
   * @type {number}
   * @memberof SystemInfo
   */
  Containers?: number;
  /**
   * Number of containers with status `"running"`.
   *
   * @type {number}
   * @memberof SystemInfo
   */
  ContainersRunning?: number;
  /**
   * Number of containers with status `"paused"`.
   *
   * @type {number}
   * @memberof SystemInfo
   */
  ContainersPaused?: number;
  /**
   * Number of containers with status `"stopped"`.
   *
   * @type {number}
   * @memberof SystemInfo
   */
  ContainersStopped?: number;
  /**
   * Total number of images on the host.
   *
   * Both _tagged_ and _untagged_ (dangling) images are counted.
   *
   * @type {number}
   * @memberof SystemInfo
   */
  Images?: number;
  /**
   * Name of the storage driver in use.
   * @type {string}
   * @memberof SystemInfo
   */
  Driver?: string;
  /**
   * Information specific to the storage driver, provided as
   * "label" / "value" pairs.
   *
   * This information is provided by the storage driver, and formatted
   * in a way consistent with the output of `docker info` on the command
   * line.
   *
   * <p><br /></p>
   *
   * > **Note**: The information returned in this field, including the
   * > formatting of values and labels, should not be considered stable,
   * > and may change without notice.
   *
   * @type {Array<Array<string>>}
   * @memberof SystemInfo
   */
  DriverStatus?: Array<Array<string>>;
  /**
   * Root directory of persistent Docker state.
   *
   * Defaults to `/var/lib/docker` on Linux, and `C:\ProgramData\docker`
   * on Windows.
   *
   * @type {string}
   * @memberof SystemInfo
   */
  DockerRootDir?: string;
  /**
   *
   * @type {PluginsInfo}
   * @memberof SystemInfo
   */
  Plugins?: PluginsInfo;
  /**
   * Indicates if the host has memory limit support enabled.
   * @type {boolean}
   * @memberof SystemInfo
   */
  MemoryLimit?: boolean;
  /**
   * Indicates if the host has memory swap limit support enabled.
   * @type {boolean}
   * @memberof SystemInfo
   */
  SwapLimit?: boolean;
  /**
   * Indicates if the host has kernel memory TCP limit support enabled. This
   * field is omitted if not supported.
   *
   * Kernel memory TCP limits are not supported when using cgroups v2, which
   * does not support the corresponding `memory.kmem.tcp.limit_in_bytes` cgroup.
   *
   * @type {boolean}
   * @memberof SystemInfo
   */
  KernelMemoryTCP?: boolean;
  /**
   * Indicates if CPU CFS(Completely Fair Scheduler) period is supported by
   * the host.
   *
   * @type {boolean}
   * @memberof SystemInfo
   */
  CpuCfsPeriod?: boolean;
  /**
   * Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by
   * the host.
   *
   * @type {boolean}
   * @memberof SystemInfo
   */
  CpuCfsQuota?: boolean;
  /**
   * Indicates if CPU Shares limiting is supported by the host.
   *
   * @type {boolean}
   * @memberof SystemInfo
   */
  CPUShares?: boolean;
  /**
   * Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.
   *
   * See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt)
   *
   * @type {boolean}
   * @memberof SystemInfo
   */
  CPUSet?: boolean;
  /**
   * Indicates if the host kernel has PID limit support enabled.
   * @type {boolean}
   * @memberof SystemInfo
   */
  PidsLimit?: boolean;
  /**
   * Indicates if OOM killer disable is supported on the host.
   * @type {boolean}
   * @memberof SystemInfo
   */
  OomKillDisable?: boolean;
  /**
   * Indicates IPv4 forwarding is enabled.
   * @type {boolean}
   * @memberof SystemInfo
   */
  IPv4Forwarding?: boolean;
  /**
   * Indicates if `bridge-nf-call-iptables` is available on the host.
   * @type {boolean}
   * @memberof SystemInfo
   */
  BridgeNfIptables?: boolean;
  /**
   * Indicates if `bridge-nf-call-ip6tables` is available on the host.
   * @type {boolean}
   * @memberof SystemInfo
   */
  BridgeNfIp6tables?: boolean;
  /**
   * Indicates if the daemon is running in debug-mode / with debug-level
   * logging enabled.
   *
   * @type {boolean}
   * @memberof SystemInfo
   */
  Debug?: boolean;
  /**
   * The total number of file Descriptors in use by the daemon process.
   *
   * This information is only returned if debug-mode is enabled.
   *
   * @type {number}
   * @memberof SystemInfo
   */
  NFd?: number;
  /**
   * The  number of goroutines that currently exist.
   *
   * This information is only returned if debug-mode is enabled.
   *
   * @type {number}
   * @memberof SystemInfo
   */
  NGoroutines?: number;
  /**
   * Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt)
   * format with nano-seconds.
   *
   * @type {string}
   * @memberof SystemInfo
   */
  SystemTime?: string;
  /**
   * The logging driver to use as a default for new containers.
   *
   * @type {string}
   * @memberof SystemInfo
   */
  LoggingDriver?: string;
  /**
   * The driver to use for managing cgroups.
   *
   * @type {string}
   * @memberof SystemInfo
   */
  CgroupDriver?: SystemInfoCgroupDriverEnum;
  /**
   * The version of the cgroup.
   *
   * @type {string}
   * @memberof SystemInfo
   */
  CgroupVersion?: SystemInfoCgroupVersionEnum;
  /**
   * Number of event listeners subscribed.
   * @type {number}
   * @memberof SystemInfo
   */
  NEventsListener?: number;
  /**
   * Kernel version of the host.
   *
   * On Linux, this information obtained from `uname`. On Windows this
   * information is queried from the <kbd>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\</kbd>
   * registry value, for example _"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)"_.
   *
   * @type {string}
   * @memberof SystemInfo
   */
  KernelVersion?: string;
  /**
   * Name of the host's operating system, for example: "Ubuntu 16.04.2 LTS"
   * or "Windows Server 2016 Datacenter"
   *
   * @type {string}
   * @memberof SystemInfo
   */
  OperatingSystem?: string;
  /**
   * Version of the host's operating system
   *
   * <p><br /></p>
   *
   * > **Note**: The information returned in this field, including its
   * > very existence, and the formatting of values, should not be considered
   * > stable, and may change without notice.
   *
   * @type {string}
   * @memberof SystemInfo
   */
  OSVersion?: string;
  /**
   * Generic type of the operating system of the host, as returned by the
   * Go runtime (`GOOS`).
   *
   * Currently returned values are "linux" and "windows". A full list of
   * possible values can be found in the [Go documentation](https://go.dev/doc/install/source#environment).
   *
   * @type {string}
   * @memberof SystemInfo
   */
  OSType?: string;
  /**
   * Hardware architecture of the host, as returned by the Go runtime
   * (`GOARCH`).
   *
   * A full list of possible values can be found in the [Go documentation](https://go.dev/doc/install/source#environment).
   *
   * @type {string}
   * @memberof SystemInfo
   */
  Architecture?: string;
  /**
   * The number of logical CPUs usable by the daemon.
   *
   * The number of available CPUs is checked by querying the operating
   * system when the daemon starts. Changes to operating system CPU
   * allocation after the daemon is started are not reflected.
   *
   * @type {number}
   * @memberof SystemInfo
   */
  NCPU?: number;
  /**
   * Total amount of physical memory available on the host, in bytes.
   *
   * @type {number}
   * @memberof SystemInfo
   */
  MemTotal?: number;
  /**
   * Address / URL of the index server that is used for image search,
   * and as a default for user authentication for Docker Hub and Docker Cloud.
   *
   * @type {string}
   * @memberof SystemInfo
   */
  IndexServerAddress?: string;
  /**
   *
   * @type {RegistryServiceConfig}
   * @memberof SystemInfo
   */
  RegistryConfig?: RegistryServiceConfig | null;
  /**
   * User-defined resources can be either Integer resources (e.g, `SSD=3`) or
   * String resources (e.g, `GPU=UUID1`).
   *
   * @type {Array<GenericResourcesInner>}
   * @memberof SystemInfo
   */
  GenericResources?: Array<GenericResourcesInner>;
  /**
   * HTTP-proxy configured for the daemon. This value is obtained from the
   * [`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.
   * Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL
   * are masked in the API response.
   *
   * Containers do not automatically inherit this configuration.
   *
   * @type {string}
   * @memberof SystemInfo
   */
  HttpProxy?: string;
  /**
   * HTTPS-proxy configured for the daemon. This value is obtained from the
   * [`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.
   * Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL
   * are masked in the API response.
   *
   * Containers do not automatically inherit this configuration.
   *
   * @type {string}
   * @memberof SystemInfo
   */
  HttpsProxy?: string;
  /**
   * Comma-separated list of domain extensions for which no proxy should be
   * used. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html)
   * environment variable.
   *
   * Containers do not automatically inherit this configuration.
   *
   * @type {string}
   * @memberof SystemInfo
   */
  NoProxy?: string;
  /**
   * Hostname of the host.
   * @type {string}
   * @memberof SystemInfo
   */
  Name?: string;
  /**
   * User-defined labels (key/value metadata) as set on the daemon.
   *
   * <p><br /></p>
   *
   * > **Note**: When part of a Swarm, nodes can both have _daemon_ labels,
   * > set through the daemon configuration, and _node_ labels, set from a
   * > manager node in the Swarm. Node labels are not included in this
   * > field. Node labels can be retrieved using the `/nodes/(id)` endpoint
   * > on a manager node in the Swarm.
   *
   * @type {Array<string>}
   * @memberof SystemInfo
   */
  Labels?: Array<string>;
  /**
   * Indicates if experimental features are enabled on the daemon.
   *
   * @type {boolean}
   * @memberof SystemInfo
   */
  ExperimentalBuild?: boolean;
  /**
   * Version string of the daemon.
   *
   * @type {string}
   * @memberof SystemInfo
   */
  ServerVersion?: string;
  /**
   * List of [OCI compliant](https://github.com/opencontainers/runtime-spec)
   * runtimes configured on the daemon. Keys hold the "name" used to
   * reference the runtime.
   *
   * The Docker daemon relies on an OCI compliant runtime (invoked via the
   * `containerd` daemon) as its interface to the Linux kernel namespaces,
   * cgroups, and SELinux.
   *
   * The default runtime is `runc`, and automatically configured. Additional
   * runtimes can be configured by the user and will be listed here.
   *
   * @type {{ [key: string]: Runtime; }}
   * @memberof SystemInfo
   */
  Runtimes?: { [key: string]: Runtime };
  /**
   * Name of the default OCI runtime that is used when starting containers.
   *
   * The default can be overridden per-container at create time.
   *
   * @type {string}
   * @memberof SystemInfo
   */
  DefaultRuntime?: string;
  /**
   *
   * @type {SwarmInfo}
   * @memberof SystemInfo
   */
  Swarm?: SwarmInfo;
  /**
   * Indicates if live restore is enabled.
   *
   * If enabled, containers are kept running when the daemon is shutdown
   * or upon daemon start if running containers are detected.
   *
   * @type {boolean}
   * @memberof SystemInfo
   */
  LiveRestoreEnabled?: boolean;
  /**
   * Represents the isolation technology to use as a default for containers.
   * The supported values are platform-specific.
   *
   * If no isolation value is specified on daemon start, on Windows client,
   * the default is `hyperv`, and on Windows server, the default is `process`.
   *
   * This option is currently not used on other platforms.
   *
   * @type {string}
   * @memberof SystemInfo
   */
  Isolation?: SystemInfoIsolationEnum;
  /**
   * Name and, optional, path of the `docker-init` binary.
   *
   * If the path is omitted, the daemon searches the host's `$PATH` for the
   * binary and uses the first result.
   *
   * @type {string}
   * @memberof SystemInfo
   */
  InitBinary?: string;
  /**
   *
   * @type {Commit}
   * @memberof SystemInfo
   */
  ContainerdCommit?: Commit;
  /**
   *
   * @type {Commit}
   * @memberof SystemInfo
   */
  RuncCommit?: Commit;
  /**
   *
   * @type {Commit}
   * @memberof SystemInfo
   */
  InitCommit?: Commit;
  /**
   * List of security features that are enabled on the daemon, such as
   * apparmor, seccomp, SELinux, user-namespaces (userns), rootless and
   * no-new-privileges.
   *
   * Additional configuration options for each security feature may
   * be present, and are included as a comma-separated list of key/value
   * pairs.
   *
   * @type {Array<string>}
   * @memberof SystemInfo
   */
  SecurityOptions?: Array<string>;
  /**
   * Reports a summary of the product license on the daemon.
   *
   * If a commercial license has been applied to the daemon, information
   * such as number of nodes, and expiration are included.
   *
   * @type {string}
   * @memberof SystemInfo
   */
  ProductLicense?: string;
  /**
   * List of custom default address pools for local networks, which can be
   * specified in the daemon.json file or dockerd option.
   *
   * Example: a Base "10.10.0.0/16" with Size 24 will define the set of 256
   * 10.10.[0-255].0/24 address pools.
   *
   * @type {Array<SystemInfoDefaultAddressPoolsInner>}
   * @memberof SystemInfo
   */
  DefaultAddressPools?: Array<SystemInfoDefaultAddressPoolsInner>;
  /**
   * List of warnings / informational messages about missing features, or
   * issues related to the daemon configuration.
   *
   * These messages can be printed by the client as information to the user.
   *
   * @type {Array<string>}
   * @memberof SystemInfo
   */
  Warnings?: Array<string>;
}

/**
 * @export
 */
export const SystemInfoCgroupDriverEnum = {
  Cgroupfs: "cgroupfs",
  Systemd: "systemd",
  None: "none",
} as const;
export type SystemInfoCgroupDriverEnum =
  (typeof SystemInfoCgroupDriverEnum)[keyof typeof SystemInfoCgroupDriverEnum];

/**
 * @export
 */
export const SystemInfoCgroupVersionEnum = {
  _1: "1",
  _2: "2",
} as const;
export type SystemInfoCgroupVersionEnum =
  (typeof SystemInfoCgroupVersionEnum)[keyof typeof SystemInfoCgroupVersionEnum];

/**
 * @export
 */
export const SystemInfoIsolationEnum = {
  Default: "default",
  Hyperv: "hyperv",
  Process: "process",
} as const;
export type SystemInfoIsolationEnum =
  (typeof SystemInfoIsolationEnum)[keyof typeof SystemInfoIsolationEnum];

/**
 * Check if a given object implements the SystemInfo interface.
 */
export function instanceOfSystemInfo(value: object): value is SystemInfo {
  return true;
}

export function SystemInfoFromJSON(json: any): SystemInfo {
  return SystemInfoFromJSONTyped(json, false);
}

export function SystemInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): SystemInfo {
  if (json == null) {
    return json;
  }
  return {
    ID: json["ID"] == null ? undefined : json["ID"],
    Containers: json["Containers"] == null ? undefined : json["Containers"],
    ContainersRunning: json["ContainersRunning"] == null ? undefined : json["ContainersRunning"],
    ContainersPaused: json["ContainersPaused"] == null ? undefined : json["ContainersPaused"],
    ContainersStopped: json["ContainersStopped"] == null ? undefined : json["ContainersStopped"],
    Images: json["Images"] == null ? undefined : json["Images"],
    Driver: json["Driver"] == null ? undefined : json["Driver"],
    DriverStatus: json["DriverStatus"] == null ? undefined : json["DriverStatus"],
    DockerRootDir: json["DockerRootDir"] == null ? undefined : json["DockerRootDir"],
    Plugins: json["Plugins"] == null ? undefined : PluginsInfoFromJSON(json["Plugins"]),
    MemoryLimit: json["MemoryLimit"] == null ? undefined : json["MemoryLimit"],
    SwapLimit: json["SwapLimit"] == null ? undefined : json["SwapLimit"],
    KernelMemoryTCP: json["KernelMemoryTCP"] == null ? undefined : json["KernelMemoryTCP"],
    CpuCfsPeriod: json["CpuCfsPeriod"] == null ? undefined : json["CpuCfsPeriod"],
    CpuCfsQuota: json["CpuCfsQuota"] == null ? undefined : json["CpuCfsQuota"],
    CPUShares: json["CPUShares"] == null ? undefined : json["CPUShares"],
    CPUSet: json["CPUSet"] == null ? undefined : json["CPUSet"],
    PidsLimit: json["PidsLimit"] == null ? undefined : json["PidsLimit"],
    OomKillDisable: json["OomKillDisable"] == null ? undefined : json["OomKillDisable"],
    IPv4Forwarding: json["IPv4Forwarding"] == null ? undefined : json["IPv4Forwarding"],
    BridgeNfIptables: json["BridgeNfIptables"] == null ? undefined : json["BridgeNfIptables"],
    BridgeNfIp6tables: json["BridgeNfIp6tables"] == null ? undefined : json["BridgeNfIp6tables"],
    Debug: json["Debug"] == null ? undefined : json["Debug"],
    NFd: json["NFd"] == null ? undefined : json["NFd"],
    NGoroutines: json["NGoroutines"] == null ? undefined : json["NGoroutines"],
    SystemTime: json["SystemTime"] == null ? undefined : json["SystemTime"],
    LoggingDriver: json["LoggingDriver"] == null ? undefined : json["LoggingDriver"],
    CgroupDriver: json["CgroupDriver"] == null ? undefined : json["CgroupDriver"],
    CgroupVersion: json["CgroupVersion"] == null ? undefined : json["CgroupVersion"],
    NEventsListener: json["NEventsListener"] == null ? undefined : json["NEventsListener"],
    KernelVersion: json["KernelVersion"] == null ? undefined : json["KernelVersion"],
    OperatingSystem: json["OperatingSystem"] == null ? undefined : json["OperatingSystem"],
    OSVersion: json["OSVersion"] == null ? undefined : json["OSVersion"],
    OSType: json["OSType"] == null ? undefined : json["OSType"],
    Architecture: json["Architecture"] == null ? undefined : json["Architecture"],
    NCPU: json["NCPU"] == null ? undefined : json["NCPU"],
    MemTotal: json["MemTotal"] == null ? undefined : json["MemTotal"],
    IndexServerAddress: json["IndexServerAddress"] == null ? undefined : json["IndexServerAddress"],
    RegistryConfig:
      json["RegistryConfig"] == null
        ? undefined
        : RegistryServiceConfigFromJSON(json["RegistryConfig"]),
    GenericResources:
      json["GenericResources"] == null
        ? undefined
        : (json["GenericResources"] as Array<any>).map(GenericResourcesInnerFromJSON),
    HttpProxy: json["HttpProxy"] == null ? undefined : json["HttpProxy"],
    HttpsProxy: json["HttpsProxy"] == null ? undefined : json["HttpsProxy"],
    NoProxy: json["NoProxy"] == null ? undefined : json["NoProxy"],
    Name: json["Name"] == null ? undefined : json["Name"],
    Labels: json["Labels"] == null ? undefined : json["Labels"],
    ExperimentalBuild: json["ExperimentalBuild"] == null ? undefined : json["ExperimentalBuild"],
    ServerVersion: json["ServerVersion"] == null ? undefined : json["ServerVersion"],
    Runtimes: json["Runtimes"] == null ? undefined : mapValues(json["Runtimes"], RuntimeFromJSON),
    DefaultRuntime: json["DefaultRuntime"] == null ? undefined : json["DefaultRuntime"],
    Swarm: json["Swarm"] == null ? undefined : SwarmInfoFromJSON(json["Swarm"]),
    LiveRestoreEnabled: json["LiveRestoreEnabled"] == null ? undefined : json["LiveRestoreEnabled"],
    Isolation: json["Isolation"] == null ? undefined : json["Isolation"],
    InitBinary: json["InitBinary"] == null ? undefined : json["InitBinary"],
    ContainerdCommit:
      json["ContainerdCommit"] == null ? undefined : CommitFromJSON(json["ContainerdCommit"]),
    RuncCommit: json["RuncCommit"] == null ? undefined : CommitFromJSON(json["RuncCommit"]),
    InitCommit: json["InitCommit"] == null ? undefined : CommitFromJSON(json["InitCommit"]),
    SecurityOptions: json["SecurityOptions"] == null ? undefined : json["SecurityOptions"],
    ProductLicense: json["ProductLicense"] == null ? undefined : json["ProductLicense"],
    DefaultAddressPools:
      json["DefaultAddressPools"] == null
        ? undefined
        : (json["DefaultAddressPools"] as Array<any>).map(
            SystemInfoDefaultAddressPoolsInnerFromJSON,
          ),
    Warnings: json["Warnings"] == null ? undefined : json["Warnings"],
  };
}

export function SystemInfoToJSON(value?: SystemInfo | null): any {
  if (value == null) {
    return value;
  }
  return {
    ID: value["ID"],
    Containers: value["Containers"],
    ContainersRunning: value["ContainersRunning"],
    ContainersPaused: value["ContainersPaused"],
    ContainersStopped: value["ContainersStopped"],
    Images: value["Images"],
    Driver: value["Driver"],
    DriverStatus: value["DriverStatus"],
    DockerRootDir: value["DockerRootDir"],
    Plugins: PluginsInfoToJSON(value["Plugins"]),
    MemoryLimit: value["MemoryLimit"],
    SwapLimit: value["SwapLimit"],
    KernelMemoryTCP: value["KernelMemoryTCP"],
    CpuCfsPeriod: value["CpuCfsPeriod"],
    CpuCfsQuota: value["CpuCfsQuota"],
    CPUShares: value["CPUShares"],
    CPUSet: value["CPUSet"],
    PidsLimit: value["PidsLimit"],
    OomKillDisable: value["OomKillDisable"],
    IPv4Forwarding: value["IPv4Forwarding"],
    BridgeNfIptables: value["BridgeNfIptables"],
    BridgeNfIp6tables: value["BridgeNfIp6tables"],
    Debug: value["Debug"],
    NFd: value["NFd"],
    NGoroutines: value["NGoroutines"],
    SystemTime: value["SystemTime"],
    LoggingDriver: value["LoggingDriver"],
    CgroupDriver: value["CgroupDriver"],
    CgroupVersion: value["CgroupVersion"],
    NEventsListener: value["NEventsListener"],
    KernelVersion: value["KernelVersion"],
    OperatingSystem: value["OperatingSystem"],
    OSVersion: value["OSVersion"],
    OSType: value["OSType"],
    Architecture: value["Architecture"],
    NCPU: value["NCPU"],
    MemTotal: value["MemTotal"],
    IndexServerAddress: value["IndexServerAddress"],
    RegistryConfig: RegistryServiceConfigToJSON(value["RegistryConfig"]),
    GenericResources:
      value["GenericResources"] == null
        ? undefined
        : (value["GenericResources"] as Array<any>).map(GenericResourcesInnerToJSON),
    HttpProxy: value["HttpProxy"],
    HttpsProxy: value["HttpsProxy"],
    NoProxy: value["NoProxy"],
    Name: value["Name"],
    Labels: value["Labels"],
    ExperimentalBuild: value["ExperimentalBuild"],
    ServerVersion: value["ServerVersion"],
    Runtimes: value["Runtimes"] == null ? undefined : mapValues(value["Runtimes"], RuntimeToJSON),
    DefaultRuntime: value["DefaultRuntime"],
    Swarm: SwarmInfoToJSON(value["Swarm"]),
    LiveRestoreEnabled: value["LiveRestoreEnabled"],
    Isolation: value["Isolation"],
    InitBinary: value["InitBinary"],
    ContainerdCommit: CommitToJSON(value["ContainerdCommit"]),
    RuncCommit: CommitToJSON(value["RuncCommit"]),
    InitCommit: CommitToJSON(value["InitCommit"]),
    SecurityOptions: value["SecurityOptions"],
    ProductLicense: value["ProductLicense"],
    DefaultAddressPools:
      value["DefaultAddressPools"] == null
        ? undefined
        : (value["DefaultAddressPools"] as Array<any>).map(
            SystemInfoDefaultAddressPoolsInnerToJSON,
          ),
    Warnings: value["Warnings"],
  };
}
