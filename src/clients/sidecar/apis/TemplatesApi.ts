/* tslint:disable */
/* eslint-disable */
/**
 * Confluent ide-sidecar API
 * API for the Confluent ide-sidecar, part of the Confluent extension for VS Code
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vscode@confluent.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { ApplyTemplateRequest, Template, TemplateList } from "../models/index";
import {
  ApplyTemplateRequestFromJSON,
  ApplyTemplateRequestToJSON,
  TemplateFromJSON,
  TemplateToJSON,
  TemplateListFromJSON,
  TemplateListToJSON,
} from "../models/index";

export interface GatewayV1TemplatesNameApplyPostRequest {
  name: string;
  ApplyTemplateRequest?: ApplyTemplateRequest;
}

export interface GatewayV1TemplatesNameGetRequest {
  name: string;
}

/**
 *
 */
export class TemplatesApi extends runtime.BaseAPI {
  /**
   */
  async gatewayV1TemplatesGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<TemplateList>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/gateway/v1/templates`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => TemplateListFromJSON(jsonValue));
  }

  /**
   */
  async gatewayV1TemplatesGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<TemplateList> {
    const response = await this.gatewayV1TemplatesGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Applies the specified template and returns the result as a zip file.
   * Apply a template
   */
  async gatewayV1TemplatesNameApplyPostRaw(
    requestParameters: GatewayV1TemplatesNameApplyPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Blob>> {
    if (requestParameters["name"] == null) {
      throw new runtime.RequiredError(
        "name",
        'Required parameter "name" was null or undefined when calling gatewayV1TemplatesNameApplyPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/gateway/v1/templates/{name}/apply`.replace(
          `{${"name"}}`,
          encodeURIComponent(String(requestParameters["name"])),
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ApplyTemplateRequestToJSON(requestParameters["ApplyTemplateRequest"]),
      },
      initOverrides,
    );

    return new runtime.BlobApiResponse(response);
  }

  /**
   * Applies the specified template and returns the result as a zip file.
   * Apply a template
   */
  async gatewayV1TemplatesNameApplyPost(
    requestParameters: GatewayV1TemplatesNameApplyPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Blob> {
    const response = await this.gatewayV1TemplatesNameApplyPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async gatewayV1TemplatesNameGetRaw(
    requestParameters: GatewayV1TemplatesNameGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Template>> {
    if (requestParameters["name"] == null) {
      throw new runtime.RequiredError(
        "name",
        'Required parameter "name" was null or undefined when calling gatewayV1TemplatesNameGet().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/gateway/v1/templates/{name}`.replace(
          `{${"name"}}`,
          encodeURIComponent(String(requestParameters["name"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => TemplateFromJSON(jsonValue));
  }

  /**
   */
  async gatewayV1TemplatesNameGet(
    requestParameters: GatewayV1TemplatesNameGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Template> {
    const response = await this.gatewayV1TemplatesNameGetRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
