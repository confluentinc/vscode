/* tslint:disable */
/* eslint-disable */
/**
 * Confluent ide-sidecar API
 * API for the Confluent ide-sidecar, part of the Confluent extension for VS Code
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vscode@confluent.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { OptionProperties } from "./OptionProperties";
import {
  OptionPropertiesFromJSON,
  OptionPropertiesFromJSONTyped,
  OptionPropertiesToJSON,
} from "./OptionProperties";

/**
 *
 * @export
 * @interface TemplateManifest
 */
export interface TemplateManifest {
  /**
   *
   * @type {string}
   * @memberof TemplateManifest
   */
  template_api_version: string;
  /**
   *
   * @type {string}
   * @memberof TemplateManifest
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof TemplateManifest
   */
  display_name: string;
  /**
   *
   * @type {string}
   * @memberof TemplateManifest
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof TemplateManifest
   */
  language: string;
  /**
   *
   * @type {string}
   * @memberof TemplateManifest
   */
  version: string;
  /**
   *
   * @type {Array<string>}
   * @memberof TemplateManifest
   */
  tags: Array<string>;
  /**
   *
   * @type {{ [key: string]: OptionProperties; }}
   * @memberof TemplateManifest
   */
  options?: { [key: string]: OptionProperties };
}

/**
 * Check if a given object implements the TemplateManifest interface.
 */
export function instanceOfTemplateManifest(value: object): value is TemplateManifest {
  if (!("template_api_version" in value) || value["template_api_version"] === undefined)
    return false;
  if (!("name" in value) || value["name"] === undefined) return false;
  if (!("display_name" in value) || value["display_name"] === undefined) return false;
  if (!("description" in value) || value["description"] === undefined) return false;
  if (!("language" in value) || value["language"] === undefined) return false;
  if (!("version" in value) || value["version"] === undefined) return false;
  if (!("tags" in value) || value["tags"] === undefined) return false;
  return true;
}

export function TemplateManifestFromJSON(json: any): TemplateManifest {
  return TemplateManifestFromJSONTyped(json, false);
}

export function TemplateManifestFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): TemplateManifest {
  if (json == null) {
    return json;
  }
  return {
    template_api_version: json["template_api_version"],
    name: json["name"],
    display_name: json["display_name"],
    description: json["description"],
    language: json["language"],
    version: json["version"],
    tags: json["tags"],
    options:
      json["options"] == null ? undefined : mapValues(json["options"], OptionPropertiesFromJSON),
  };
}

export function TemplateManifestToJSON(value?: TemplateManifest | null): any {
  if (value == null) {
    return value;
  }
  return {
    template_api_version: value["template_api_version"],
    name: value["name"],
    display_name: value["display_name"],
    description: value["description"],
    language: value["language"],
    version: value["version"],
    tags: value["tags"],
    options:
      value["options"] == null ? undefined : mapValues(value["options"], OptionPropertiesToJSON),
  };
}
