/* tslint:disable */
/* eslint-disable */
/**
 * Confluent ide-sidecar API
 * API for the Confluent ide-sidecar, part of Confluent for VS Code
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vscode@confluent.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { GlobalObjectReference } from "./GlobalObjectReference";
import {
  GlobalObjectReferenceFromJSON,
  GlobalObjectReferenceFromJSONTyped,
  GlobalObjectReferenceToJSON,
  GlobalObjectReferenceToJSONTyped,
} from "./GlobalObjectReference";
import type { ScaffoldV1TemplateOption } from "./ScaffoldV1TemplateOption";
import {
  ScaffoldV1TemplateOptionFromJSON,
  ScaffoldV1TemplateOptionFromJSONTyped,
  ScaffoldV1TemplateOptionToJSON,
  ScaffoldV1TemplateOptionToJSONTyped,
} from "./ScaffoldV1TemplateOption";

/**
 *
 * @export
 * @interface ScaffoldV1TemplateSpec
 */
export interface ScaffoldV1TemplateSpec {
  /**
   *
   * @type {string}
   * @memberof ScaffoldV1TemplateSpec
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof ScaffoldV1TemplateSpec
   */
  display_name?: string;
  /**
   *
   * @type {string}
   * @memberof ScaffoldV1TemplateSpec
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof ScaffoldV1TemplateSpec
   */
  version?: string;
  /**
   *
   * @type {string}
   * @memberof ScaffoldV1TemplateSpec
   */
  language?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ScaffoldV1TemplateSpec
   */
  tags?: Array<string>;
  /**
   *
   * @type {{ [key: string]: ScaffoldV1TemplateOption; }}
   * @memberof ScaffoldV1TemplateSpec
   */
  options?: { [key: string]: ScaffoldV1TemplateOption };
  /**
   *
   * @type {GlobalObjectReference}
   * @memberof ScaffoldV1TemplateSpec
   */
  template_collection?: GlobalObjectReference;
}

/**
 * Check if a given object implements the ScaffoldV1TemplateSpec interface.
 */
export function instanceOfScaffoldV1TemplateSpec(value: object): value is ScaffoldV1TemplateSpec {
  return true;
}

export function ScaffoldV1TemplateSpecFromJSON(json: any): ScaffoldV1TemplateSpec {
  return ScaffoldV1TemplateSpecFromJSONTyped(json, false);
}

export function ScaffoldV1TemplateSpecFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ScaffoldV1TemplateSpec {
  if (json == null) {
    return json;
  }
  return {
    name: json["name"] == null ? undefined : json["name"],
    display_name: json["display_name"] == null ? undefined : json["display_name"],
    description: json["description"] == null ? undefined : json["description"],
    version: json["version"] == null ? undefined : json["version"],
    language: json["language"] == null ? undefined : json["language"],
    tags: json["tags"] == null ? undefined : json["tags"],
    options:
      json["options"] == null
        ? undefined
        : mapValues(json["options"], ScaffoldV1TemplateOptionFromJSON),
    template_collection:
      json["template_collection"] == null
        ? undefined
        : GlobalObjectReferenceFromJSON(json["template_collection"]),
  };
}

export function ScaffoldV1TemplateSpecToJSON(json: any): ScaffoldV1TemplateSpec {
  return ScaffoldV1TemplateSpecToJSONTyped(json, false);
}

export function ScaffoldV1TemplateSpecToJSONTyped(
  value?: ScaffoldV1TemplateSpec | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    name: value["name"],
    display_name: value["display_name"],
    description: value["description"],
    version: value["version"],
    language: value["language"],
    tags: value["tags"],
    options:
      value["options"] == null
        ? undefined
        : mapValues(value["options"], ScaffoldV1TemplateOptionToJSON),
    template_collection: GlobalObjectReferenceToJSON(value["template_collection"]),
  };
}
