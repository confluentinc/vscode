/* tslint:disable */
/* eslint-disable */
/**
 * Confluent DTX Outpost API
 * API for the Confluent DTX Outpost, part of the Confluent extension for VS Code
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: vscode@confluent.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { Offset } from "./Offset";
import { OffsetFromJSON, OffsetFromJSONTyped, OffsetToJSON } from "./Offset";

/**
 *
 * @export
 * @interface MultiPartitionConsumeRequest
 */
export interface MultiPartitionConsumeRequest {
  /**
   *
   * @type {Array<Offset>}
   * @memberof MultiPartitionConsumeRequest
   */
  offsets?: Array<Offset>;
  /**
   *
   * @type {number}
   * @memberof MultiPartitionConsumeRequest
   */
  max_poll_records?: number;
  /**
   *
   * @type {number}
   * @memberof MultiPartitionConsumeRequest
   */
  fetch_max_bytes?: number;
  /**
   *
   * @type {boolean}
   * @memberof MultiPartitionConsumeRequest
   */
  from_beginning?: boolean;
}

/**
 * Check if a given object implements the MultiPartitionConsumeRequest interface.
 */
export function instanceOfMultiPartitionConsumeRequest(
  value: object,
): value is MultiPartitionConsumeRequest {
  return true;
}

export function MultiPartitionConsumeRequestFromJSON(json: any): MultiPartitionConsumeRequest {
  return MultiPartitionConsumeRequestFromJSONTyped(json, false);
}

export function MultiPartitionConsumeRequestFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): MultiPartitionConsumeRequest {
  if (json == null) {
    return json;
  }
  return {
    offsets:
      json["offsets"] == null ? undefined : (json["offsets"] as Array<any>).map(OffsetFromJSON),
    max_poll_records: json["max_poll_records"] == null ? undefined : json["max_poll_records"],
    fetch_max_bytes: json["fetch_max_bytes"] == null ? undefined : json["fetch_max_bytes"],
    from_beginning: json["from_beginning"] == null ? undefined : json["from_beginning"],
  };
}

export function MultiPartitionConsumeRequestToJSON(
  value?: MultiPartitionConsumeRequest | null,
): any {
  if (value == null) {
    return value;
  }
  return {
    offsets:
      value["offsets"] == null ? undefined : (value["offsets"] as Array<any>).map(OffsetToJSON),
    max_poll_records: value["max_poll_records"],
    fetch_max_bytes: value["fetch_max_bytes"],
    from_beginning: value["from_beginning"],
  };
}
