/* tslint:disable */
/* eslint-disable */
/**
 * Scaffolding API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 * An option of a template.
 * @export
 * @interface ScaffoldV1TemplateOption
 */
export interface ScaffoldV1TemplateOption {
  /**
   * A few words that accurately and concisely represent the human readable form of the option's key.
   * @type {string}
   * @memberof ScaffoldV1TemplateOption
   */
  display_name: string;
  /**
   * 1-2 sentences that describe the option.
   * @type {string}
   * @memberof ScaffoldV1TemplateOption
   */
  description: string;
  /**
   * An optional description or example of the information required for a form field, typically rendered within the entry field of a form.
   * @type {string}
   * @memberof ScaffoldV1TemplateOption
   */
  hint?: string;
  /**
   * An optional format modifer that serves as a hint for UI presentation. If specified, the only allowed value at this time is `password` to hint the UI to mask the input.
   * @type {string}
   * @memberof ScaffoldV1TemplateOption
   */
  format?: string;
  /**
   * An optional regular expression pattern such that only values matched by this pattern will be accepted.
   * @type {string}
   * @memberof ScaffoldV1TemplateOption
   */
  pattern?: string;
  /**
   * An optional attribute that specifies possible values for this option.
   * @type {Array<string>}
   * @memberof ScaffoldV1TemplateOption
   */
  _enum?: Array<string>;
  /**
   * Initial value of the form field for this option.
   * @type {string}
   * @memberof ScaffoldV1TemplateOption
   */
  initial_value?: string;
  /**
   * The minimum number of characters that must be provided for an option.
   * @type {number}
   * @memberof ScaffoldV1TemplateOption
   */
  min_length?: number;
  /**
   * Examples of valid values for this option.
   * @type {Array<string>}
   * @memberof ScaffoldV1TemplateOption
   */
  examples?: Array<string>;
}

/**
 * Check if a given object implements the ScaffoldV1TemplateOption interface.
 */
export function instanceOfScaffoldV1TemplateOption(
  value: object,
): value is ScaffoldV1TemplateOption {
  if (!("display_name" in value) || value["display_name"] === undefined) return false;
  if (!("description" in value) || value["description"] === undefined) return false;
  return true;
}

export function ScaffoldV1TemplateOptionFromJSON(json: any): ScaffoldV1TemplateOption {
  return ScaffoldV1TemplateOptionFromJSONTyped(json, false);
}

export function ScaffoldV1TemplateOptionFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ScaffoldV1TemplateOption {
  if (json == null) {
    return json;
  }
  return {
    display_name: json["display_name"],
    description: json["description"],
    hint: json["hint"] == null ? undefined : json["hint"],
    format: json["format"] == null ? undefined : json["format"],
    pattern: json["pattern"] == null ? undefined : json["pattern"],
    _enum: json["enum"] == null ? undefined : json["enum"],
    initial_value: json["initial_value"] == null ? undefined : json["initial_value"],
    min_length: json["min_length"] == null ? undefined : json["min_length"],
    examples: json["examples"] == null ? undefined : json["examples"],
  };
}

export function ScaffoldV1TemplateOptionToJSON(json: any): ScaffoldV1TemplateOption {
  return ScaffoldV1TemplateOptionToJSONTyped(json, false);
}

export function ScaffoldV1TemplateOptionToJSONTyped(
  value?: ScaffoldV1TemplateOption | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    display_name: value["display_name"],
    description: value["description"],
    hint: value["hint"],
    format: value["format"],
    pattern: value["pattern"],
    enum: value["_enum"],
    initial_value: value["initial_value"],
    min_length: value["min_length"],
    examples: value["examples"],
  };
}
