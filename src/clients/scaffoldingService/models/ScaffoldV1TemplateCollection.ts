/* tslint:disable */
/* eslint-disable */
/**
 * Scaffolding API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { ScaffoldV1TemplateCollectionMetadata } from "./ScaffoldV1TemplateCollectionMetadata";
import {
  ScaffoldV1TemplateCollectionMetadataFromJSON,
  ScaffoldV1TemplateCollectionMetadataFromJSONTyped,
  ScaffoldV1TemplateCollectionMetadataToJSON,
  ScaffoldV1TemplateCollectionMetadataToJSONTyped,
} from "./ScaffoldV1TemplateCollectionMetadata";
import type { ScaffoldV1TemplateCollectionSpec } from "./ScaffoldV1TemplateCollectionSpec";
import {
  ScaffoldV1TemplateCollectionSpecFromJSON,
  ScaffoldV1TemplateCollectionSpecFromJSONTyped,
  ScaffoldV1TemplateCollectionSpecToJSON,
  ScaffoldV1TemplateCollectionSpecToJSONTyped,
} from "./ScaffoldV1TemplateCollectionSpec";

/**
 * Template collections curate sets of templates.
 *
 * ## The Template Collections Model
 * <SchemaDefinition schemaRef="#/components/schemas/scaffold.v1.TemplateCollection" />
 * @export
 * @interface ScaffoldV1TemplateCollection
 */
export interface ScaffoldV1TemplateCollection {
  /**
   * APIVersion defines the schema version of this representation of a resource.
   * @type {string}
   * @memberof ScaffoldV1TemplateCollection
   */
  readonly api_version?: ScaffoldV1TemplateCollectionApiVersionEnum;
  /**
   * Kind defines the object this REST resource represents.
   * @type {string}
   * @memberof ScaffoldV1TemplateCollection
   */
  readonly kind?: ScaffoldV1TemplateCollectionKindEnum;
  /**
   *
   * @type {ScaffoldV1TemplateCollectionMetadata}
   * @memberof ScaffoldV1TemplateCollection
   */
  metadata?: ScaffoldV1TemplateCollectionMetadata;
  /**
   *
   * @type {ScaffoldV1TemplateCollectionSpec}
   * @memberof ScaffoldV1TemplateCollection
   */
  spec?: ScaffoldV1TemplateCollectionSpec;
}

/**
 * @export
 */
export const ScaffoldV1TemplateCollectionApiVersionEnum = {
  ScaffoldV1: "scaffold/v1",
} as const;
export type ScaffoldV1TemplateCollectionApiVersionEnum =
  (typeof ScaffoldV1TemplateCollectionApiVersionEnum)[keyof typeof ScaffoldV1TemplateCollectionApiVersionEnum];

/**
 * @export
 */
export const ScaffoldV1TemplateCollectionKindEnum = {
  TemplateCollection: "TemplateCollection",
} as const;
export type ScaffoldV1TemplateCollectionKindEnum =
  (typeof ScaffoldV1TemplateCollectionKindEnum)[keyof typeof ScaffoldV1TemplateCollectionKindEnum];

/**
 * Check if a given object implements the ScaffoldV1TemplateCollection interface.
 */
export function instanceOfScaffoldV1TemplateCollection(
  value: object,
): value is ScaffoldV1TemplateCollection {
  return true;
}

export function ScaffoldV1TemplateCollectionFromJSON(json: any): ScaffoldV1TemplateCollection {
  return ScaffoldV1TemplateCollectionFromJSONTyped(json, false);
}

export function ScaffoldV1TemplateCollectionFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ScaffoldV1TemplateCollection {
  if (json == null) {
    return json;
  }
  return {
    api_version: json["api_version"] == null ? undefined : json["api_version"],
    kind: json["kind"] == null ? undefined : json["kind"],
    metadata:
      json["metadata"] == null
        ? undefined
        : ScaffoldV1TemplateCollectionMetadataFromJSON(json["metadata"]),
    spec: json["spec"] == null ? undefined : ScaffoldV1TemplateCollectionSpecFromJSON(json["spec"]),
  };
}

export function ScaffoldV1TemplateCollectionToJSON(json: any): ScaffoldV1TemplateCollection {
  return ScaffoldV1TemplateCollectionToJSONTyped(json, false);
}

export function ScaffoldV1TemplateCollectionToJSONTyped(
  value?: Omit<ScaffoldV1TemplateCollection, "api_version" | "kind"> | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    metadata: ScaffoldV1TemplateCollectionMetadataToJSON(value["metadata"]),
    spec: ScaffoldV1TemplateCollectionSpecToJSON(value["spec"]),
  };
}
