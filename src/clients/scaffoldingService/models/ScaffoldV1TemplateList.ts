/* tslint:disable */
/* eslint-disable */
/**
 * Scaffolding API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { ScaffoldV1TemplateListDataInner } from "./ScaffoldV1TemplateListDataInner";
import {
  ScaffoldV1TemplateListDataInnerFromJSON,
  ScaffoldV1TemplateListDataInnerFromJSONTyped,
  ScaffoldV1TemplateListDataInnerToJSON,
  ScaffoldV1TemplateListDataInnerToJSONTyped,
} from "./ScaffoldV1TemplateListDataInner";
import type { ScaffoldV1TemplateListMetadata } from "./ScaffoldV1TemplateListMetadata";
import {
  ScaffoldV1TemplateListMetadataFromJSON,
  ScaffoldV1TemplateListMetadataFromJSONTyped,
  ScaffoldV1TemplateListMetadataToJSON,
  ScaffoldV1TemplateListMetadataToJSONTyped,
} from "./ScaffoldV1TemplateListMetadata";

/**
 * Templates can be used to generate application projects.
 *
 * ## The Templates Model
 * <SchemaDefinition schemaRef="#/components/schemas/scaffold.v1.Template" />
 * @export
 * @interface ScaffoldV1TemplateList
 */
export interface ScaffoldV1TemplateList {
  /**
   * APIVersion defines the schema version of this representation of a resource.
   * @type {string}
   * @memberof ScaffoldV1TemplateList
   */
  readonly api_version: ScaffoldV1TemplateListApiVersionEnum;
  /**
   * Kind defines the object this REST resource represents.
   * @type {string}
   * @memberof ScaffoldV1TemplateList
   */
  readonly kind: ScaffoldV1TemplateListKindEnum;
  /**
   *
   * @type {ScaffoldV1TemplateListMetadata}
   * @memberof ScaffoldV1TemplateList
   */
  metadata: ScaffoldV1TemplateListMetadata;
  /**
   * A data property that contains an array of resource items. Each entry in the array is a separate resource.
   * @type {Set<ScaffoldV1TemplateListDataInner>}
   * @memberof ScaffoldV1TemplateList
   */
  data: Set<ScaffoldV1TemplateListDataInner>;
}

/**
 * @export
 */
export const ScaffoldV1TemplateListApiVersionEnum = {
  ScaffoldV1: "scaffold/v1",
} as const;
export type ScaffoldV1TemplateListApiVersionEnum =
  (typeof ScaffoldV1TemplateListApiVersionEnum)[keyof typeof ScaffoldV1TemplateListApiVersionEnum];

/**
 * @export
 */
export const ScaffoldV1TemplateListKindEnum = {
  TemplateList: "TemplateList",
} as const;
export type ScaffoldV1TemplateListKindEnum =
  (typeof ScaffoldV1TemplateListKindEnum)[keyof typeof ScaffoldV1TemplateListKindEnum];

/**
 * Check if a given object implements the ScaffoldV1TemplateList interface.
 */
export function instanceOfScaffoldV1TemplateList(value: object): value is ScaffoldV1TemplateList {
  if (!("api_version" in value) || value["api_version"] === undefined) return false;
  if (!("kind" in value) || value["kind"] === undefined) return false;
  if (!("metadata" in value) || value["metadata"] === undefined) return false;
  if (!("data" in value) || value["data"] === undefined) return false;
  return true;
}

export function ScaffoldV1TemplateListFromJSON(json: any): ScaffoldV1TemplateList {
  return ScaffoldV1TemplateListFromJSONTyped(json, false);
}

export function ScaffoldV1TemplateListFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ScaffoldV1TemplateList {
  if (json == null) {
    return json;
  }
  return {
    api_version: json["api_version"],
    kind: json["kind"],
    metadata: ScaffoldV1TemplateListMetadataFromJSON(json["metadata"]),
    data: new Set((json["data"] as Array<any>).map(ScaffoldV1TemplateListDataInnerFromJSON)),
  };
}

export function ScaffoldV1TemplateListToJSON(json: any): ScaffoldV1TemplateList {
  return ScaffoldV1TemplateListToJSONTyped(json, false);
}

export function ScaffoldV1TemplateListToJSONTyped(
  value?: Omit<ScaffoldV1TemplateList, "api_version" | "kind"> | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    metadata: ScaffoldV1TemplateListMetadataToJSON(value["metadata"]),
    data: Array.from(value["data"] as Set<any>).map(ScaffoldV1TemplateListDataInnerToJSON),
  };
}
