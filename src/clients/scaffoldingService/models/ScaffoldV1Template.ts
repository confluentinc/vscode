/* tslint:disable */
/* eslint-disable */
/**
 * Scaffolding API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { ScaffoldV1TemplateMetadata } from "./ScaffoldV1TemplateMetadata";
import {
  ScaffoldV1TemplateMetadataFromJSON,
  ScaffoldV1TemplateMetadataFromJSONTyped,
  ScaffoldV1TemplateMetadataToJSON,
  ScaffoldV1TemplateMetadataToJSONTyped,
} from "./ScaffoldV1TemplateMetadata";
import type { ScaffoldV1TemplateSpec } from "./ScaffoldV1TemplateSpec";
import {
  ScaffoldV1TemplateSpecFromJSON,
  ScaffoldV1TemplateSpecFromJSONTyped,
  ScaffoldV1TemplateSpecToJSON,
  ScaffoldV1TemplateSpecToJSONTyped,
} from "./ScaffoldV1TemplateSpec";

/**
 * Templates can be used to generate application projects.
 *
 * ## The Templates Model
 * <SchemaDefinition schemaRef="#/components/schemas/scaffold.v1.Template" />
 * @export
 * @interface ScaffoldV1Template
 */
export interface ScaffoldV1Template {
  /**
   * APIVersion defines the schema version of this representation of a resource.
   * @type {string}
   * @memberof ScaffoldV1Template
   */
  readonly api_version?: ScaffoldV1TemplateApiVersionEnum;
  /**
   * Kind defines the object this REST resource represents.
   * @type {string}
   * @memberof ScaffoldV1Template
   */
  readonly kind?: ScaffoldV1TemplateKindEnum;
  /**
   *
   * @type {ScaffoldV1TemplateMetadata}
   * @memberof ScaffoldV1Template
   */
  metadata?: ScaffoldV1TemplateMetadata;
  /**
   *
   * @type {ScaffoldV1TemplateSpec}
   * @memberof ScaffoldV1Template
   */
  spec?: ScaffoldV1TemplateSpec;
}

/**
 * @export
 */
export const ScaffoldV1TemplateApiVersionEnum = {
  ScaffoldV1: "scaffold/v1",
} as const;
export type ScaffoldV1TemplateApiVersionEnum =
  (typeof ScaffoldV1TemplateApiVersionEnum)[keyof typeof ScaffoldV1TemplateApiVersionEnum];

/**
 * @export
 */
export const ScaffoldV1TemplateKindEnum = {
  Template: "Template",
} as const;
export type ScaffoldV1TemplateKindEnum =
  (typeof ScaffoldV1TemplateKindEnum)[keyof typeof ScaffoldV1TemplateKindEnum];

/**
 * Check if a given object implements the ScaffoldV1Template interface.
 */
export function instanceOfScaffoldV1Template(value: object): value is ScaffoldV1Template {
  return true;
}

export function ScaffoldV1TemplateFromJSON(json: any): ScaffoldV1Template {
  return ScaffoldV1TemplateFromJSONTyped(json, false);
}

export function ScaffoldV1TemplateFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ScaffoldV1Template {
  if (json == null) {
    return json;
  }
  return {
    api_version: json["api_version"] == null ? undefined : json["api_version"],
    kind: json["kind"] == null ? undefined : json["kind"],
    metadata:
      json["metadata"] == null ? undefined : ScaffoldV1TemplateMetadataFromJSON(json["metadata"]),
    spec: json["spec"] == null ? undefined : ScaffoldV1TemplateSpecFromJSON(json["spec"]),
  };
}

export function ScaffoldV1TemplateToJSON(json: any): ScaffoldV1Template {
  return ScaffoldV1TemplateToJSONTyped(json, false);
}

export function ScaffoldV1TemplateToJSONTyped(
  value?: Omit<ScaffoldV1Template, "api_version" | "kind"> | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    metadata: ScaffoldV1TemplateMetadataToJSON(value["metadata"]),
    spec: ScaffoldV1TemplateSpecToJSON(value["spec"]),
  };
}
