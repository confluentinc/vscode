/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { RowDTO } from "./RowDTO";
import { RowDTOFromJSON, RowDTOFromJSONTyped, RowDTOToJSON, RowDTOToJSONTyped } from "./RowDTO";
import type { ColumnDTO } from "./ColumnDTO";
import {
  ColumnDTOFromJSON,
  ColumnDTOFromJSONTyped,
  ColumnDTOToJSON,
  ColumnDTOToJSONTyped,
} from "./ColumnDTO";

/**
 *
 * @export
 * @interface TableDTO
 */
export interface TableDTO {
  /**
   *
   * @type {string}
   * @memberof TableDTO
   */
  table_name: string;
  /**
   *
   * @type {Array<ColumnDTO>}
   * @memberof TableDTO
   */
  columns: Array<ColumnDTO>;
  /**
   *
   * @type {Array<RowDTO>}
   * @memberof TableDTO
   */
  rows: Array<RowDTO>;
  /**
   *
   * @type {string}
   * @memberof TableDTO
   */
  key_column_name: string;
}

/**
 * Check if a given object implements the TableDTO interface.
 */
export function instanceOfTableDTO(value: object): value is TableDTO {
  if (!("table_name" in value) || value["table_name"] === undefined) return false;
  if (!("columns" in value) || value["columns"] === undefined) return false;
  if (!("rows" in value) || value["rows"] === undefined) return false;
  if (!("key_column_name" in value) || value["key_column_name"] === undefined) return false;
  return true;
}

export function TableDTOFromJSON(json: any): TableDTO {
  return TableDTOFromJSONTyped(json, false);
}

export function TableDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): TableDTO {
  if (json == null) {
    return json;
  }
  return {
    table_name: json["table_name"],
    columns: (json["columns"] as Array<any>).map(ColumnDTOFromJSON),
    rows: (json["rows"] as Array<any>).map(RowDTOFromJSON),
    key_column_name: json["key_column_name"],
  };
}

export function TableDTOToJSON(json: any): TableDTO {
  return TableDTOToJSONTyped(json, false);
}

export function TableDTOToJSONTyped(
  value?: TableDTO | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    table_name: value["table_name"],
    columns: (value["columns"] as Array<any>).map(ColumnDTOToJSON),
    rows: (value["rows"] as Array<any>).map(RowDTOToJSON),
    key_column_name: value["key_column_name"],
  };
}
