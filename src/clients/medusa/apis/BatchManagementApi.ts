/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { DatasetDTO, EventMessageList, EventStreamSimulationList } from "../models/index";
import {
  DatasetDTOFromJSON,
  DatasetDTOToJSON,
  EventMessageListFromJSON,
  EventMessageListToJSON,
  EventStreamSimulationListFromJSON,
  EventStreamSimulationListToJSON,
} from "../models/index";

export interface GenerateEventMessageBatchRequest {
  DatasetDTO: DatasetDTO;
  event_name?: string;
  count?: number;
}

export interface StreamSimulationRequest {
  DatasetDTO: DatasetDTO;
  event_name?: string;
  simulation_length_minutes?: number;
}

/**
 *
 */
export class BatchManagementApi extends runtime.BaseAPI {
  /**
   * Generates a batch of event messages based on the provided configuration
   * Generate batch events
   */
  async generateEventMessageBatchRaw(
    requestParameters: GenerateEventMessageBatchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<EventMessageList>> {
    if (requestParameters["DatasetDTO"] == null) {
      throw new runtime.RequiredError(
        "DatasetDTO",
        'Required parameter "DatasetDTO" was null or undefined when calling generateEventMessageBatch().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["event_name"] != null) {
      queryParameters["event_name"] = requestParameters["event_name"];
    }

    if (requestParameters["count"] != null) {
      queryParameters["count"] = requestParameters["count"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/v1/batch`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: DatasetDTOToJSON(requestParameters["DatasetDTO"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EventMessageListFromJSON(jsonValue),
    );
  }

  /**
   * Generates a batch of event messages based on the provided configuration
   * Generate batch events
   */
  async generateEventMessageBatch(
    requestParameters: GenerateEventMessageBatchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<EventMessageList> {
    const response = await this.generateEventMessageBatchRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Simulates stream behavior over a specified time period
   * Simulate stream
   */
  async streamSimulationRaw(
    requestParameters: StreamSimulationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<EventStreamSimulationList>> {
    if (requestParameters["DatasetDTO"] == null) {
      throw new runtime.RequiredError(
        "DatasetDTO",
        'Required parameter "DatasetDTO" was null or undefined when calling streamSimulation().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["event_name"] != null) {
      queryParameters["event_name"] = requestParameters["event_name"];
    }

    if (requestParameters["simulation_length_minutes"] != null) {
      queryParameters["simulation_length_minutes"] = requestParameters["simulation_length_minutes"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/v1/batch/stream-simulation`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: DatasetDTOToJSON(requestParameters["DatasetDTO"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EventStreamSimulationListFromJSON(jsonValue),
    );
  }

  /**
   * Simulates stream behavior over a specified time period
   * Simulate stream
   */
  async streamSimulation(
    requestParameters: StreamSimulationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<EventStreamSimulationList> {
    const response = await this.streamSimulationRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
