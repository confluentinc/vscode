/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  CategoryList,
  ValueGeneratorDetails,
  ValueGeneratorDetailsList,
} from "../models/index";
import {
  CategoryListFromJSON,
  CategoryListToJSON,
  ValueGeneratorDetailsFromJSON,
  ValueGeneratorDetailsToJSON,
  ValueGeneratorDetailsListFromJSON,
  ValueGeneratorDetailsListToJSON,
} from "../models/index";

export interface GetValueGeneratorDetailsRequest {
  valueGeneratorName: string;
}

export interface GetValueGeneratorsByCategoryRequest {
  category: string;
}

/**
 *
 */
export class ValueGeneratorsApi extends runtime.BaseAPI {
  /**
   * Returns a list of all available value generators and their details
   * Get all value generators
   */
  async getAllValueGeneratorDetailsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ValueGeneratorDetailsList>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/generators`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ValueGeneratorDetailsListFromJSON(jsonValue),
    );
  }

  /**
   * Returns a list of all available value generators and their details
   * Get all value generators
   */
  async getAllValueGeneratorDetails(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ValueGeneratorDetailsList> {
    const response = await this.getAllValueGeneratorDetailsRaw(initOverrides);
    return await response.value();
  }

  /**
   * Returns a list of all available value generator categories
   * Get all generator categories
   */
  async getValueGeneratorCategoriesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CategoryList>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/generators/categories`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CategoryListFromJSON(jsonValue));
  }

  /**
   * Returns a list of all available value generator categories
   * Get all generator categories
   */
  async getValueGeneratorCategories(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CategoryList> {
    const response = await this.getValueGeneratorCategoriesRaw(initOverrides);
    return await response.value();
  }

  /**
   * Returns details for a specific value generator
   * Get value generator by name
   */
  async getValueGeneratorDetailsRaw(
    requestParameters: GetValueGeneratorDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ValueGeneratorDetails>> {
    if (requestParameters["valueGeneratorName"] == null) {
      throw new runtime.RequiredError(
        "valueGeneratorName",
        'Required parameter "valueGeneratorName" was null or undefined when calling getValueGeneratorDetails().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/generators/{valueGeneratorName}`.replace(
          `{${"valueGeneratorName"}}`,
          encodeURIComponent(String(requestParameters["valueGeneratorName"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ValueGeneratorDetailsFromJSON(jsonValue),
    );
  }

  /**
   * Returns details for a specific value generator
   * Get value generator by name
   */
  async getValueGeneratorDetails(
    requestParameters: GetValueGeneratorDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ValueGeneratorDetails> {
    const response = await this.getValueGeneratorDetailsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Returns all value generators for a specific category
   * Get generators by category
   */
  async getValueGeneratorsByCategoryRaw(
    requestParameters: GetValueGeneratorsByCategoryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ValueGeneratorDetailsList>> {
    if (requestParameters["category"] == null) {
      throw new runtime.RequiredError(
        "category",
        'Required parameter "category" was null or undefined when calling getValueGeneratorsByCategory().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/generators/categories/{category}`.replace(
          `{${"category"}}`,
          encodeURIComponent(String(requestParameters["category"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ValueGeneratorDetailsListFromJSON(jsonValue),
    );
  }

  /**
   * Returns all value generators for a specific category
   * Get generators by category
   */
  async getValueGeneratorsByCategory(
    requestParameters: GetValueGeneratorsByCategoryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ValueGeneratorDetailsList> {
    const response = await this.getValueGeneratorsByCategoryRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
