/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { AvroSchemaResponseList, DatasetDTO } from "../models/index";
import {
  AvroSchemaResponseListFromJSON,
  AvroSchemaResponseListToJSON,
  DatasetDTOFromJSON,
  DatasetDTOToJSON,
} from "../models/index";

export interface ConvertAvroSchemaToDatasetRequest {
  body: string;
}

export interface GetAvroSchemaRequest {
  DatasetDTO: DatasetDTO;
  event_name?: string;
}

export interface GetAvroSchemasForStreamRequest {
  streamId: string;
  event_name?: string;
}

/**
 *
 */
export class SchemaManagementApi extends runtime.BaseAPI {
  /**
   * Converts an Avro schema into a streaming dataset configuration
   * Convert Avro schema to dataset
   */
  async convertAvroSchemaToDatasetRaw(
    requestParameters: ConvertAvroSchemaToDatasetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DatasetDTO>> {
    if (requestParameters["body"] == null) {
      throw new runtime.RequiredError(
        "body",
        'Required parameter "body" was null or undefined when calling convertAvroSchemaToDataset().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/v1/schemas/avro/convert`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["body"] as any,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => DatasetDTOFromJSON(jsonValue));
  }

  /**
   * Converts an Avro schema into a streaming dataset configuration
   * Convert Avro schema to dataset
   */
  async convertAvroSchemaToDataset(
    requestParameters: ConvertAvroSchemaToDatasetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DatasetDTO> {
    const response = await this.convertAvroSchemaToDatasetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Returns Avro schemas for a Dataset
   * Get Avro schemas for a Dataset
   */
  async getAvroSchemaRaw(
    requestParameters: GetAvroSchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AvroSchemaResponseList>> {
    if (requestParameters["DatasetDTO"] == null) {
      throw new runtime.RequiredError(
        "DatasetDTO",
        'Required parameter "DatasetDTO" was null or undefined when calling getAvroSchema().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["event_name"] != null) {
      queryParameters["event_name"] = requestParameters["event_name"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/v1/schemas/avro`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: DatasetDTOToJSON(requestParameters["DatasetDTO"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AvroSchemaResponseListFromJSON(jsonValue),
    );
  }

  /**
   * Returns Avro schemas for a Dataset
   * Get Avro schemas for a Dataset
   */
  async getAvroSchema(
    requestParameters: GetAvroSchemaRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AvroSchemaResponseList> {
    const response = await this.getAvroSchemaRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Returns Avro schemas for an existing stream
   * Get Avro schemas for existing stream
   */
  async getAvroSchemasForStreamRaw(
    requestParameters: GetAvroSchemasForStreamRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AvroSchemaResponseList>> {
    if (requestParameters["streamId"] == null) {
      throw new runtime.RequiredError(
        "streamId",
        'Required parameter "streamId" was null or undefined when calling getAvroSchemasForStream().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["event_name"] != null) {
      queryParameters["event_name"] = requestParameters["event_name"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/schemas/avro/stream/{streamId}`.replace(
          `{${"streamId"}}`,
          encodeURIComponent(String(requestParameters["streamId"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AvroSchemaResponseListFromJSON(jsonValue),
    );
  }

  /**
   * Returns Avro schemas for an existing stream
   * Get Avro schemas for existing stream
   */
  async getAvroSchemasForStream(
    requestParameters: GetAvroSchemasForStreamRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AvroSchemaResponseList> {
    const response = await this.getAvroSchemasForStreamRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
