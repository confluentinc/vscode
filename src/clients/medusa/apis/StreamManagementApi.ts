/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { DatasetDTO, StreamDetails } from "../models/index";
import {
  DatasetDTOFromJSON,
  DatasetDTOToJSON,
  StreamDetailsFromJSON,
  StreamDetailsToJSON,
} from "../models/index";

export interface BuildStreamRequest {
  DatasetDTO: DatasetDTO;
}

export interface BuildStreamWithIdRequest {
  streamId: string;
  DatasetDTO: DatasetDTO;
}

export interface GetDatasetStreamRequest {
  streamId: string;
  event_name?: string;
}

export interface StartDatasetStreamRequest {
  streamId: string;
}

/**
 *
 */
export class StreamManagementApi extends runtime.BaseAPI {
  /**
   * Build a new stream
   */
  async buildStreamRaw(
    requestParameters: BuildStreamRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StreamDetails>> {
    if (requestParameters["DatasetDTO"] == null) {
      throw new runtime.RequiredError(
        "DatasetDTO",
        'Required parameter "DatasetDTO" was null or undefined when calling buildStream().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/v1/streams`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: DatasetDTOToJSON(requestParameters["DatasetDTO"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => StreamDetailsFromJSON(jsonValue));
  }

  /**
   * Build a new stream
   */
  async buildStream(
    requestParameters: BuildStreamRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StreamDetails> {
    const response = await this.buildStreamRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Creates a new stream with a provided ID
   * Build a stream with specific ID
   */
  async buildStreamWithIdRaw(
    requestParameters: BuildStreamWithIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StreamDetails>> {
    if (requestParameters["streamId"] == null) {
      throw new runtime.RequiredError(
        "streamId",
        'Required parameter "streamId" was null or undefined when calling buildStreamWithId().',
      );
    }

    if (requestParameters["DatasetDTO"] == null) {
      throw new runtime.RequiredError(
        "DatasetDTO",
        'Required parameter "DatasetDTO" was null or undefined when calling buildStreamWithId().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/v1/streams/{streamId}`.replace(
          `{${"streamId"}}`,
          encodeURIComponent(String(requestParameters["streamId"])),
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: DatasetDTOToJSON(requestParameters["DatasetDTO"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => StreamDetailsFromJSON(jsonValue));
  }

  /**
   * Creates a new stream with a provided ID
   * Build a stream with specific ID
   */
  async buildStreamWithId(
    requestParameters: BuildStreamWithIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StreamDetails> {
    const response = await this.buildStreamWithIdRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Returns a Server-Sent Events (SSE) connection for real-time data.  **Note:** This endpoint cannot be tested in Swagger UI as it uses Server-Sent Events.  **Example usage with curl:** ```bash curl http://localhost:8082/stream/{streamId} ```
   * Subscribe to stream events
   */
  async getDatasetStreamRaw(
    requestParameters: GetDatasetStreamRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["streamId"] == null) {
      throw new runtime.RequiredError(
        "streamId",
        'Required parameter "streamId" was null or undefined when calling getDatasetStream().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["event_name"] != null) {
      queryParameters["event_name"] = requestParameters["event_name"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/streams/{streamId}`.replace(
          `{${"streamId"}}`,
          encodeURIComponent(String(requestParameters["streamId"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Returns a Server-Sent Events (SSE) connection for real-time data.  **Note:** This endpoint cannot be tested in Swagger UI as it uses Server-Sent Events.  **Example usage with curl:** ```bash curl http://localhost:8082/stream/{streamId} ```
   * Subscribe to stream events
   */
  async getDatasetStream(
    requestParameters: GetDatasetStreamRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getDatasetStreamRaw(requestParameters, initOverrides);
  }

  /**
   * Initiates data streaming for the specified stream
   * Start a stream
   */
  async startDatasetStreamRaw(
    requestParameters: StartDatasetStreamRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StreamDetails>> {
    if (requestParameters["streamId"] == null) {
      throw new runtime.RequiredError(
        "streamId",
        'Required parameter "streamId" was null or undefined when calling startDatasetStream().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/streams/{streamId}/start`.replace(
          `{${"streamId"}}`,
          encodeURIComponent(String(requestParameters["streamId"])),
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => StreamDetailsFromJSON(jsonValue));
  }

  /**
   * Initiates data streaming for the specified stream
   * Start a stream
   */
  async startDatasetStream(
    requestParameters: StartDatasetStreamRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StreamDetails> {
    const response = await this.startDatasetStreamRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
