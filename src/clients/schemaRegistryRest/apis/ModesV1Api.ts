/* tslint:disable */
/* eslint-disable */
/**
 * Confluent Schema Registry APIs
 * REST API for the Schema Registry
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { ErrorMessage, Mode, ModeUpdateRequest } from "../models/index";
import {
  ErrorMessageFromJSON,
  ErrorMessageToJSON,
  ModeFromJSON,
  ModeToJSON,
  ModeUpdateRequestFromJSON,
  ModeUpdateRequestToJSON,
} from "../models/index";

export interface DeleteSubjectModeRequest {
  subject: string;
}

export interface GetModeRequest {
  subject: string;
  defaultToGlobal?: boolean;
}

export interface UpdateModeRequest {
  subject: string;
  ModeUpdateRequest: ModeUpdateRequest;
  force?: boolean;
}

export interface UpdateTopLevelModeRequest {
  ModeUpdateRequest: ModeUpdateRequest;
  force?: boolean;
}

/**
 *
 */
export class ModesV1Api extends runtime.BaseAPI {
  /**
   * Deletes the specified subject-level mode and reverts to the global default.
   * Delete subject mode
   */
  async deleteSubjectModeRaw(
    requestParameters: DeleteSubjectModeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Mode>> {
    if (requestParameters["subject"] == null) {
      throw new runtime.RequiredError(
        "subject",
        'Required parameter "subject" was null or undefined when calling deleteSubjectMode().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "external-access-token",
        [],
      );
    }

    if (
      this.configuration &&
      (this.configuration.username !== undefined || this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/mode/{subject}`.replace(
          `{${"subject"}}`,
          encodeURIComponent(String(requestParameters["subject"])),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ModeFromJSON(jsonValue));
  }

  /**
   * Deletes the specified subject-level mode and reverts to the global default.
   * Delete subject mode
   */
  async deleteSubjectMode(
    requestParameters: DeleteSubjectModeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Mode> {
    const response = await this.deleteSubjectModeRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Retrieves the subject mode.
   * Get subject mode
   */
  async getModeRaw(
    requestParameters: GetModeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Mode>> {
    if (requestParameters["subject"] == null) {
      throw new runtime.RequiredError(
        "subject",
        'Required parameter "subject" was null or undefined when calling getMode().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["defaultToGlobal"] != null) {
      queryParameters["defaultToGlobal"] = requestParameters["defaultToGlobal"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "external-access-token",
        [],
      );
    }

    if (
      this.configuration &&
      (this.configuration.username !== undefined || this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/mode/{subject}`.replace(
          `{${"subject"}}`,
          encodeURIComponent(String(requestParameters["subject"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ModeFromJSON(jsonValue));
  }

  /**
   * Retrieves the subject mode.
   * Get subject mode
   */
  async getMode(
    requestParameters: GetModeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Mode> {
    const response = await this.getModeRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Retrieves global mode.
   * Get global mode
   */
  async getTopLevelModeRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Mode>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "external-access-token",
        [],
      );
    }

    if (
      this.configuration &&
      (this.configuration.username !== undefined || this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/mode`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ModeFromJSON(jsonValue));
  }

  /**
   * Retrieves global mode.
   * Get global mode
   */
  async getTopLevelMode(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Mode> {
    const response = await this.getTopLevelModeRaw(initOverrides);
    return await response.value();
  }

  /**
   * Update mode for the specified subject. On success, echoes the original request back to the client.
   * Update subject mode
   */
  async updateModeRaw(
    requestParameters: UpdateModeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ModeUpdateRequest>> {
    if (requestParameters["subject"] == null) {
      throw new runtime.RequiredError(
        "subject",
        'Required parameter "subject" was null or undefined when calling updateMode().',
      );
    }

    if (requestParameters["ModeUpdateRequest"] == null) {
      throw new runtime.RequiredError(
        "ModeUpdateRequest",
        'Required parameter "ModeUpdateRequest" was null or undefined when calling updateMode().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["force"] != null) {
      queryParameters["force"] = requestParameters["force"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/vnd.schemaregistry.v1+json";

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "external-access-token",
        [],
      );
    }

    if (
      this.configuration &&
      (this.configuration.username !== undefined || this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/mode/{subject}`.replace(
          `{${"subject"}}`,
          encodeURIComponent(String(requestParameters["subject"])),
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: ModeUpdateRequestToJSON(requestParameters["ModeUpdateRequest"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ModeUpdateRequestFromJSON(jsonValue),
    );
  }

  /**
   * Update mode for the specified subject. On success, echoes the original request back to the client.
   * Update subject mode
   */
  async updateMode(
    requestParameters: UpdateModeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ModeUpdateRequest> {
    const response = await this.updateModeRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Update global mode. On success, echoes the original request back to the client.
   * Update global mode
   */
  async updateTopLevelModeRaw(
    requestParameters: UpdateTopLevelModeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ModeUpdateRequest>> {
    if (requestParameters["ModeUpdateRequest"] == null) {
      throw new runtime.RequiredError(
        "ModeUpdateRequest",
        'Required parameter "ModeUpdateRequest" was null or undefined when calling updateTopLevelMode().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["force"] != null) {
      queryParameters["force"] = requestParameters["force"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/vnd.schemaregistry.v1+json";

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "external-access-token",
        [],
      );
    }

    if (
      this.configuration &&
      (this.configuration.username !== undefined || this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/mode`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: ModeUpdateRequestToJSON(requestParameters["ModeUpdateRequest"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ModeUpdateRequestFromJSON(jsonValue),
    );
  }

  /**
   * Update global mode. On success, echoes the original request back to the client.
   * Update global mode
   */
  async updateTopLevelMode(
    requestParameters: UpdateTopLevelModeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ModeUpdateRequest> {
    const response = await this.updateTopLevelModeRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
