/* tslint:disable */
/* eslint-disable */
/**
 * Confluent Schema Registry APIs
 * REST API for the Schema Registry
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 *
 * @export
 * @interface Dek
 */
export interface Dek {
  /**
   * Kek name of the dek
   * @type {string}
   * @memberof Dek
   */
  kekName?: string;
  /**
   * Subject of the dek
   * @type {string}
   * @memberof Dek
   */
  subject?: string;
  /**
   * Version of the dek
   * @type {number}
   * @memberof Dek
   */
  version?: number;
  /**
   * Algorithm of the dek
   * @type {string}
   * @memberof Dek
   */
  algorithm?: DekAlgorithmEnum;
  /**
   * Encrypted key material of the dek
   * @type {string}
   * @memberof Dek
   */
  encryptedKeyMaterial?: string;
  /**
   * Raw key material of the dek
   * @type {string}
   * @memberof Dek
   */
  keyMaterial?: string;
  /**
   * Timestamp of the dek
   * @type {number}
   * @memberof Dek
   */
  ts?: number;
  /**
   * Whether the dek is deleted
   * @type {boolean}
   * @memberof Dek
   */
  deleted?: boolean;
}

/**
 * @export
 */
export const DekAlgorithmEnum = {
  Aes128Gcm: "AES128_GCM",
  Aes256Gcm: "AES256_GCM",
  Aes256Siv: "AES256_SIV",
} as const;
export type DekAlgorithmEnum = (typeof DekAlgorithmEnum)[keyof typeof DekAlgorithmEnum];

/**
 * Check if a given object implements the Dek interface.
 */
export function instanceOfDek(value: object): value is Dek {
  return true;
}

export function DekFromJSON(json: any): Dek {
  return DekFromJSONTyped(json, false);
}

export function DekFromJSONTyped(json: any, ignoreDiscriminator: boolean): Dek {
  if (json == null) {
    return json;
  }
  return {
    kekName: json["kekName"] == null ? undefined : json["kekName"],
    subject: json["subject"] == null ? undefined : json["subject"],
    version: json["version"] == null ? undefined : json["version"],
    algorithm: json["algorithm"] == null ? undefined : json["algorithm"],
    encryptedKeyMaterial:
      json["encryptedKeyMaterial"] == null ? undefined : json["encryptedKeyMaterial"],
    keyMaterial: json["keyMaterial"] == null ? undefined : json["keyMaterial"],
    ts: json["ts"] == null ? undefined : json["ts"],
    deleted: json["deleted"] == null ? undefined : json["deleted"],
  };
}

export function DekToJSON(json: any): Dek {
  return DekToJSONTyped(json, false);
}

export function DekToJSONTyped(value?: Dek | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    kekName: value["kekName"],
    subject: value["subject"],
    version: value["version"],
    algorithm: value["algorithm"],
    encryptedKeyMaterial: value["encryptedKeyMaterial"],
    keyMaterial: value["keyMaterial"],
    ts: value["ts"],
    deleted: value["deleted"],
  };
}
