/* tslint:disable */
/* eslint-disable */
/**
 * Confluent Schema Registry APIs
 * REST API for the Schema Registry
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 * Rule
 * @export
 * @interface Rule
 */
export interface Rule {
  /**
   * Rule name
   * @type {string}
   * @memberof Rule
   */
  name?: string;
  /**
   * Rule doc
   * @type {string}
   * @memberof Rule
   */
  doc?: string;
  /**
   * Rule kind
   * @type {string}
   * @memberof Rule
   */
  kind?: RuleKindEnum;
  /**
   * Rule mode
   * @type {string}
   * @memberof Rule
   */
  mode?: RuleModeEnum;
  /**
   * Rule type
   * @type {string}
   * @memberof Rule
   */
  type?: string;
  /**
   * The tags to which this rule applies
   * @type {Set<string>}
   * @memberof Rule
   */
  tags?: Set<string>;
  /**
   * Optional params for the rule
   * @type {{ [key: string]: string; }}
   * @memberof Rule
   */
  params?: { [key: string]: string };
  /**
   * Rule expression
   * @type {string}
   * @memberof Rule
   */
  expr?: string;
  /**
   * Rule action on success
   * @type {string}
   * @memberof Rule
   */
  onSuccess?: string;
  /**
   * Rule action on failure
   * @type {string}
   * @memberof Rule
   */
  onFailure?: string;
  /**
   * Whether the rule is disabled
   * @type {boolean}
   * @memberof Rule
   */
  disabled?: boolean;
}

/**
 * @export
 */
export const RuleKindEnum = {
  Transform: "TRANSFORM",
  Condition: "CONDITION",
} as const;
export type RuleKindEnum = (typeof RuleKindEnum)[keyof typeof RuleKindEnum];

/**
 * @export
 */
export const RuleModeEnum = {
  Upgrade: "UPGRADE",
  Downgrade: "DOWNGRADE",
  Updown: "UPDOWN",
  Write: "WRITE",
  Read: "READ",
  Writeread: "WRITEREAD",
} as const;
export type RuleModeEnum = (typeof RuleModeEnum)[keyof typeof RuleModeEnum];

/**
 * Check if a given object implements the Rule interface.
 */
export function instanceOfRule(value: object): value is Rule {
  return true;
}

export function RuleFromJSON(json: any): Rule {
  return RuleFromJSONTyped(json, false);
}

export function RuleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Rule {
  if (json == null) {
    return json;
  }
  return {
    name: json["name"] == null ? undefined : json["name"],
    doc: json["doc"] == null ? undefined : json["doc"],
    kind: json["kind"] == null ? undefined : json["kind"],
    mode: json["mode"] == null ? undefined : json["mode"],
    type: json["type"] == null ? undefined : json["type"],
    tags: json["tags"] == null ? undefined : json["tags"],
    params: json["params"] == null ? undefined : json["params"],
    expr: json["expr"] == null ? undefined : json["expr"],
    onSuccess: json["onSuccess"] == null ? undefined : json["onSuccess"],
    onFailure: json["onFailure"] == null ? undefined : json["onFailure"],
    disabled: json["disabled"] == null ? undefined : json["disabled"],
  };
}

export function RuleToJSON(value?: Rule | null): any {
  if (value == null) {
    return value;
  }
  return {
    name: value["name"],
    doc: value["doc"],
    kind: value["kind"],
    mode: value["mode"],
    type: value["type"],
    tags: value["tags"] == null ? undefined : Array.from(value["tags"] as Set<any>),
    params: value["params"],
    expr: value["expr"],
    onSuccess: value["onSuccess"],
    onFailure: value["onFailure"],
    disabled: value["disabled"],
  };
}
