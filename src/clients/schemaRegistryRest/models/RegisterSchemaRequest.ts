/* tslint:disable */
/* eslint-disable */
/**
 * Confluent Schema Registry APIs
 * REST API for the Schema Registry
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: data-governance@confluent.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { SchemaReference } from "./SchemaReference";
import {
  SchemaReferenceFromJSON,
  SchemaReferenceFromJSONTyped,
  SchemaReferenceToJSON,
} from "./SchemaReference";
import type { RuleSet } from "./RuleSet";
import { RuleSetFromJSON, RuleSetFromJSONTyped, RuleSetToJSON } from "./RuleSet";
import type { Metadata } from "./Metadata";
import { MetadataFromJSON, MetadataFromJSONTyped, MetadataToJSON } from "./Metadata";

/**
 * Schema register request
 * @export
 * @interface RegisterSchemaRequest
 */
export interface RegisterSchemaRequest {
  /**
   * Version number
   * @type {number}
   * @memberof RegisterSchemaRequest
   */
  version?: number;
  /**
   * Globally unique identifier of the schema
   * @type {number}
   * @memberof RegisterSchemaRequest
   */
  id?: number;
  /**
   * Schema type
   * @type {string}
   * @memberof RegisterSchemaRequest
   */
  schemaType?: string;
  /**
   * References to other schemas
   * @type {Array<SchemaReference>}
   * @memberof RegisterSchemaRequest
   */
  references?: Array<SchemaReference>;
  /**
   * Schema definition string
   * @type {string}
   * @memberof RegisterSchemaRequest
   */
  schema?: string;
  /**
   *
   * @type {Metadata}
   * @memberof RegisterSchemaRequest
   */
  metadata?: Metadata | null;
  /**
   *
   * @type {RuleSet}
   * @memberof RegisterSchemaRequest
   */
  ruleSet?: RuleSet | null;
}

/**
 * Check if a given object implements the RegisterSchemaRequest interface.
 */
export function instanceOfRegisterSchemaRequest(value: object): value is RegisterSchemaRequest {
  return true;
}

export function RegisterSchemaRequestFromJSON(json: any): RegisterSchemaRequest {
  return RegisterSchemaRequestFromJSONTyped(json, false);
}

export function RegisterSchemaRequestFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): RegisterSchemaRequest {
  if (json == null) {
    return json;
  }
  return {
    version: json["version"] == null ? undefined : json["version"],
    id: json["id"] == null ? undefined : json["id"],
    schemaType: json["schemaType"] == null ? undefined : json["schemaType"],
    references:
      json["references"] == null
        ? undefined
        : (json["references"] as Array<any>).map(SchemaReferenceFromJSON),
    schema: json["schema"] == null ? undefined : json["schema"],
    metadata: json["metadata"] == null ? undefined : MetadataFromJSON(json["metadata"]),
    ruleSet: json["ruleSet"] == null ? undefined : RuleSetFromJSON(json["ruleSet"]),
  };
}

export function RegisterSchemaRequestToJSON(value?: RegisterSchemaRequest | null): any {
  if (value == null) {
    return value;
  }
  return {
    version: value["version"],
    id: value["id"],
    schemaType: value["schemaType"],
    references:
      value["references"] == null
        ? undefined
        : (value["references"] as Array<any>).map(SchemaReferenceToJSON),
    schema: value["schema"],
    metadata: MetadataToJSON(value["metadata"]),
    ruleSet: RuleSetToJSON(value["ruleSet"]),
  };
}
