/* tslint:disable */
/* eslint-disable */
/**
 * REST Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { ConfigSynonymData } from "./ConfigSynonymData";
import {
  ConfigSynonymDataFromJSON,
  ConfigSynonymDataFromJSONTyped,
  ConfigSynonymDataToJSON,
  ConfigSynonymDataToJSONTyped,
} from "./ConfigSynonymData";
import type { ResourceMetadata } from "./ResourceMetadata";
import {
  ResourceMetadataFromJSON,
  ResourceMetadataFromJSONTyped,
  ResourceMetadataToJSON,
  ResourceMetadataToJSONTyped,
} from "./ResourceMetadata";

/**
 *
 * @export
 * @interface TopicConfigData
 */
export interface TopicConfigData {
  /**
   *
   * @type {string}
   * @memberof TopicConfigData
   */
  kind: string;
  /**
   *
   * @type {ResourceMetadata}
   * @memberof TopicConfigData
   */
  metadata: ResourceMetadata;
  /**
   *
   * @type {string}
   * @memberof TopicConfigData
   */
  cluster_id: string;
  /**
   *
   * @type {string}
   * @memberof TopicConfigData
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof TopicConfigData
   */
  value?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof TopicConfigData
   */
  is_default: boolean;
  /**
   *
   * @type {boolean}
   * @memberof TopicConfigData
   */
  is_read_only: boolean;
  /**
   *
   * @type {boolean}
   * @memberof TopicConfigData
   */
  is_sensitive: boolean;
  /**
   *
   * @type {string}
   * @memberof TopicConfigData
   */
  source: string;
  /**
   *
   * @type {Array<ConfigSynonymData>}
   * @memberof TopicConfigData
   */
  synonyms: Array<ConfigSynonymData>;
  /**
   *
   * @type {string}
   * @memberof TopicConfigData
   */
  topic_name: string;
}

/**
 * Check if a given object implements the TopicConfigData interface.
 */
export function instanceOfTopicConfigData(value: object): value is TopicConfigData {
  if (!("kind" in value) || value["kind"] === undefined) return false;
  if (!("metadata" in value) || value["metadata"] === undefined) return false;
  if (!("cluster_id" in value) || value["cluster_id"] === undefined) return false;
  if (!("name" in value) || value["name"] === undefined) return false;
  if (!("is_default" in value) || value["is_default"] === undefined) return false;
  if (!("is_read_only" in value) || value["is_read_only"] === undefined) return false;
  if (!("is_sensitive" in value) || value["is_sensitive"] === undefined) return false;
  if (!("source" in value) || value["source"] === undefined) return false;
  if (!("synonyms" in value) || value["synonyms"] === undefined) return false;
  if (!("topic_name" in value) || value["topic_name"] === undefined) return false;
  return true;
}

export function TopicConfigDataFromJSON(json: any): TopicConfigData {
  return TopicConfigDataFromJSONTyped(json, false);
}

export function TopicConfigDataFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): TopicConfigData {
  if (json == null) {
    return json;
  }
  return {
    kind: json["kind"],
    metadata: ResourceMetadataFromJSON(json["metadata"]),
    cluster_id: json["cluster_id"],
    name: json["name"],
    value: json["value"] == null ? undefined : json["value"],
    is_default: json["is_default"],
    is_read_only: json["is_read_only"],
    is_sensitive: json["is_sensitive"],
    source: json["source"],
    synonyms: (json["synonyms"] as Array<any>).map(ConfigSynonymDataFromJSON),
    topic_name: json["topic_name"],
  };
}

export function TopicConfigDataToJSON(json: any): TopicConfigData {
  return TopicConfigDataToJSONTyped(json, false);
}

export function TopicConfigDataToJSONTyped(
  value?: TopicConfigData | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    kind: value["kind"],
    metadata: ResourceMetadataToJSON(value["metadata"]),
    cluster_id: value["cluster_id"],
    name: value["name"],
    value: value["value"],
    is_default: value["is_default"],
    is_read_only: value["is_read_only"],
    is_sensitive: value["is_sensitive"],
    source: value["source"],
    synonyms: (value["synonyms"] as Array<any>).map(ConfigSynonymDataToJSON),
    topic_name: value["topic_name"],
  };
}
