/* tslint:disable */
/* eslint-disable */
/**
 * REST Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { MirrorLag } from "./MirrorLag";
import { MirrorLagFromJSON, MirrorLagFromJSONTyped, MirrorLagToJSON } from "./MirrorLag";
import type { MirrorTopicStatus } from "./MirrorTopicStatus";
import {
  MirrorTopicStatusFromJSON,
  MirrorTopicStatusFromJSONTyped,
  MirrorTopicStatusToJSON,
} from "./MirrorTopicStatus";
import type { LinkTaskError } from "./LinkTaskError";
import {
  LinkTaskErrorFromJSON,
  LinkTaskErrorFromJSONTyped,
  LinkTaskErrorToJSON,
} from "./LinkTaskError";
import type { ResourceMetadata } from "./ResourceMetadata";
import {
  ResourceMetadataFromJSON,
  ResourceMetadataFromJSONTyped,
  ResourceMetadataToJSON,
} from "./ResourceMetadata";

/**
 *
 * @export
 * @interface ListMirrorTopicsResponseData
 */
export interface ListMirrorTopicsResponseData {
  /**
   *
   * @type {string}
   * @memberof ListMirrorTopicsResponseData
   */
  kind: string;
  /**
   *
   * @type {ResourceMetadata}
   * @memberof ListMirrorTopicsResponseData
   */
  metadata: ResourceMetadata;
  /**
   *
   * @type {string}
   * @memberof ListMirrorTopicsResponseData
   */
  link_name: string;
  /**
   *
   * @type {string}
   * @memberof ListMirrorTopicsResponseData
   */
  mirror_topic_name: string;
  /**
   *
   * @type {string}
   * @memberof ListMirrorTopicsResponseData
   */
  source_topic_name: string;
  /**
   *
   * @type {number}
   * @memberof ListMirrorTopicsResponseData
   */
  num_partitions: number;
  /**
   *
   * @type {Array<MirrorLag>}
   * @memberof ListMirrorTopicsResponseData
   */
  mirror_lags: Array<MirrorLag>;
  /**
   *
   * @type {MirrorTopicStatus}
   * @memberof ListMirrorTopicsResponseData
   */
  mirror_status: MirrorTopicStatus;
  /**
   *
   * @type {number}
   * @memberof ListMirrorTopicsResponseData
   */
  state_time_ms: number;
  /**
   *
   * @type {Array<LinkTaskError>}
   * @memberof ListMirrorTopicsResponseData
   */
  mirror_state_transition_errors?: Array<LinkTaskError>;
}

/**
 * Check if a given object implements the ListMirrorTopicsResponseData interface.
 */
export function instanceOfListMirrorTopicsResponseData(
  value: object,
): value is ListMirrorTopicsResponseData {
  if (!("kind" in value) || value["kind"] === undefined) return false;
  if (!("metadata" in value) || value["metadata"] === undefined) return false;
  if (!("link_name" in value) || value["link_name"] === undefined) return false;
  if (!("mirror_topic_name" in value) || value["mirror_topic_name"] === undefined) return false;
  if (!("source_topic_name" in value) || value["source_topic_name"] === undefined) return false;
  if (!("num_partitions" in value) || value["num_partitions"] === undefined) return false;
  if (!("mirror_lags" in value) || value["mirror_lags"] === undefined) return false;
  if (!("mirror_status" in value) || value["mirror_status"] === undefined) return false;
  if (!("state_time_ms" in value) || value["state_time_ms"] === undefined) return false;
  return true;
}

export function ListMirrorTopicsResponseDataFromJSON(json: any): ListMirrorTopicsResponseData {
  return ListMirrorTopicsResponseDataFromJSONTyped(json, false);
}

export function ListMirrorTopicsResponseDataFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ListMirrorTopicsResponseData {
  if (json == null) {
    return json;
  }
  return {
    kind: json["kind"],
    metadata: ResourceMetadataFromJSON(json["metadata"]),
    link_name: json["link_name"],
    mirror_topic_name: json["mirror_topic_name"],
    source_topic_name: json["source_topic_name"],
    num_partitions: json["num_partitions"],
    mirror_lags: (json["mirror_lags"] as Array<any>).map(MirrorLagFromJSON),
    mirror_status: MirrorTopicStatusFromJSON(json["mirror_status"]),
    state_time_ms: json["state_time_ms"],
    mirror_state_transition_errors:
      json["mirror_state_transition_errors"] == null
        ? undefined
        : (json["mirror_state_transition_errors"] as Array<any>).map(LinkTaskErrorFromJSON),
  };
}

export function ListMirrorTopicsResponseDataToJSON(
  value?: ListMirrorTopicsResponseData | null,
): any {
  if (value == null) {
    return value;
  }
  return {
    kind: value["kind"],
    metadata: ResourceMetadataToJSON(value["metadata"]),
    link_name: value["link_name"],
    mirror_topic_name: value["mirror_topic_name"],
    source_topic_name: value["source_topic_name"],
    num_partitions: value["num_partitions"],
    mirror_lags: (value["mirror_lags"] as Array<any>).map(MirrorLagToJSON),
    mirror_status: MirrorTopicStatusToJSON(value["mirror_status"]),
    state_time_ms: value["state_time_ms"],
    mirror_state_transition_errors:
      value["mirror_state_transition_errors"] == null
        ? undefined
        : (value["mirror_state_transition_errors"] as Array<any>).map(LinkTaskErrorToJSON),
  };
}
