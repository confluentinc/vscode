/* tslint:disable */
/* eslint-disable */
/**
 * REST Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { Relationship } from "./Relationship";
import {
  RelationshipFromJSON,
  RelationshipFromJSONTyped,
  RelationshipToJSON,
  RelationshipToJSONTyped,
} from "./Relationship";
import type { ResourceMetadata } from "./ResourceMetadata";
import {
  ResourceMetadataFromJSON,
  ResourceMetadataFromJSONTyped,
  ResourceMetadataToJSON,
  ResourceMetadataToJSONTyped,
} from "./ResourceMetadata";

/**
 *
 * @export
 * @interface ClusterData
 */
export interface ClusterData {
  /**
   *
   * @type {string}
   * @memberof ClusterData
   */
  kind: string;
  /**
   *
   * @type {ResourceMetadata}
   * @memberof ClusterData
   */
  metadata: ResourceMetadata;
  /**
   *
   * @type {string}
   * @memberof ClusterData
   */
  cluster_id: string;
  /**
   *
   * @type {Relationship}
   * @memberof ClusterData
   */
  controller?: Relationship;
  /**
   *
   * @type {Relationship}
   * @memberof ClusterData
   */
  acls: Relationship;
  /**
   *
   * @type {Relationship}
   * @memberof ClusterData
   */
  brokers: Relationship;
  /**
   *
   * @type {Relationship}
   * @memberof ClusterData
   */
  broker_configs: Relationship;
  /**
   *
   * @type {Relationship}
   * @memberof ClusterData
   */
  consumer_groups: Relationship;
  /**
   *
   * @type {Relationship}
   * @memberof ClusterData
   */
  topics: Relationship;
  /**
   *
   * @type {Relationship}
   * @memberof ClusterData
   */
  partition_reassignments: Relationship;
}

/**
 * Check if a given object implements the ClusterData interface.
 */
export function instanceOfClusterData(value: object): value is ClusterData {
  if (!("kind" in value) || value["kind"] === undefined) return false;
  if (!("metadata" in value) || value["metadata"] === undefined) return false;
  if (!("cluster_id" in value) || value["cluster_id"] === undefined) return false;
  if (!("acls" in value) || value["acls"] === undefined) return false;
  if (!("brokers" in value) || value["brokers"] === undefined) return false;
  if (!("broker_configs" in value) || value["broker_configs"] === undefined) return false;
  if (!("consumer_groups" in value) || value["consumer_groups"] === undefined) return false;
  if (!("topics" in value) || value["topics"] === undefined) return false;
  if (!("partition_reassignments" in value) || value["partition_reassignments"] === undefined)
    return false;
  return true;
}

export function ClusterDataFromJSON(json: any): ClusterData {
  return ClusterDataFromJSONTyped(json, false);
}

export function ClusterDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClusterData {
  if (json == null) {
    return json;
  }
  return {
    kind: json["kind"],
    metadata: ResourceMetadataFromJSON(json["metadata"]),
    cluster_id: json["cluster_id"],
    controller: json["controller"] == null ? undefined : RelationshipFromJSON(json["controller"]),
    acls: RelationshipFromJSON(json["acls"]),
    brokers: RelationshipFromJSON(json["brokers"]),
    broker_configs: RelationshipFromJSON(json["broker_configs"]),
    consumer_groups: RelationshipFromJSON(json["consumer_groups"]),
    topics: RelationshipFromJSON(json["topics"]),
    partition_reassignments: RelationshipFromJSON(json["partition_reassignments"]),
  };
}

export function ClusterDataToJSON(json: any): ClusterData {
  return ClusterDataToJSONTyped(json, false);
}

export function ClusterDataToJSONTyped(
  value?: ClusterData | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    kind: value["kind"],
    metadata: ResourceMetadataToJSON(value["metadata"]),
    cluster_id: value["cluster_id"],
    controller: RelationshipToJSON(value["controller"]),
    acls: RelationshipToJSON(value["acls"]),
    brokers: RelationshipToJSON(value["brokers"]),
    broker_configs: RelationshipToJSON(value["broker_configs"]),
    consumer_groups: RelationshipToJSON(value["consumer_groups"]),
    topics: RelationshipToJSON(value["topics"]),
    partition_reassignments: RelationshipToJSON(value["partition_reassignments"]),
  };
}
