/* tslint:disable */
/* eslint-disable */
/**
 * REST Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { Relationship } from "./Relationship";
import {
  RelationshipFromJSON,
  RelationshipFromJSONTyped,
  RelationshipToJSON,
} from "./Relationship";
import type { ResourceMetadata } from "./ResourceMetadata";
import {
  ResourceMetadataFromJSON,
  ResourceMetadataFromJSONTyped,
  ResourceMetadataToJSON,
} from "./ResourceMetadata";

/**
 *
 * @export
 * @interface BrokerData
 */
export interface BrokerData {
  /**
   *
   * @type {string}
   * @memberof BrokerData
   */
  kind: string;
  /**
   *
   * @type {ResourceMetadata}
   * @memberof BrokerData
   */
  metadata: ResourceMetadata;
  /**
   *
   * @type {string}
   * @memberof BrokerData
   */
  cluster_id: string;
  /**
   *
   * @type {number}
   * @memberof BrokerData
   */
  broker_id: number;
  /**
   *
   * @type {string}
   * @memberof BrokerData
   */
  host?: string | null;
  /**
   *
   * @type {number}
   * @memberof BrokerData
   */
  port?: number | null;
  /**
   *
   * @type {string}
   * @memberof BrokerData
   */
  rack?: string | null;
  /**
   *
   * @type {Relationship}
   * @memberof BrokerData
   */
  configs: Relationship;
  /**
   *
   * @type {Relationship}
   * @memberof BrokerData
   */
  partition_replicas: Relationship;
}

/**
 * Check if a given object implements the BrokerData interface.
 */
export function instanceOfBrokerData(value: object): value is BrokerData {
  if (!("kind" in value) || value["kind"] === undefined) return false;
  if (!("metadata" in value) || value["metadata"] === undefined) return false;
  if (!("cluster_id" in value) || value["cluster_id"] === undefined) return false;
  if (!("broker_id" in value) || value["broker_id"] === undefined) return false;
  if (!("configs" in value) || value["configs"] === undefined) return false;
  if (!("partition_replicas" in value) || value["partition_replicas"] === undefined) return false;
  return true;
}

export function BrokerDataFromJSON(json: any): BrokerData {
  return BrokerDataFromJSONTyped(json, false);
}

export function BrokerDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): BrokerData {
  if (json == null) {
    return json;
  }
  return {
    kind: json["kind"],
    metadata: ResourceMetadataFromJSON(json["metadata"]),
    cluster_id: json["cluster_id"],
    broker_id: json["broker_id"],
    host: json["host"] == null ? undefined : json["host"],
    port: json["port"] == null ? undefined : json["port"],
    rack: json["rack"] == null ? undefined : json["rack"],
    configs: RelationshipFromJSON(json["configs"]),
    partition_replicas: RelationshipFromJSON(json["partition_replicas"]),
  };
}

export function BrokerDataToJSON(value?: BrokerData | null): any {
  if (value == null) {
    return value;
  }
  return {
    kind: value["kind"],
    metadata: ResourceMetadataToJSON(value["metadata"]),
    cluster_id: value["cluster_id"],
    broker_id: value["broker_id"],
    host: value["host"],
    port: value["port"],
    rack: value["rack"],
    configs: RelationshipToJSON(value["configs"]),
    partition_replicas: RelationshipToJSON(value["partition_replicas"]),
  };
}
