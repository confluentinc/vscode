/* tslint:disable */
/* eslint-disable */
/**
 * REST Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: kafka-clients-proxy-team@confluent.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  AclDataList,
  AclResourceType,
  CreateAclRequestData,
  CreateAclRequestDataList,
  DeleteKafkaAcls200Response,
} from "../models/index";
import {
  AclDataListFromJSON,
  AclDataListToJSON,
  AclResourceTypeFromJSON,
  AclResourceTypeToJSON,
  CreateAclRequestDataFromJSON,
  CreateAclRequestDataToJSON,
  CreateAclRequestDataListFromJSON,
  CreateAclRequestDataListToJSON,
  DeleteKafkaAcls200ResponseFromJSON,
  DeleteKafkaAcls200ResponseToJSON,
} from "../models/index";

export interface BatchCreateKafkaAclsRequest {
  cluster_id: string;
  CreateAclRequestDataList?: CreateAclRequestDataList;
}

export interface CreateKafkaAclsRequest {
  cluster_id: string;
  CreateAclRequestData?: CreateAclRequestData;
}

export interface DeleteKafkaAclsRequest {
  cluster_id: string;
  resource_type: AclResourceType;
  pattern_type: string;
  operation: string;
  permission: string;
  resource_name?: string;
  principal?: string;
  host?: string;
}

export interface GetKafkaAclsRequest {
  cluster_id: string;
  resource_type?: AclResourceType;
  resource_name?: string;
  pattern_type?: string;
  principal?: string;
  host?: string;
  operation?: string;
  permission?: string;
}

/**
 *
 */
export class ACLV3Api extends runtime.BaseAPI {
  /**
   * [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)  Create ACLs.
   * Batch Create ACLs
   */
  async batchCreateKafkaAclsRaw(
    requestParameters: BatchCreateKafkaAclsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["cluster_id"] == null) {
      throw new runtime.RequiredError(
        "cluster_id",
        'Required parameter "cluster_id" was null or undefined when calling batchCreateKafkaAcls().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "external-access-token",
        [],
      );
    }

    if (
      this.configuration &&
      (this.configuration.username !== undefined || this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/kafka/v3/clusters/{cluster_id}/acls:batch`.replace(
          `{${"cluster_id"}}`,
          encodeURIComponent(String(requestParameters["cluster_id"])),
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateAclRequestDataListToJSON(requestParameters["CreateAclRequestDataList"]),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)  Create ACLs.
   * Batch Create ACLs
   */
  async batchCreateKafkaAcls(
    requestParameters: BatchCreateKafkaAclsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.batchCreateKafkaAclsRaw(requestParameters, initOverrides);
  }

  /**
   * [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)  Create an ACL.
   * Create an ACL
   */
  async createKafkaAclsRaw(
    requestParameters: CreateKafkaAclsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["cluster_id"] == null) {
      throw new runtime.RequiredError(
        "cluster_id",
        'Required parameter "cluster_id" was null or undefined when calling createKafkaAcls().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "external-access-token",
        [],
      );
    }

    if (
      this.configuration &&
      (this.configuration.username !== undefined || this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/kafka/v3/clusters/{cluster_id}/acls`.replace(
          `{${"cluster_id"}}`,
          encodeURIComponent(String(requestParameters["cluster_id"])),
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateAclRequestDataToJSON(requestParameters["CreateAclRequestData"]),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)  Create an ACL.
   * Create an ACL
   */
  async createKafkaAcls(
    requestParameters: CreateKafkaAclsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.createKafkaAclsRaw(requestParameters, initOverrides);
  }

  /**
   * [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)  Delete the ACLs that match the search criteria.
   * Delete ACLs
   */
  async deleteKafkaAclsRaw(
    requestParameters: DeleteKafkaAclsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DeleteKafkaAcls200Response>> {
    if (requestParameters["cluster_id"] == null) {
      throw new runtime.RequiredError(
        "cluster_id",
        'Required parameter "cluster_id" was null or undefined when calling deleteKafkaAcls().',
      );
    }

    if (requestParameters["resource_type"] == null) {
      throw new runtime.RequiredError(
        "resource_type",
        'Required parameter "resource_type" was null or undefined when calling deleteKafkaAcls().',
      );
    }

    if (requestParameters["pattern_type"] == null) {
      throw new runtime.RequiredError(
        "pattern_type",
        'Required parameter "pattern_type" was null or undefined when calling deleteKafkaAcls().',
      );
    }

    if (requestParameters["operation"] == null) {
      throw new runtime.RequiredError(
        "operation",
        'Required parameter "operation" was null or undefined when calling deleteKafkaAcls().',
      );
    }

    if (requestParameters["permission"] == null) {
      throw new runtime.RequiredError(
        "permission",
        'Required parameter "permission" was null or undefined when calling deleteKafkaAcls().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["resource_type"] != null) {
      queryParameters["resource_type"] = requestParameters["resource_type"];
    }

    if (requestParameters["resource_name"] != null) {
      queryParameters["resource_name"] = requestParameters["resource_name"];
    }

    if (requestParameters["pattern_type"] != null) {
      queryParameters["pattern_type"] = requestParameters["pattern_type"];
    }

    if (requestParameters["principal"] != null) {
      queryParameters["principal"] = requestParameters["principal"];
    }

    if (requestParameters["host"] != null) {
      queryParameters["host"] = requestParameters["host"];
    }

    if (requestParameters["operation"] != null) {
      queryParameters["operation"] = requestParameters["operation"];
    }

    if (requestParameters["permission"] != null) {
      queryParameters["permission"] = requestParameters["permission"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "external-access-token",
        [],
      );
    }

    if (
      this.configuration &&
      (this.configuration.username !== undefined || this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/kafka/v3/clusters/{cluster_id}/acls`.replace(
          `{${"cluster_id"}}`,
          encodeURIComponent(String(requestParameters["cluster_id"])),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DeleteKafkaAcls200ResponseFromJSON(jsonValue),
    );
  }

  /**
   * [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)  Delete the ACLs that match the search criteria.
   * Delete ACLs
   */
  async deleteKafkaAcls(
    requestParameters: DeleteKafkaAclsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DeleteKafkaAcls200Response> {
    const response = await this.deleteKafkaAclsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)  Return a list of ACLs that match the search criteria.
   * List ACLs
   */
  async getKafkaAclsRaw(
    requestParameters: GetKafkaAclsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AclDataList>> {
    if (requestParameters["cluster_id"] == null) {
      throw new runtime.RequiredError(
        "cluster_id",
        'Required parameter "cluster_id" was null or undefined when calling getKafkaAcls().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["resource_type"] != null) {
      queryParameters["resource_type"] = requestParameters["resource_type"];
    }

    if (requestParameters["resource_name"] != null) {
      queryParameters["resource_name"] = requestParameters["resource_name"];
    }

    if (requestParameters["pattern_type"] != null) {
      queryParameters["pattern_type"] = requestParameters["pattern_type"];
    }

    if (requestParameters["principal"] != null) {
      queryParameters["principal"] = requestParameters["principal"];
    }

    if (requestParameters["host"] != null) {
      queryParameters["host"] = requestParameters["host"];
    }

    if (requestParameters["operation"] != null) {
      queryParameters["operation"] = requestParameters["operation"];
    }

    if (requestParameters["permission"] != null) {
      queryParameters["permission"] = requestParameters["permission"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "external-access-token",
        [],
      );
    }

    if (
      this.configuration &&
      (this.configuration.username !== undefined || this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/kafka/v3/clusters/{cluster_id}/acls`.replace(
          `{${"cluster_id"}}`,
          encodeURIComponent(String(requestParameters["cluster_id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => AclDataListFromJSON(jsonValue));
  }

  /**
   * [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)  Return a list of ACLs that match the search criteria.
   * List ACLs
   */
  async getKafkaAcls(
    requestParameters: GetKafkaAclsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AclDataList> {
    const response = await this.getKafkaAclsRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
