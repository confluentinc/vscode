/* tslint:disable */
/* eslint-disable */
/**
 * REST Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: kafka-clients-proxy-team@confluent.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  ConsumerData,
  ConsumerDataList,
  ConsumerGroupData,
  ConsumerGroupDataList,
  ConsumerGroupLagSummaryData,
  ConsumerLagData,
  ConsumerLagDataList,
} from "../models/index";
import {
  ConsumerDataFromJSON,
  ConsumerDataToJSON,
  ConsumerDataListFromJSON,
  ConsumerDataListToJSON,
  ConsumerGroupDataFromJSON,
  ConsumerGroupDataToJSON,
  ConsumerGroupDataListFromJSON,
  ConsumerGroupDataListToJSON,
  ConsumerGroupLagSummaryDataFromJSON,
  ConsumerGroupLagSummaryDataToJSON,
  ConsumerLagDataFromJSON,
  ConsumerLagDataToJSON,
  ConsumerLagDataListFromJSON,
  ConsumerLagDataListToJSON,
} from "../models/index";

export interface GetKafkaConsumerRequest {
  cluster_id: string;
  consumer_group_id: string;
  consumer_id: string;
}

export interface GetKafkaConsumerGroupRequest {
  cluster_id: string;
  consumer_group_id: string;
}

export interface GetKafkaConsumerGroupLagSummaryRequest {
  cluster_id: string;
  consumer_group_id: string;
}

export interface GetKafkaConsumerLagRequest {
  cluster_id: string;
  consumer_group_id: string;
  topic_name: string;
  partition_id: number;
}

export interface ListKafkaConsumerGroupsRequest {
  cluster_id: string;
}

export interface ListKafkaConsumerLagsRequest {
  cluster_id: string;
  consumer_group_id: string;
}

export interface ListKafkaConsumersRequest {
  cluster_id: string;
  consumer_group_id: string;
}

/**
 *
 */
export class ConsumerGroupV3Api extends runtime.BaseAPI {
  /**
   * [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)  Return the consumer specified by the ``consumer_id``.
   * Get Consumer
   */
  async getKafkaConsumerRaw(
    requestParameters: GetKafkaConsumerRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ConsumerData>> {
    if (requestParameters["cluster_id"] == null) {
      throw new runtime.RequiredError(
        "cluster_id",
        'Required parameter "cluster_id" was null or undefined when calling getKafkaConsumer().',
      );
    }

    if (requestParameters["consumer_group_id"] == null) {
      throw new runtime.RequiredError(
        "consumer_group_id",
        'Required parameter "consumer_group_id" was null or undefined when calling getKafkaConsumer().',
      );
    }

    if (requestParameters["consumer_id"] == null) {
      throw new runtime.RequiredError(
        "consumer_id",
        'Required parameter "consumer_id" was null or undefined when calling getKafkaConsumer().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "external-access-token",
        [],
      );
    }

    if (
      this.configuration &&
      (this.configuration.username !== undefined || this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/consumers/{consumer_id}`
          .replace(`{${"cluster_id"}}`, encodeURIComponent(String(requestParameters["cluster_id"])))
          .replace(
            `{${"consumer_group_id"}}`,
            encodeURIComponent(String(requestParameters["consumer_group_id"])),
          )
          .replace(
            `{${"consumer_id"}}`,
            encodeURIComponent(String(requestParameters["consumer_id"])),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ConsumerDataFromJSON(jsonValue));
  }

  /**
   * [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)  Return the consumer specified by the ``consumer_id``.
   * Get Consumer
   */
  async getKafkaConsumer(
    requestParameters: GetKafkaConsumerRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ConsumerData> {
    const response = await this.getKafkaConsumerRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)  Return the consumer group specified by the ``consumer_group_id``.
   * Get Consumer Group
   */
  async getKafkaConsumerGroupRaw(
    requestParameters: GetKafkaConsumerGroupRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ConsumerGroupData>> {
    if (requestParameters["cluster_id"] == null) {
      throw new runtime.RequiredError(
        "cluster_id",
        'Required parameter "cluster_id" was null or undefined when calling getKafkaConsumerGroup().',
      );
    }

    if (requestParameters["consumer_group_id"] == null) {
      throw new runtime.RequiredError(
        "consumer_group_id",
        'Required parameter "consumer_group_id" was null or undefined when calling getKafkaConsumerGroup().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "external-access-token",
        [],
      );
    }

    if (
      this.configuration &&
      (this.configuration.username !== undefined || this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}`
          .replace(`{${"cluster_id"}}`, encodeURIComponent(String(requestParameters["cluster_id"])))
          .replace(
            `{${"consumer_group_id"}}`,
            encodeURIComponent(String(requestParameters["consumer_group_id"])),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ConsumerGroupDataFromJSON(jsonValue),
    );
  }

  /**
   * [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)  Return the consumer group specified by the ``consumer_group_id``.
   * Get Consumer Group
   */
  async getKafkaConsumerGroup(
    requestParameters: GetKafkaConsumerGroupRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ConsumerGroupData> {
    const response = await this.getKafkaConsumerGroupRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Available in dedicated clusters only](https://img.shields.io/badge/-Available%20in%20dedicated%20clusters%20only-%23bc8540)](https://docs.confluent.io/cloud/current/clusters/cluster-types.html#dedicated-cluster)  Return the maximum and total lag of the consumers belonging to the specified consumer group.
   * Get Consumer Group Lag Summary
   */
  async getKafkaConsumerGroupLagSummaryRaw(
    requestParameters: GetKafkaConsumerGroupLagSummaryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ConsumerGroupLagSummaryData>> {
    if (requestParameters["cluster_id"] == null) {
      throw new runtime.RequiredError(
        "cluster_id",
        'Required parameter "cluster_id" was null or undefined when calling getKafkaConsumerGroupLagSummary().',
      );
    }

    if (requestParameters["consumer_group_id"] == null) {
      throw new runtime.RequiredError(
        "consumer_group_id",
        'Required parameter "consumer_group_id" was null or undefined when calling getKafkaConsumerGroupLagSummary().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "external-access-token",
        [],
      );
    }

    if (
      this.configuration &&
      (this.configuration.username !== undefined || this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/lag-summary`
          .replace(`{${"cluster_id"}}`, encodeURIComponent(String(requestParameters["cluster_id"])))
          .replace(
            `{${"consumer_group_id"}}`,
            encodeURIComponent(String(requestParameters["consumer_group_id"])),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ConsumerGroupLagSummaryDataFromJSON(jsonValue),
    );
  }

  /**
   * [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Available in dedicated clusters only](https://img.shields.io/badge/-Available%20in%20dedicated%20clusters%20only-%23bc8540)](https://docs.confluent.io/cloud/current/clusters/cluster-types.html#dedicated-cluster)  Return the maximum and total lag of the consumers belonging to the specified consumer group.
   * Get Consumer Group Lag Summary
   */
  async getKafkaConsumerGroupLagSummary(
    requestParameters: GetKafkaConsumerGroupLagSummaryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ConsumerGroupLagSummaryData> {
    const response = await this.getKafkaConsumerGroupLagSummaryRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Available in dedicated clusters only](https://img.shields.io/badge/-Available%20in%20dedicated%20clusters%20only-%23bc8540)](https://docs.confluent.io/cloud/current/clusters/cluster-types.html#dedicated-cluster)  Return the consumer lag on a partition with the given `partition_id`.
   * Get Consumer Lag
   */
  async getKafkaConsumerLagRaw(
    requestParameters: GetKafkaConsumerLagRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ConsumerLagData>> {
    if (requestParameters["cluster_id"] == null) {
      throw new runtime.RequiredError(
        "cluster_id",
        'Required parameter "cluster_id" was null or undefined when calling getKafkaConsumerLag().',
      );
    }

    if (requestParameters["consumer_group_id"] == null) {
      throw new runtime.RequiredError(
        "consumer_group_id",
        'Required parameter "consumer_group_id" was null or undefined when calling getKafkaConsumerLag().',
      );
    }

    if (requestParameters["topic_name"] == null) {
      throw new runtime.RequiredError(
        "topic_name",
        'Required parameter "topic_name" was null or undefined when calling getKafkaConsumerLag().',
      );
    }

    if (requestParameters["partition_id"] == null) {
      throw new runtime.RequiredError(
        "partition_id",
        'Required parameter "partition_id" was null or undefined when calling getKafkaConsumerLag().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "external-access-token",
        [],
      );
    }

    if (
      this.configuration &&
      (this.configuration.username !== undefined || this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/lags/{topic_name}/partitions/{partition_id}`
          .replace(`{${"cluster_id"}}`, encodeURIComponent(String(requestParameters["cluster_id"])))
          .replace(
            `{${"consumer_group_id"}}`,
            encodeURIComponent(String(requestParameters["consumer_group_id"])),
          )
          .replace(`{${"topic_name"}}`, encodeURIComponent(String(requestParameters["topic_name"])))
          .replace(
            `{${"partition_id"}}`,
            encodeURIComponent(String(requestParameters["partition_id"])),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ConsumerLagDataFromJSON(jsonValue));
  }

  /**
   * [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Available in dedicated clusters only](https://img.shields.io/badge/-Available%20in%20dedicated%20clusters%20only-%23bc8540)](https://docs.confluent.io/cloud/current/clusters/cluster-types.html#dedicated-cluster)  Return the consumer lag on a partition with the given `partition_id`.
   * Get Consumer Lag
   */
  async getKafkaConsumerLag(
    requestParameters: GetKafkaConsumerLagRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ConsumerLagData> {
    const response = await this.getKafkaConsumerLagRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)  Return the list of consumer groups that belong to the specified Kafka cluster.
   * List Consumer Groups
   */
  async listKafkaConsumerGroupsRaw(
    requestParameters: ListKafkaConsumerGroupsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ConsumerGroupDataList>> {
    if (requestParameters["cluster_id"] == null) {
      throw new runtime.RequiredError(
        "cluster_id",
        'Required parameter "cluster_id" was null or undefined when calling listKafkaConsumerGroups().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "external-access-token",
        [],
      );
    }

    if (
      this.configuration &&
      (this.configuration.username !== undefined || this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/kafka/v3/clusters/{cluster_id}/consumer-groups`.replace(
          `{${"cluster_id"}}`,
          encodeURIComponent(String(requestParameters["cluster_id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ConsumerGroupDataListFromJSON(jsonValue),
    );
  }

  /**
   * [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)  Return the list of consumer groups that belong to the specified Kafka cluster.
   * List Consumer Groups
   */
  async listKafkaConsumerGroups(
    requestParameters: ListKafkaConsumerGroupsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ConsumerGroupDataList> {
    const response = await this.listKafkaConsumerGroupsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Available in dedicated clusters only](https://img.shields.io/badge/-Available%20in%20dedicated%20clusters%20only-%23bc8540)](https://docs.confluent.io/cloud/current/clusters/cluster-types.html#dedicated-cluster)  Return a list of consumer lags of the consumers belonging to the specified consumer group.
   * List Consumer Lags
   */
  async listKafkaConsumerLagsRaw(
    requestParameters: ListKafkaConsumerLagsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ConsumerLagDataList>> {
    if (requestParameters["cluster_id"] == null) {
      throw new runtime.RequiredError(
        "cluster_id",
        'Required parameter "cluster_id" was null or undefined when calling listKafkaConsumerLags().',
      );
    }

    if (requestParameters["consumer_group_id"] == null) {
      throw new runtime.RequiredError(
        "consumer_group_id",
        'Required parameter "consumer_group_id" was null or undefined when calling listKafkaConsumerLags().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "external-access-token",
        [],
      );
    }

    if (
      this.configuration &&
      (this.configuration.username !== undefined || this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/lags`
          .replace(`{${"cluster_id"}}`, encodeURIComponent(String(requestParameters["cluster_id"])))
          .replace(
            `{${"consumer_group_id"}}`,
            encodeURIComponent(String(requestParameters["consumer_group_id"])),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ConsumerLagDataListFromJSON(jsonValue),
    );
  }

  /**
   * [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Available in dedicated clusters only](https://img.shields.io/badge/-Available%20in%20dedicated%20clusters%20only-%23bc8540)](https://docs.confluent.io/cloud/current/clusters/cluster-types.html#dedicated-cluster)  Return a list of consumer lags of the consumers belonging to the specified consumer group.
   * List Consumer Lags
   */
  async listKafkaConsumerLags(
    requestParameters: ListKafkaConsumerLagsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ConsumerLagDataList> {
    const response = await this.listKafkaConsumerLagsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)  Return a list of consumers that belong to the specified consumer group.
   * List Consumers
   */
  async listKafkaConsumersRaw(
    requestParameters: ListKafkaConsumersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ConsumerDataList>> {
    if (requestParameters["cluster_id"] == null) {
      throw new runtime.RequiredError(
        "cluster_id",
        'Required parameter "cluster_id" was null or undefined when calling listKafkaConsumers().',
      );
    }

    if (requestParameters["consumer_group_id"] == null) {
      throw new runtime.RequiredError(
        "consumer_group_id",
        'Required parameter "consumer_group_id" was null or undefined when calling listKafkaConsumers().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "external-access-token",
        [],
      );
    }

    if (
      this.configuration &&
      (this.configuration.username !== undefined || this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/consumers`
          .replace(`{${"cluster_id"}}`, encodeURIComponent(String(requestParameters["cluster_id"])))
          .replace(
            `{${"consumer_group_id"}}`,
            encodeURIComponent(String(requestParameters["consumer_group_id"])),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ConsumerDataListFromJSON(jsonValue),
    );
  }

  /**
   * [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)  Return a list of consumers that belong to the specified consumer group.
   * List Consumers
   */
  async listKafkaConsumers(
    requestParameters: ListKafkaConsumersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ConsumerDataList> {
    const response = await this.listKafkaConsumersRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
