/* tslint:disable */
/* eslint-disable */
/**
 * Flink Artifact Management API
 * This is the Flink Artifact Management API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { ArtifactV1UploadSourcePresignedUrlMetadata } from "./ArtifactV1UploadSourcePresignedUrlMetadata";
import {
  ArtifactV1UploadSourcePresignedUrlMetadataFromJSON,
  ArtifactV1UploadSourcePresignedUrlMetadataFromJSONTyped,
  ArtifactV1UploadSourcePresignedUrlMetadataToJSON,
  ArtifactV1UploadSourcePresignedUrlMetadataToJSONTyped,
} from "./ArtifactV1UploadSourcePresignedUrlMetadata";

/**
 * Request a presigned upload URL for new Flink Artifact. Note that
 * the URL policy expires in one hour. If the policy expires, you can request
 * a new presigned upload URL.
 *
 *
 * ## The Presigned Urls Model
 * <SchemaDefinition schemaRef="#/components/schemas/artifact.v1.PresignedUrl" />
 * @export
 * @interface ArtifactV1UploadSourcePresignedUrl
 */
export interface ArtifactV1UploadSourcePresignedUrl {
  /**
   * APIVersion defines the schema version of this representation of a resource.
   * @type {string}
   * @memberof ArtifactV1UploadSourcePresignedUrl
   */
  readonly api_version?: ArtifactV1UploadSourcePresignedUrlApiVersionEnum;
  /**
   * Kind defines the object this REST resource represents.
   * @type {string}
   * @memberof ArtifactV1UploadSourcePresignedUrl
   */
  readonly kind?: ArtifactV1UploadSourcePresignedUrlKindEnum;
  /**
   * ID is the "natural identifier" for an object within its scope/namespace; it is normally unique across time but not space. That is, you can assume that the ID will not be reclaimed and reused after an object is deleted ("time"); however, it may collide with IDs for other object `kinds` or objects of the same `kind` within a different scope/namespace ("space").
   * @type {string}
   * @memberof ArtifactV1UploadSourcePresignedUrl
   */
  readonly id?: string;
  /**
   *
   * @type {ArtifactV1UploadSourcePresignedUrlMetadata}
   * @memberof ArtifactV1UploadSourcePresignedUrl
   */
  metadata?: ArtifactV1UploadSourcePresignedUrlMetadata;
  /**
   * Location of the Flink Artifact source.
   *
   * @type {string}
   * @memberof ArtifactV1UploadSourcePresignedUrl
   */
  location?: string;
  /**
   * Upload ID returned by the `/presigned-upload-url` API. This field returns an empty string in all responses.
   * @type {string}
   * @memberof ArtifactV1UploadSourcePresignedUrl
   */
  upload_id?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum ArtifactV1UploadSourcePresignedUrlApiVersionEnum {
  ArtifactV1UploadSource = "artifact.v1/UploadSource",
}
/**
 * @export
 * @enum {string}
 */
export enum ArtifactV1UploadSourcePresignedUrlKindEnum {
  PresignedUrl = "PresignedUrl",
}

/**
 * Check if a given object implements the ArtifactV1UploadSourcePresignedUrl interface.
 */
export function instanceOfArtifactV1UploadSourcePresignedUrl(
  value: object,
): value is ArtifactV1UploadSourcePresignedUrl {
  return true;
}

export function ArtifactV1UploadSourcePresignedUrlFromJSON(
  json: any,
): ArtifactV1UploadSourcePresignedUrl {
  return ArtifactV1UploadSourcePresignedUrlFromJSONTyped(json, false);
}

export function ArtifactV1UploadSourcePresignedUrlFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ArtifactV1UploadSourcePresignedUrl {
  if (json == null) {
    return json;
  }
  return {
    api_version: json["api_version"] == null ? undefined : json["api_version"],
    kind: json["kind"] == null ? undefined : json["kind"],
    id: json["id"] == null ? undefined : json["id"],
    metadata:
      json["metadata"] == null
        ? undefined
        : ArtifactV1UploadSourcePresignedUrlMetadataFromJSON(json["metadata"]),
    location: json["location"] == null ? undefined : json["location"],
    upload_id: json["upload_id"] == null ? undefined : json["upload_id"],
  };
}

export function ArtifactV1UploadSourcePresignedUrlToJSON(
  json: any,
): ArtifactV1UploadSourcePresignedUrl {
  return ArtifactV1UploadSourcePresignedUrlToJSONTyped(json, false);
}

export function ArtifactV1UploadSourcePresignedUrlToJSONTyped(
  value?: Omit<ArtifactV1UploadSourcePresignedUrl, "api_version" | "kind" | "id"> | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    metadata: ArtifactV1UploadSourcePresignedUrlMetadataToJSON(value["metadata"]),
    location: value["location"],
    upload_id: value["upload_id"],
  };
}
