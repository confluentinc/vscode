/* tslint:disable */
/* eslint-disable */
/**
 * Flink Artifact Management API
 * This is the Flink Artifact Management API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  ArtifactV1FlinkArtifact,
  ArtifactV1FlinkArtifactList,
  CreateArtifactV1FlinkArtifact201Response,
  CreateArtifactV1FlinkArtifactRequest,
  Failure,
  GetArtifactV1FlinkArtifact200Response,
} from "../models/index";
import {
  ArtifactV1FlinkArtifactFromJSON,
  ArtifactV1FlinkArtifactToJSON,
  ArtifactV1FlinkArtifactListFromJSON,
  ArtifactV1FlinkArtifactListToJSON,
  CreateArtifactV1FlinkArtifact201ResponseFromJSON,
  CreateArtifactV1FlinkArtifact201ResponseToJSON,
  CreateArtifactV1FlinkArtifactRequestFromJSON,
  CreateArtifactV1FlinkArtifactRequestToJSON,
  FailureFromJSON,
  FailureToJSON,
  GetArtifactV1FlinkArtifact200ResponseFromJSON,
  GetArtifactV1FlinkArtifact200ResponseToJSON,
} from "../models/index";

export interface CreateArtifactV1FlinkArtifactOperationRequest {
  cloud: string;
  region: string;
  CreateArtifactV1FlinkArtifactRequest?: CreateArtifactV1FlinkArtifactRequest;
}

export interface DeleteArtifactV1FlinkArtifactRequest {
  cloud: string;
  region: string;
  environment: string;
  id: string;
}

export interface GetArtifactV1FlinkArtifactRequest {
  cloud: string;
  region: string;
  environment: string;
  id: string;
}

export interface ListArtifactV1FlinkArtifactsRequest {
  cloud: string;
  region: string;
  environment: string;
  page_size?: number;
  page_token?: string;
}

export interface UpdateArtifactV1FlinkArtifactRequest {
  cloud: string;
  region: string;
  environment: string;
  id: string;
  ArtifactV1FlinkArtifact?: Omit<ArtifactV1FlinkArtifact, "api_version" | "kind" | "id">;
}

/**
 *
 */
export class FlinkArtifactsArtifactV1Api extends runtime.BaseAPI {
  /**
   * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)  Make a request to create a flink artifact.
   * Create a new Flink Artifact.
   */
  async createArtifactV1FlinkArtifactRaw(
    requestParameters: CreateArtifactV1FlinkArtifactOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateArtifactV1FlinkArtifact201Response>> {
    if (requestParameters["cloud"] == null) {
      throw new runtime.RequiredError(
        "cloud",
        'Required parameter "cloud" was null or undefined when calling createArtifactV1FlinkArtifact().',
      );
    }

    if (requestParameters["region"] == null) {
      throw new runtime.RequiredError(
        "region",
        'Required parameter "region" was null or undefined when calling createArtifactV1FlinkArtifact().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["cloud"] != null) {
      queryParameters["cloud"] = requestParameters["cloud"];
    }

    if (requestParameters["region"] != null) {
      queryParameters["region"] = requestParameters["region"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      this.configuration &&
      (this.configuration.username !== undefined || this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "confluent-sts-access-token",
        [],
      );
    }

    const response = await this.request(
      {
        path: `/artifact/v1/flink-artifacts`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateArtifactV1FlinkArtifactRequestToJSON(
          requestParameters["CreateArtifactV1FlinkArtifactRequest"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateArtifactV1FlinkArtifact201ResponseFromJSON(jsonValue),
    );
  }

  /**
   * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)  Make a request to create a flink artifact.
   * Create a new Flink Artifact.
   */
  async createArtifactV1FlinkArtifact(
    requestParameters: CreateArtifactV1FlinkArtifactOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateArtifactV1FlinkArtifact201Response> {
    const response = await this.createArtifactV1FlinkArtifactRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)  Make a request to delete a flink artifact.
   * Delete a Flink Artifact
   */
  async deleteArtifactV1FlinkArtifactRaw(
    requestParameters: DeleteArtifactV1FlinkArtifactRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["cloud"] == null) {
      throw new runtime.RequiredError(
        "cloud",
        'Required parameter "cloud" was null or undefined when calling deleteArtifactV1FlinkArtifact().',
      );
    }

    if (requestParameters["region"] == null) {
      throw new runtime.RequiredError(
        "region",
        'Required parameter "region" was null or undefined when calling deleteArtifactV1FlinkArtifact().',
      );
    }

    if (requestParameters["environment"] == null) {
      throw new runtime.RequiredError(
        "environment",
        'Required parameter "environment" was null or undefined when calling deleteArtifactV1FlinkArtifact().',
      );
    }

    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling deleteArtifactV1FlinkArtifact().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["cloud"] != null) {
      queryParameters["cloud"] = requestParameters["cloud"];
    }

    if (requestParameters["region"] != null) {
      queryParameters["region"] = requestParameters["region"];
    }

    if (requestParameters["environment"] != null) {
      queryParameters["environment"] = requestParameters["environment"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined || this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "confluent-sts-access-token",
        [],
      );
    }

    const response = await this.request(
      {
        path: `/artifact/v1/flink-artifacts/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)  Make a request to delete a flink artifact.
   * Delete a Flink Artifact
   */
  async deleteArtifactV1FlinkArtifact(
    requestParameters: DeleteArtifactV1FlinkArtifactRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteArtifactV1FlinkArtifactRaw(requestParameters, initOverrides);
  }

  /**
   * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)  Make a request to read a flink artifact.
   * Read a Flink Artifact
   */
  async getArtifactV1FlinkArtifactRaw(
    requestParameters: GetArtifactV1FlinkArtifactRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetArtifactV1FlinkArtifact200Response>> {
    if (requestParameters["cloud"] == null) {
      throw new runtime.RequiredError(
        "cloud",
        'Required parameter "cloud" was null or undefined when calling getArtifactV1FlinkArtifact().',
      );
    }

    if (requestParameters["region"] == null) {
      throw new runtime.RequiredError(
        "region",
        'Required parameter "region" was null or undefined when calling getArtifactV1FlinkArtifact().',
      );
    }

    if (requestParameters["environment"] == null) {
      throw new runtime.RequiredError(
        "environment",
        'Required parameter "environment" was null or undefined when calling getArtifactV1FlinkArtifact().',
      );
    }

    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling getArtifactV1FlinkArtifact().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["cloud"] != null) {
      queryParameters["cloud"] = requestParameters["cloud"];
    }

    if (requestParameters["region"] != null) {
      queryParameters["region"] = requestParameters["region"];
    }

    if (requestParameters["environment"] != null) {
      queryParameters["environment"] = requestParameters["environment"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined || this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "confluent-sts-access-token",
        [],
      );
    }

    const response = await this.request(
      {
        path: `/artifact/v1/flink-artifacts/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetArtifactV1FlinkArtifact200ResponseFromJSON(jsonValue),
    );
  }

  /**
   * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)  Make a request to read a flink artifact.
   * Read a Flink Artifact
   */
  async getArtifactV1FlinkArtifact(
    requestParameters: GetArtifactV1FlinkArtifactRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetArtifactV1FlinkArtifact200Response> {
    const response = await this.getArtifactV1FlinkArtifactRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)  Retrieve a sorted, filtered, paginated list of all flink artifacts.
   * List of Flink Artifacts
   */
  async listArtifactV1FlinkArtifactsRaw(
    requestParameters: ListArtifactV1FlinkArtifactsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ArtifactV1FlinkArtifactList>> {
    if (requestParameters["cloud"] == null) {
      throw new runtime.RequiredError(
        "cloud",
        'Required parameter "cloud" was null or undefined when calling listArtifactV1FlinkArtifacts().',
      );
    }

    if (requestParameters["region"] == null) {
      throw new runtime.RequiredError(
        "region",
        'Required parameter "region" was null or undefined when calling listArtifactV1FlinkArtifacts().',
      );
    }

    if (requestParameters["environment"] == null) {
      throw new runtime.RequiredError(
        "environment",
        'Required parameter "environment" was null or undefined when calling listArtifactV1FlinkArtifacts().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["cloud"] != null) {
      queryParameters["cloud"] = requestParameters["cloud"];
    }

    if (requestParameters["region"] != null) {
      queryParameters["region"] = requestParameters["region"];
    }

    if (requestParameters["environment"] != null) {
      queryParameters["environment"] = requestParameters["environment"];
    }

    if (requestParameters["page_size"] != null) {
      queryParameters["page_size"] = requestParameters["page_size"];
    }

    if (requestParameters["page_token"] != null) {
      queryParameters["page_token"] = requestParameters["page_token"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined || this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "confluent-sts-access-token",
        [],
      );
    }

    const response = await this.request(
      {
        path: `/artifact/v1/flink-artifacts`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ArtifactV1FlinkArtifactListFromJSON(jsonValue),
    );
  }

  /**
   * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)  Retrieve a sorted, filtered, paginated list of all flink artifacts.
   * List of Flink Artifacts
   */
  async listArtifactV1FlinkArtifacts(
    requestParameters: ListArtifactV1FlinkArtifactsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ArtifactV1FlinkArtifactList> {
    const response = await this.listArtifactV1FlinkArtifactsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)  Make a request to update a flink artifact.
   * Update a Flink Artifact
   */
  async updateArtifactV1FlinkArtifactRaw(
    requestParameters: UpdateArtifactV1FlinkArtifactRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetArtifactV1FlinkArtifact200Response>> {
    if (requestParameters["cloud"] == null) {
      throw new runtime.RequiredError(
        "cloud",
        'Required parameter "cloud" was null or undefined when calling updateArtifactV1FlinkArtifact().',
      );
    }

    if (requestParameters["region"] == null) {
      throw new runtime.RequiredError(
        "region",
        'Required parameter "region" was null or undefined when calling updateArtifactV1FlinkArtifact().',
      );
    }

    if (requestParameters["environment"] == null) {
      throw new runtime.RequiredError(
        "environment",
        'Required parameter "environment" was null or undefined when calling updateArtifactV1FlinkArtifact().',
      );
    }

    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling updateArtifactV1FlinkArtifact().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["cloud"] != null) {
      queryParameters["cloud"] = requestParameters["cloud"];
    }

    if (requestParameters["region"] != null) {
      queryParameters["region"] = requestParameters["region"];
    }

    if (requestParameters["environment"] != null) {
      queryParameters["environment"] = requestParameters["environment"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      this.configuration &&
      (this.configuration.username !== undefined || this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "confluent-sts-access-token",
        [],
      );
    }

    const response = await this.request(
      {
        path: `/artifact/v1/flink-artifacts/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: ArtifactV1FlinkArtifactToJSON(requestParameters["ArtifactV1FlinkArtifact"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetArtifactV1FlinkArtifact200ResponseFromJSON(jsonValue),
    );
  }

  /**
   * [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)  Make a request to update a flink artifact.
   * Update a Flink Artifact
   */
  async updateArtifactV1FlinkArtifact(
    requestParameters: UpdateArtifactV1FlinkArtifactRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetArtifactV1FlinkArtifact200Response> {
    const response = await this.updateArtifactV1FlinkArtifactRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
