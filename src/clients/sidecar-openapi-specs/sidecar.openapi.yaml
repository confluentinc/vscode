---
openapi: 3.0.3
info:
  title: Confluent ide-sidecar API
  description: "API for the Confluent ide-sidecar, part of Confluent for VS Code"
  termsOfService: Your terms here
  contact:
    name: Confluent for VS Code Support
    url: https://confluent.io/contact
    email: vscode@confluent.io
  version: 1.0.1
servers:
  - url: http://127.0.0.1:26636
    description: Auto generated value
tags:
  - name: Templates
    description: Code generation templates
paths:
  /api/login/realm:
    get:
      tags:
        - Login Realm Resource
      responses:
        "200":
          description: OK
          content:
            application/json: {}
  /gateway/v1/callback-vscode-docs:
    get:
      tags:
        - O Auth Callback Resource
      parameters:
        - name: code
          in: query
          schema:
            type: string
        - name: state
          in: query
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                type: string
  /gateway/v1/clusters/{cluster_id}/topics/{topic_name}/partitions/-/consume:
    post:
      tags:
        - Kafka Consume Resource
      parameters:
        - name: cluster_id
          in: path
          required: true
          schema:
            type: string
        - name: topic_name
          in: path
          required: true
          schema:
            type: string
        - name: x-connection-id
          in: header
          description: Connection ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SimpleConsumeMultiPartitionRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SimpleConsumeMultiPartitionResponse"
  /gateway/v1/connections:
    get:
      tags:
        - Connections Resource
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionsList"
    post:
      tags:
        - Connections Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionSpec"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"
  /gateway/v1/connections/{id}:
    get:
      tags:
        - Connections Resource
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"
    put:
      tags:
        - Connections Resource
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionSpec"
      responses:
        "200":
          description: Connection updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"
        "404":
          description: Connection not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Failure"
        "401":
          description: Could not authenticate with updated connection configuration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Failure"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Failure"
    delete:
      tags:
        - Connections Resource
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
  /gateway/v1/handshake:
    get:
      tags:
        - Handshake Resource
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SidecarAccessToken"
  /gateway/v1/preferences:
    get:
      tags:
        - Preferences Resource
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Preferences"
    put:
      tags:
        - Preferences Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Preferences"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Preferences"
  /gateway/v1/templates:
    get:
      tags:
        - Templates
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateList"
  /gateway/v1/templates/{name}:
    get:
      tags:
        - Templates
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
  /gateway/v1/templates/{name}/apply:
    post:
      tags:
        - Templates
      summary: Apply a template
      description: Applies the specified template and returns the result as a zip file.
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplyTemplateRequest"
      responses:
        "200":
          description: Template applied successfully
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
  /gateway/v1/version:
    get:
      tags:
        - Version Resource
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SidecarVersionResponse"
  /gateway/v1/health:
    summary:
      MicroProfile Health provides a way for your application to distribute information about its
      healthiness state to state whether or not it is able to function properly
    description: MicroProfile Health Endpoint
    get:
      tags:
        - MicroProfile Health
      summary: "An aggregated view of the Liveness, Readiness and Startup of this\
        \ application"
      description: Check the health of the application
      operationId: microprofile_health_root
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
  /gateway/v1/health/live:
    summary: Liveness checks are utilized to tell whether the application should be restarted
    description: MicroProfile Health - Liveness Endpoint
    get:
      tags:
        - MicroProfile Health
      summary: The Liveness check of this application
      description: Check the liveness of the application
      operationId: microprofile_health_liveness
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
  /gateway/v1/health/ready:
    summary: Readiness checks are used to tell whether the application is able to process requests
    description: MicroProfile Health - Readiness Endpoint
    get:
      tags:
        - MicroProfile Health
      summary: The Readiness check of this application
      description: Check the readiness of the application
      operationId: microprofile_health_readiness
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
  /gateway/v1/health/started:
    summary: Startup checks are an used to tell when the application has started
    description: MicroProfile Health - Startup Endpoint
    get:
      tags:
        - MicroProfile Health
      summary: The Startup check of this application
      description: Check the startup of the application
      operationId: microprofile_health_startup
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
components:
  schemas:
    ApplyTemplateRequest:
      required:
        - options
      type: object
      properties:
        options:
          type: object
          additionalProperties: {}
    AuthError:
      type: object
      properties:
        created_at:
          $ref: "#/components/schemas/Instant"
        message:
          type: string
    AuthErrors:
      type: object
      properties:
        auth_status_check:
          $ref: "#/components/schemas/AuthError"
        sign_in:
          $ref: "#/components/schemas/AuthError"
        token_refresh:
          $ref: "#/components/schemas/AuthError"
    Authentication:
      required:
        - status
      type: object
      properties:
        status:
          $ref: "#/components/schemas/Status"
        requires_authentication_at:
          $ref: "#/components/schemas/Instant"
        user:
          $ref: "#/components/schemas/UserInfo"
        errors:
          $ref: "#/components/schemas/AuthErrors"
    CCloudConfig:
      description: Configuration for Confluent Cloud connections
      required:
        - organization_id
      type: object
      properties:
        organization_id:
          type: string
    CollectionMetadata:
      type: object
      properties:
        self:
          type: string
        next:
          type: string
        total_size:
          format: int32
          type: integer
    Connection:
      required:
        - api_version
        - kind
        - id
        - metadata
        - spec
        - status
      type: object
      properties:
        api_version:
          type: string
        kind:
          type: string
        id:
          type: string
        metadata:
          $ref: "#/components/schemas/ConnectionMetadata"
        spec:
          $ref: "#/components/schemas/ConnectionSpec"
        status:
          $ref: "#/components/schemas/ConnectionStatus"
    ConnectionMetadata:
      type: object
      properties:
        self:
          type: string
        resource_name:
          type: string
        sign_in_uri:
          type: string
    ConnectionSpec:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          $ref: "#/components/schemas/ConnectionType"
        ccloud_config:
          $ref: "#/components/schemas/CCloudConfig"
        local_config:
          $ref: "#/components/schemas/LocalConfig"
    ConnectionStatus:
      required:
        - authentication
      type: object
      properties:
        authentication:
          $ref: "#/components/schemas/Authentication"
    ConnectionType:
      enum:
        - LOCAL
        - PLATFORM
        - CCLOUD
      type: string
    ConnectionsList:
      required:
        - api_version
        - kind
        - metadata
        - data
      type: object
      properties:
        api_version:
          type: string
        kind:
          type: string
        metadata:
          $ref: "#/components/schemas/CollectionMetadata"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Connection"
    Error:
      description: Describes a particular error encountered while performing an operation.
      type: object
      properties:
        code:
          type: string
        status:
          type: string
        title:
          type: string
        id:
          type: string
        detail:
          type: string
        source:
          $ref: "#/components/schemas/JsonNode"
    ExceededFields:
      type: object
      properties:
        key:
          type: boolean
        value:
          type: boolean
    Failure:
      description:
        Provides overall information about problems encountered while performing an operation.
      type: object
      properties:
        status:
          type: string
        code:
          type: string
        title:
          type: string
        id:
          type: string
        errors:
          type: array
          items:
            $ref: "#/components/schemas/Error"
    Instant:
      format: date-time
      type: string
      example: 2022-03-10T16:15:50Z
    JsonNode:
      type: object
      properties:
        empty:
          type: boolean
        valueNode:
          type: boolean
        containerNode:
          type: boolean
        missingNode:
          type: boolean
        array:
          type: boolean
        object:
          type: boolean
        nodeType:
          $ref: "#/components/schemas/JsonNodeType"
        pojo:
          type: boolean
        number:
          type: boolean
        integralNumber:
          type: boolean
        floatingPointNumber:
          type: boolean
        short:
          type: boolean
        int:
          type: boolean
        long:
          type: boolean
        float:
          type: boolean
        double:
          type: boolean
        bigDecimal:
          type: boolean
        bigInteger:
          type: boolean
        textual:
          type: boolean
        boolean:
          type: boolean
        "null":
          type: boolean
        binary:
          type: boolean
    JsonNodeType:
      enum:
        - ARRAY
        - BINARY
        - BOOLEAN
        - MISSING
        - "NULL"
        - NUMBER
        - OBJECT
        - POJO
        - STRING
      type: string
    LocalConfig:
      description: Configuration for local cluster
      type: object
      properties:
        schema-registry-uri:
          type: string
    ObjectMetadata:
      type: object
      properties:
        self:
          type: string
        resource_name:
          type: string
    OptionProperties:
      required:
        - display_name
        - description
      type: object
      properties:
        display_name:
          type: string
        description:
          type: string
        hint:
          type: string
        format:
          type: string
        pattern:
          type: string
        enum:
          type: array
          items:
            type: string
        default_value: {}
    PartitionConsumeData:
      type: object
      properties:
        partition_id:
          format: int32
          type: integer
        next_offset:
          format: int64
          type: integer
        records:
          type: array
          items:
            $ref: "#/components/schemas/PartitionConsumeRecord"
    PartitionConsumeRecord:
      type: object
      properties:
        partition_id:
          format: int32
          type: integer
        offset:
          format: int64
          type: integer
        timestamp:
          format: int64
          type: integer
        timestamp_type:
          $ref: "#/components/schemas/TimestampType"
        headers:
          type: array
          items:
            $ref: "#/components/schemas/PartitionConsumeRecordHeader"
        key:
          $ref: "#/components/schemas/JsonNode"
        value:
          $ref: "#/components/schemas/JsonNode"
        key_decoding_error:
          type: string
        value_decoding_error:
          type: string
        exceeded_fields:
          $ref: "#/components/schemas/ExceededFields"
    PartitionConsumeRecordHeader:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    PartitionOffset:
      type: object
      properties:
        partition_id:
          format: int32
          type: integer
        offset:
          format: int64
          type: integer
    Preferences:
      required:
        - api_version
        - kind
        - spec
      type: object
      properties:
        api_version:
          type: string
        kind:
          type: string
        metadata:
          $ref: "#/components/schemas/PreferencesMetadata"
        spec:
          $ref: "#/components/schemas/PreferencesSpec"
    PreferencesMetadata:
      required:
        - self
      type: object
      properties:
        self:
          type: string
    PreferencesSpec:
      type: object
      properties:
        tls_pem_paths:
          type: array
          items:
            type: string
        trust_all_certificates:
          type: boolean
    SidecarAccessToken:
      type: object
      properties:
        auth_secret:
          type: string
    SidecarVersionResponse:
      type: object
      properties:
        version:
          type: string
    SimpleConsumeMultiPartitionRequest:
      type: object
      properties:
        offsets:
          type: array
          items:
            $ref: "#/components/schemas/PartitionOffset"
        max_poll_records:
          format: int32
          type: integer
        timestamp:
          format: int64
          type: integer
        fetch_max_bytes:
          format: int32
          type: integer
        message_max_bytes:
          format: int32
          type: integer
        from_beginning:
          type: boolean
    SimpleConsumeMultiPartitionResponse:
      type: object
      properties:
        cluster_id:
          type: string
        topic_name:
          type: string
        partition_data_list:
          type: array
          items:
            $ref: "#/components/schemas/PartitionConsumeData"
    Status:
      enum:
        - NO_TOKEN
        - VALID_TOKEN
        - INVALID_TOKEN
      type: string
    Template:
      required:
        - api_version
        - kind
        - id
        - metadata
        - spec
      type: object
      properties:
        api_version:
          type: string
        kind:
          type: string
        id:
          type: string
        metadata:
          $ref: "#/components/schemas/ObjectMetadata"
        spec:
          $ref: "#/components/schemas/TemplateManifest"
    TemplateList:
      required:
        - api_version
        - kind
        - metadata
        - data
      type: object
      properties:
        api_version:
          type: string
        kind:
          type: string
        metadata:
          $ref: "#/components/schemas/CollectionMetadata"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Template"
    TemplateManifest:
      required:
        - template_api_version
        - name
        - display_name
        - description
        - language
        - version
        - tags
      type: object
      properties:
        template_api_version:
          type: string
        name:
          type: string
        display_name:
          type: string
        description:
          type: string
        language:
          type: string
        version:
          type: string
        tags:
          type: array
          items:
            type: string
        options:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/OptionProperties"
    TimestampType:
      enum:
        - NO_TIMESTAMP_TYPE
        - CREATE_TIME
        - LOG_APPEND_TIME
      type: string
    UserInfo:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        social_connection:
          type: string
        auth_type:
          type: string
    HealthResponse:
      type: object
      properties:
        checks:
          type: array
          items:
            $ref: "#/components/schemas/HealthCheck"
        status:
          enum:
            - UP
            - DOWN
          type: string
    HealthCheck:
      type: object
      properties:
        status:
          enum:
            - UP
            - DOWN
          type: string
        name:
          type: string
        data:
          type: object
          nullable: true
