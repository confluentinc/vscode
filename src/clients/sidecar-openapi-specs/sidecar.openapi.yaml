---
openapi: 3.1.0
components:
  schemas:
    ApiKeyAndSecret:
      description: API key and secret authentication credentials
      type: object
      required:
      - api_key
      - api_secret
      properties:
        api_key:
          type: string
          maxLength: 96
          minLength: 1
          description: The API key to use when connecting to the external service.
        api_secret:
          maxLength: 1024
          minLength: 1
          description: The API secret to use when connecting to the external service.
          type: string
          $ref: "#/components/schemas/ApiSecret"
    ApiSecret:
      type: string
      maxLength: 1024
      minLength: 1
      description: A user-provided API secret that is always masked in responses
    AuthError:
      type: object
      properties:
        message:
          type: string
        is_transient:
          type: boolean
    AuthErrors:
      type: object
      properties:
        auth_status_check:
          $ref: "#/components/schemas/AuthError"
        sign_in:
          $ref: "#/components/schemas/AuthError"
        token_refresh:
          $ref: "#/components/schemas/AuthError"
    Authentication:
      description: The authentication-related status (deprecated).
      type: object
      required:
      - status
      properties:
        status:
          $ref: "#/components/schemas/Status"
        requires_authentication_at:
          $ref: "#/components/schemas/Instant"
        user:
          $ref: "#/components/schemas/UserInfo"
        errors:
          $ref: "#/components/schemas/AuthErrors"
    BasicCredentials:
      description: Basic authentication credentials
      type: object
      required:
      - username
      - password
      properties:
        username:
          type: string
          maxLength: 96
          minLength: 1
          description: The username to use when connecting to the external service.
        password:
          maxLength: 1024
          minLength: 1
          description: The password to use when connecting to the external service.
          type: string
          $ref: "#/components/schemas/Password"
    CCloudConfig:
      type: object
      description: Configuration for Confluent Cloud connections
      properties:
        organization_id:
          type: string
          description: The identifier of the CCloud organization to use. The user's
            default organization is used when absent.
          minLength: 36
          maxLength: 36
        ide_auth_callback_uri:
          type: string
          description: The URI that users will be redirected to after successfully
            completing the authentication flow with Confluent Cloud.
          minLength: 10
          maxLength: 200
    CCloudStatus:
      description: The status related to CCloud.
      type: object
      required:
      - state
      properties:
        state:
          description: The state of the connection to CCloud.
          type: string
          $ref: "#/components/schemas/ConnectedState"
        requires_authentication_at:
          description: "If the connection's auth context holds a valid token, this\
            \ attribute holds the time at which the user must re-authenticate because,\
            \ for instance, the refresh token reached the end of its absolute lifetime."
          type: string
          $ref: "#/components/schemas/Instant"
        user:
          description: "Information about the authenticated principal, if known."
          type: object
          $ref: "#/components/schemas/UserInfo"
        errors:
          description: Errors related to the connection to the Kafka cluster.
          type: object
          $ref: "#/components/schemas/AuthErrors"
    CollectionMetadata:
      type: object
      properties:
        self:
          type: string
        next:
          type: string
        total_size:
          type: integer
          format: int32
    ConnectedState:
      type: string
      enum:
      - NONE
      - ATTEMPTING
      - SUCCESS
      - EXPIRED
      - FAILED
    Connection:
      type: object
      required:
      - api_version
      - kind
      - id
      - metadata
      - spec
      - status
      properties:
        api_version:
          type: string
        kind:
          type: string
        id:
          type: string
        metadata:
          $ref: "#/components/schemas/ConnectionMetadata"
        spec:
          $ref: "#/components/schemas/ConnectionSpec"
        status:
          $ref: "#/components/schemas/ConnectionStatus"
    ConnectionMetadata:
      type: object
      properties:
        self:
          type: string
        resource_name:
          type: string
        sign_in_uri:
          type: string
    ConnectionSpec:
      description: The connection details that can be set or changed.
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the connection resource.
          minLength: 1
          maxLength: 64
        name:
          type: string
          description: The user-supplied name of the connection resource.
          maxLength: 64
        type:
          description: The type of connection resource.
          type: string
          $ref: "#/components/schemas/ConnectionType"
        ccloud_config:
          description: The details for connecting to CCloud.
          type: object
          $ref: "#/components/schemas/CCloudConfig"
        local_config:
          description: The details for connecting to Confluent Local.
          type: object
          $ref: "#/components/schemas/LocalConfig"
        kafka_cluster:
          description: "The details for connecting to a CCloud, Confluent Platform,\
            \ or Apache Kafka cluster."
          type: object
          $ref: "#/components/schemas/KafkaClusterConfig"
        schema_registry:
          description: The details for connecting to a Schema Registry.
          type: object
          $ref: "#/components/schemas/SchemaRegistryConfig"
    ConnectionStatus:
      type: object
      properties:
        ccloud:
          $ref: "#/components/schemas/CCloudStatus"
        kafka_cluster:
          $ref: "#/components/schemas/KafkaClusterStatus"
        schema_registry:
          $ref: "#/components/schemas/SchemaRegistryStatus"
        authentication:
          $ref: "#/components/schemas/Authentication"
      required:
      - authentication
    ConnectionType:
      type: string
      enum:
      - LOCAL
      - PLATFORM
      - CCLOUD
      - DIRECT
    ConnectionsList:
      type: object
      required:
      - api_version
      - kind
      - metadata
      - data
      properties:
        api_version:
          type: string
        kind:
          type: string
        metadata:
          $ref: "#/components/schemas/CollectionMetadata"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Connection"
    DataFormat:
      description: |
        The data format that represents the bytes of a Kafka message.

        * AVRO: Apache Avro schema format.
        * JSONSCHEMA: JSON schema format.
        * PROTOBUF: Google Protocol Buffers schema format.
        * JSON:
            Bytes parsed as JSON.
            The bytes did not contain a magic byte specifying a schema id, and the raw bytes
            were successfully parsed into a JSON value.
        * UTF8_STRING:
            Bytes parsed as a UTF-8 string (meaning the bytes were not parsed as valid JSON).
        * RAW_BYTES:
            Raw bytes. These are the scenarios where it would be used:
            - Arbitrary bytes that are NOT written/read using an implementation of Kafka serializer/deserializer.
            And further, we tried to but could not interpret these bytes as a JSON value.
            - The Kafka serializer/deserializer known to sidecar failed to parse the schematized bytes
            (meaning the schema id was present in the magic bytes, but our classes could not interpret the rest of the bytes.)
      type: string
      enum:
      - AVRO
      - JSONSCHEMA
      - PROTOBUF
      - JSON
      - UTF8_STRING
      - RAW_BYTES
    Date:
      type: string
      format: date
      examples:
      - 2022-03-10
    ExceededFields:
      type: object
      properties:
        key:
          type: boolean
        value:
          type: boolean
    Failure:
      description: Provides overall information about problems encountered while performing
        an operation.
      type: object
      properties:
        status:
          type: string
        code:
          type: string
        title:
          type: string
        id:
          type: string
        errors:
          type: array
          items:
            $ref: "#/components/schemas/SidecarError"
    HashAlgorithm:
      type: string
      enum:
      - SCRAM_SHA_256
      - SCRAM_SHA_512
    Instant:
      type: string
      format: date-time
      examples:
      - 2022-03-10T16:15:50Z
    JsonMergePatch:
      type: object
    JsonNode:
      type: object
      properties:
        empty:
          type: boolean
        valueNode:
          type: boolean
        containerNode:
          type: boolean
        missingNode:
          type: boolean
        array:
          type: boolean
        object:
          type: boolean
        nodeType:
          $ref: "#/components/schemas/JsonNodeType"
        pojo:
          type: boolean
        number:
          type: boolean
        integralNumber:
          type: boolean
        floatingPointNumber:
          type: boolean
        short:
          type: boolean
        int:
          type: boolean
        long:
          type: boolean
        float:
          type: boolean
        double:
          type: boolean
        bigDecimal:
          type: boolean
        bigInteger:
          type: boolean
        textual:
          type: boolean
        boolean:
          type: boolean
        "null":
          type: boolean
        binary:
          type: boolean
    JsonNodeType:
      type: string
      enum:
      - ARRAY
      - BINARY
      - BOOLEAN
      - MISSING
      - "NULL"
      - NUMBER
      - OBJECT
      - POJO
      - STRING
    KafkaClusterConfig:
      type: object
      description: Kafka cluster configuration.
      required:
      - bootstrap_servers
      properties:
        bootstrap_servers:
          type: string
          description: A list of host/port pairs to use for establishing the initial
            connection to the Kafka cluster.
          minLength: 1
          maxLength: 256
        credentials:
          oneOf:
          - $ref: "#/components/schemas/BasicCredentials"
          - $ref: "#/components/schemas/ApiKeyAndSecret"
          - $ref: "#/components/schemas/OAuthCredentials"
          - $ref: "#/components/schemas/ScramCredentials"
          - $ref: "#/components/schemas/KerberosCredentials"
          description: "The credentials for the Kafka cluster, or null if no authentication\
            \ is required"
        ssl:
          description: "The SSL configuration for connecting to the Kafka cluster.\
            \ To disable, set `enabled` to false. To use the default SSL settings,\
            \ set `enabled` to true and leave the `truststore` and `keystore` fields\
            \ unset."
          type:
          - object
          - "null"
          anyOf:
          - $ref: "#/components/schemas/TLSConfig"
          - type: "null"
    KafkaClusterStatus:
      description: The status related to the specified Kafka cluster.
      type: object
      required:
      - state
      properties:
        state:
          description: The state of the connection to the Kafka cluster.
          type: string
          $ref: "#/components/schemas/ConnectedState"
        user:
          description: "Information about the authenticated principal, if known."
          type: object
          $ref: "#/components/schemas/UserInfo"
        errors:
          description: Errors related to the connection to the Kafka cluster.
          type: object
          $ref: "#/components/schemas/AuthErrors"
    KerberosCredentials:
      description: Kerberos authentication credentials
      type: object
      required:
      - principal
      - keytab_path
      properties:
        principal:
          type: string
          description: The Kerberos principal to use.
        keytab_path:
          type: string
          description: The Kerberos keytab file path.
        service_name:
          type: string
          description: Service name that matches the primary name of the Kafka brokers
            configured in the Broker JAAS file. Defaults to 'kafka'.
          default: kafka
    KeyOrValueMetadata:
      type: object
      properties:
        schema_id:
          type: integer
          format: int32
        data_format:
          $ref: "#/components/schemas/DataFormat"
    KeyStore:
      type: object
      required:
      - path
      properties:
        path:
          type: string
          description: The path to the local key store file. Only specified if client
            needs to be authenticated by the server (mutual TLS).
          maxLength: 256
        password:
          description: "The password for the local key store file. If a password is\
            \ not set, key store file configured will still be used, but integrity\
            \ checking is disabled. A key store password is not supported for PEM\
            \ format."
          type:
          - string
          - "null"
          anyOf:
          - $ref: "#/components/schemas/Password"
          - type: "null"
        type:
          description: The file format of the local key store file.
          type:
          - string
          - "null"
          default: JKS
          anyOf:
          - $ref: "#/components/schemas/StoreType"
          - type: "null"
        key_password:
          description: The password of the private key in the local key store file.
          type:
          - string
          - "null"
          anyOf:
          - $ref: "#/components/schemas/Password"
          - type: "null"
    LocalConfig:
      type: object
      description: Configuration when using Confluent Local and optionally a local
        Schema Registry.
      properties:
        schema-registry-uri:
          type: string
          description: The URL of the Schema Registry running locally.
          maxLength: 512
    OAuthCredentials:
      description: OAuth 2.0 authentication credentials
      type: object
      required:
      - tokens_url
      - client_id
      properties:
        tokens_url:
          type: string
          description: The URL of the OAuth 2.0 identity provider's token endpoint.
          maxLength: 256
        client_id:
          type: string
          description: The public identifier for the application as registered with
            the OAuth 2.0 identity provider.
          minLength: 1
          maxLength: 128
        client_secret:
          description: The client secret known only to the application and the OAuth
            2.0 identity provider.
          type: string
          $ref: "#/components/schemas/Password"
        scope:
          type: string
          description: The scope to use. The scope is optional and required only when
            your identity provider doesn't have a default scope or your groups claim
            is linked to a scope path to use when connecting to the external service.
          maxLength: 256
        connect_timeout_millis:
          type: integer
          format: int32
          description: The timeout in milliseconds when connecting to your identity
            provider.
          minimum: 0
        ccloud_logical_cluster_id:
          type: string
          description: "Additional property that can be added in the request header\
            \ to identify the logical cluster ID to connect to. For example, this\
            \ may be a Confluent Cloud Kafka or Schema Registry cluster ID."
        ccloud_identity_pool_id:
          type: string
          description: "Additional property that can be added in the request header\
            \ to identify the principal ID for authorization. For example, this may\
            \ be a Confluent Cloud identity pool ID."
    PartitionConsumeData:
      type: object
      properties:
        partition_id:
          type: integer
          format: int32
        next_offset:
          type: integer
          format: int64
        records:
          type: array
          items:
            $ref: "#/components/schemas/PartitionConsumeRecord"
    PartitionConsumeRecord:
      type: object
      properties:
        partition_id:
          type: integer
          format: int32
        offset:
          type: integer
          format: int64
        timestamp:
          type: integer
          format: int64
        timestamp_type:
          $ref: "#/components/schemas/TimestampType"
        headers:
          type: array
          items:
            $ref: "#/components/schemas/PartitionConsumeRecordHeader"
        key:
          $ref: "#/components/schemas/JsonNode"
        value:
          $ref: "#/components/schemas/JsonNode"
        metadata:
          $ref: "#/components/schemas/RecordMetadata"
        key_decoding_error:
          type: string
        value_decoding_error:
          type: string
        exceeded_fields:
          $ref: "#/components/schemas/ExceededFields"
    PartitionConsumeRecordHeader:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    PartitionOffset:
      type: object
      properties:
        partition_id:
          type: integer
          format: int32
        offset:
          type: integer
          format: int64
    Password:
      type: string
      maxLength: 1024
      minLength: 1
      description: A user-provided password that is always masked in responses
    Preferences:
      type: object
      required:
      - api_version
      - kind
      - spec
      properties:
        api_version:
          type: string
        kind:
          type: string
        metadata:
          $ref: "#/components/schemas/PreferencesMetadata"
        spec:
          $ref: "#/components/schemas/PreferencesSpec"
    PreferencesMetadata:
      type: object
      required:
      - self
      properties:
        self:
          type: string
    PreferencesSpec:
      type: object
      properties:
        kerberos_config_file_path:
          type: string
        tls_pem_paths:
          type: array
          items:
            type: string
        trust_all_certificates:
          type: boolean
    ProduceRequest:
      type: object
      properties:
        partition_id:
          type: integer
          format: int32
        headers:
          type: array
          items:
            $ref: "#/components/schemas/ProduceRequestHeader"
        key:
          $ref: "#/components/schemas/ProduceRequestData"
        value:
          $ref: "#/components/schemas/ProduceRequestData"
        timestamp:
          $ref: "#/components/schemas/Date"
    ProduceRequestData:
      type: object
      properties:
        type:
          type: string
        subject:
          type: string
        subject_name_strategy:
          type: string
        schema_id:
          type: integer
          format: int32
        schema_version:
          type: integer
          format: int32
        schema:
          type: string
        data: {}
    ProduceRequestHeader:
      type: object
      required:
      - name
      properties:
        name:
          type: string
        value:
          type: string
          format: binary
    ProduceResponse:
      type: object
      required:
      - error_code
      properties:
        error_code:
          type: integer
          format: int32
        message:
          type: string
        cluster_id:
          type: string
        topic_name:
          type: string
        partition_id:
          type: integer
          format: int32
        offset:
          type: integer
          format: int64
        timestamp:
          $ref: "#/components/schemas/Date"
        key:
          $ref: "#/components/schemas/ProduceResponseData"
        value:
          $ref: "#/components/schemas/ProduceResponseData"
    ProduceResponseData:
      type: object
      required:
      - size
      - type
      properties:
        size:
          type: integer
          format: int64
        type:
          type: string
        subject:
          type: string
        schema_id:
          type: integer
          format: int32
        schema_version:
          type: integer
          format: int32
    RecordMetadata:
      type: object
      properties:
        key_metadata:
          $ref: "#/components/schemas/KeyOrValueMetadata"
        value_metadata:
          $ref: "#/components/schemas/KeyOrValueMetadata"
    SchemaRegistryConfig:
      type: object
      description: Schema Registry configuration.
      properties:
        id:
          type: string
          description: "The identifier of the Schema Registry cluster, if known."
          maxLength: 64
        uri:
          type: string
          description: The URL of the Schema Registry.
          minLength: 1
          maxLength: 256
        credentials:
          oneOf:
          - $ref: "#/components/schemas/BasicCredentials"
          - $ref: "#/components/schemas/ApiKeyAndSecret"
          - $ref: "#/components/schemas/OAuthCredentials"
          description: "The credentials for the Schema Registry, or null if no authentication\
            \ is required"
        ssl:
          description: "The SSL configuration for connecting to Schema Registry. If\
            \ null, the connection will use SSL with the default settings. To disable,\
            \ set `enabled` to false."
          type:
          - object
          - "null"
          anyOf:
          - $ref: "#/components/schemas/TLSConfig"
          - type: "null"
      required:
      - uri
    SchemaRegistryStatus:
      description: The status related to the specified Schema Registry.
      type: object
      required:
      - state
      properties:
        state:
          description: The state of the connection to the Schema Registry.
          type: string
          $ref: "#/components/schemas/ConnectedState"
        user:
          description: "Information about the authenticated principal, if known."
          type: object
          $ref: "#/components/schemas/UserInfo"
        errors:
          description: Errors related to the connection to the Schema Registry.
          type: object
          $ref: "#/components/schemas/AuthErrors"
    ScramCredentials:
      description: Scram authentication credentials
      type: object
      required:
      - hash_algorithm
      - scram_username
      - scram_password
      properties:
        hash_algorithm:
          description: Hash algorithm
          type: string
          $ref: "#/components/schemas/HashAlgorithm"
        scram_username:
          type: string
          maxLength: 64
          minLength: 1
          description: The username to use when connecting to the external service.
        scram_password:
          maxLength: 1024
          minLength: 1
          description: The password to use when connecting to the external service.
          type: string
          $ref: "#/components/schemas/Password"
    SidecarAccessToken:
      type: object
      properties:
        auth_secret:
          type: string
    SidecarError:
      type: object
      description: Describes a particular error encountered while performing an operation.
      properties:
        code:
          type: string
        status:
          type: string
        title:
          type: string
        id:
          type: string
        detail:
          type: string
        source:
          $ref: "#/components/schemas/JsonNode"
    SidecarVersionResponse:
      type: object
      properties:
        version:
          type: string
    SimpleConsumeMultiPartitionRequest:
      type: object
      properties:
        offsets:
          type: array
          items:
            $ref: "#/components/schemas/PartitionOffset"
        max_poll_records:
          type: integer
          format: int32
        timestamp:
          type: integer
          format: int64
        fetch_max_bytes:
          type: integer
          format: int32
        message_max_bytes:
          type: integer
          format: int32
        from_beginning:
          type: boolean
    SimpleConsumeMultiPartitionResponse:
      type: object
      properties:
        cluster_id:
          type: string
        topic_name:
          type: string
        partition_data_list:
          type: array
          items:
            $ref: "#/components/schemas/PartitionConsumeData"
    Status:
      type: string
      enum:
      - NO_TOKEN
      - VALID_TOKEN
      - INVALID_TOKEN
      - FAILED
    StoreType:
      type: string
      enum:
      - JKS
      - PKCS12
      - PEM
      - UNKNOWN
    TLSConfig:
      description: SSL configuration
      type: object
      properties:
        verify_hostname:
          type: boolean
          description: Whether to verify the server certificate hostname. Defaults
            to true if not set.
          default: true
        enabled:
          type: boolean
          description: "Whether SSL is enabled. If not set, defaults to true."
          default: true
        truststore:
          description: The trust store configuration for authenticating the server's
            certificate.
          type:
          - object
          - "null"
          anyOf:
          - $ref: "#/components/schemas/TrustStore"
          - type: "null"
        keystore:
          description: "The key store configuration that will identify and authenticate\
            \ the client to the server, required for mutual TLS (mTLS)"
          type:
          - object
          - "null"
          anyOf:
          - $ref: "#/components/schemas/KeyStore"
          - type: "null"
      required:
      - enabled
    TimestampType:
      type: string
      enum:
      - NO_TIMESTAMP_TYPE
      - CREATE_TIME
      - LOG_APPEND_TIME
    TrustStore:
      type: object
      required:
      - path
      properties:
        path:
          type: string
          description: The path to the local trust store file. Required for authenticating
            the server's certificate.
          maxLength: 256
        password:
          description: "The password for the local trust store file. If a password\
            \ is not set, trust store file configured will still be used, but integrity\
            \ checking is disabled. A trust store password is not supported for PEM\
            \ format."
          type:
          - string
          - "null"
          anyOf:
          - $ref: "#/components/schemas/Password"
          - type: "null"
        type:
          description: The file format of the local trust store file
          type:
          - string
          - "null"
          default: JKS
          anyOf:
          - $ref: "#/components/schemas/StoreType"
          - type: "null"
    UserInfo:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        social_connection:
          type: string
        auth_type:
          type: string
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - UP
          - DOWN
        checks:
          type: array
          items:
            $ref: "#/components/schemas/HealthCheck"
    HealthCheck:
      type: object
      properties:
        name:
          type: string
        data:
          type:
          - object
          - "null"
        status:
          type: string
          enum:
          - UP
          - DOWN
paths:
  /:
    get:
      parameters:
      - name: email
        in: query
        schema:
          type: string
      - name: message
        in: query
        schema:
          type: string
      - name: success
        in: query
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                type: string
      summary: Password Reset Callback
      tags:
      - Password Reset Callback Resource
  /api/login/realm:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json: {}
      summary: Proxy Login Realm Request
      tags:
      - Login Realm Resource
  /gateway/v1/callback-vscode-docs:
    get:
      parameters:
      - name: code
        in: query
        schema:
          type: string
      - name: state
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                type: string
      summary: Callback
      tags:
      - O Auth Callback Resource
  /gateway/v1/clusters/{cluster_id}/topics/{topic_name}/partitions/-/consume:
    post:
      parameters:
      - name: cluster_id
        in: path
        required: true
        schema:
          type: string
      - name: topic_name
        in: path
        required: true
        schema:
          type: string
      - description: Connection ID
        in: header
        name: x-connection-id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SimpleConsumeMultiPartitionRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SimpleConsumeMultiPartitionResponse"
        "400":
          description: Bad Request
      summary: Message Viewer
      tags:
      - Kafka Consume Resource
  /gateway/v1/clusters/{cluster_id}/topics/{topic_name}/records:
    post:
      parameters:
      - name: cluster_id
        in: path
        required: true
        schema:
          type: string
      - name: topic_name
        in: path
        required: true
        schema:
          type: string
      - name: dry_run
        in: query
        schema:
          type: boolean
          default: false
      - description: Connection ID
        in: header
        name: x-connection-id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProduceRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProduceResponse"
        "400":
          description: Bad Request
      summary: Produce Record
      tags:
      - Confluent Cloud Produce Records Resource
  /gateway/v1/connections:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionsList"
      summary: List Connections
      tags:
      - Connections Resource
    post:
      parameters:
      - name: dry_run
        in: query
        schema:
          description: Whether to validate the connection spec and determine the connection
            status without creating the connection
          type: boolean
          default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionSpec"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"
        "400":
          description: Bad Request
      summary: Create Connection
      tags:
      - Connections Resource
  /gateway/v1/connections/{id}:
    put:
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionSpec"
        required: true
      responses:
        "200":
          description: Connection updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"
        "404":
          description: Connection not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Failure"
        "401":
          description: Could not authenticate
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Failure"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Failure"
      summary: Update Connection
      tags:
      - Connections Resource
    patch:
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JsonMergePatch"
        required: true
      responses:
        "200":
          description: Connection updated with PATCH
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"
        "404":
          description: Connection not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Failure"
        "401":
          description: Could not authenticate
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Failure"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Failure"
      summary: Patch Connection
      tags:
      - Connections Resource
    get:
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"
      summary: Get Connection
      tags:
      - Connections Resource
    delete:
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
      summary: Delete Connection
      tags:
      - Connections Resource
  /gateway/v1/handshake:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SidecarAccessToken"
      summary: Handshake
      tags:
      - Handshake Resource
  /gateway/v1/preferences:
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Preferences"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Preferences"
        "400":
          description: Provided preferences are not valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Failure"
      summary: Update Preferences
      tags:
      - Preferences Resource
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Preferences"
      summary: Get Preferences
      tags:
      - Preferences Resource
  /gateway/v1/version:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SidecarVersionResponse"
      summary: Version
      tags:
      - Version Resource
  /gateway/v1/health:
    description: MicroProfile Health Endpoint
    summary: MicroProfile Health provides a way for your application to distribute
      information about its healthiness state to state whether or not it is able to
      function properly
    get:
      operationId: microprofile_health_root
      description: Check the health of the application
      tags:
      - MicroProfile Health
      summary: "An aggregated view of the Liveness, Readiness and Startup of this\
        \ application"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
  /gateway/v1/health/live:
    description: MicroProfile Health - Liveness Endpoint
    summary: Liveness checks are utilized to tell whether the application should be
      restarted
    get:
      operationId: microprofile_health_liveness
      description: Check the liveness of the application
      tags:
      - MicroProfile Health
      summary: The Liveness check of this application
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
  /gateway/v1/health/ready:
    description: MicroProfile Health - Readiness Endpoint
    summary: Readiness checks are used to tell whether the application is able to
      process requests
    get:
      operationId: microprofile_health_readiness
      description: Check the readiness of the application
      tags:
      - MicroProfile Health
      summary: The Readiness check of this application
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
  /gateway/v1/health/started:
    description: MicroProfile Health - Startup Endpoint
    summary: Startup checks are an used to tell when the application has started
    get:
      operationId: microprofile_health_startup
      description: Check the startup of the application
      tags:
      - MicroProfile Health
      summary: The Startup check of this application
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
info:
  title: Confluent ide-sidecar API
  version: 0.215.0
  description: "API for the Confluent ide-sidecar, part of Confluent for VS Code"
  termsOfService: Your terms here
  contact:
    name: Confluent for VS Code Support
    email: vscode@confluent.io
    url: https://confluent.io/contact
servers:
- url: http://127.0.0.1:26636
  description: Auto generated value