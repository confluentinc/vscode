/* tslint:disable */
/* eslint-disable */
/**
 * SQL API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { DataType } from "./DataType";
import {
  DataTypeFromJSON,
  DataTypeFromJSONTyped,
  DataTypeToJSON,
  DataTypeToJSONTyped,
} from "./DataType";

/**
 *
 * @export
 * @interface RowFieldType
 */
export interface RowFieldType {
  /**
   * The name of the field.
   * @type {string}
   * @memberof RowFieldType
   */
  name: string;
  /**
   * The data type of the field.
   * @type {DataType}
   * @memberof RowFieldType
   */
  field_type: DataType;
  /**
   * The description of the field.
   * @type {string}
   * @memberof RowFieldType
   */
  description?: string;
}

/**
 * Check if a given object implements the RowFieldType interface.
 */
export function instanceOfRowFieldType(value: object): value is RowFieldType {
  if (!("name" in value) || value["name"] === undefined) return false;
  if (!("field_type" in value) || value["field_type"] === undefined) return false;
  return true;
}

export function RowFieldTypeFromJSON(json: any): RowFieldType {
  return RowFieldTypeFromJSONTyped(json, false);
}

export function RowFieldTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RowFieldType {
  if (json == null) {
    return json;
  }
  return {
    name: json["name"],
    field_type: DataTypeFromJSON(json["field_type"]),
    description: json["description"] == null ? undefined : json["description"],
  };
}

export function RowFieldTypeToJSON(json: any): RowFieldType {
  return RowFieldTypeToJSONTyped(json, false);
}

export function RowFieldTypeToJSONTyped(
  value?: RowFieldType | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    name: value["name"],
    field_type: DataTypeToJSON(value["field_type"]),
    description: value["description"],
  };
}
