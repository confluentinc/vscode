/* tslint:disable */
/* eslint-disable */
/**
 * SQL API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { SqlV1StatementListDataInner } from "./SqlV1StatementListDataInner";
import {
  SqlV1StatementListDataInnerFromJSON,
  SqlV1StatementListDataInnerFromJSONTyped,
  SqlV1StatementListDataInnerToJSON,
  SqlV1StatementListDataInnerToJSONTyped,
} from "./SqlV1StatementListDataInner";
import type { SqlV1StatementListMetadata } from "./SqlV1StatementListMetadata";
import {
  SqlV1StatementListMetadataFromJSON,
  SqlV1StatementListMetadataFromJSONTyped,
  SqlV1StatementListMetadataToJSON,
  SqlV1StatementListMetadataToJSONTyped,
} from "./SqlV1StatementListMetadata";

/**
 * `Statement` represents a core resource used to model SQL statements for execution.
 * A statement generalizes DDL, DML, DQL, etc., but doesnâ€™t attempt to handle session
 * management or any higher-level functionality.
 * The API allows you to list, create, read, and delete your statements.
 * ## The Statements Model
 * <SchemaDefinition schemaRef="#/components/schemas/sql.v1.Statement" />
 * @export
 * @interface SqlV1StatementList
 */
export interface SqlV1StatementList {
  /**
   * APIVersion defines the schema version of this representation of a resource.
   * @type {string}
   * @memberof SqlV1StatementList
   */
  api_version: SqlV1StatementListApiVersionEnum;
  /**
   * Kind defines the object this REST resource represents.
   * @type {string}
   * @memberof SqlV1StatementList
   */
  kind: SqlV1StatementListKindEnum;
  /**
   *
   * @type {SqlV1StatementListMetadata}
   * @memberof SqlV1StatementList
   */
  metadata: SqlV1StatementListMetadata;
  /**
   * A data property that contains an array of resource items. Each entry in the array is a separate resource.
   * @type {Set<SqlV1StatementListDataInner>}
   * @memberof SqlV1StatementList
   */
  data: Set<SqlV1StatementListDataInner>;
}

/**
 * @export
 */
export const SqlV1StatementListApiVersionEnum = {
  SqlV1: "sql/v1",
} as const;
export type SqlV1StatementListApiVersionEnum =
  (typeof SqlV1StatementListApiVersionEnum)[keyof typeof SqlV1StatementListApiVersionEnum];

/**
 * @export
 */
export const SqlV1StatementListKindEnum = {
  StatementList: "StatementList",
} as const;
export type SqlV1StatementListKindEnum =
  (typeof SqlV1StatementListKindEnum)[keyof typeof SqlV1StatementListKindEnum];

/**
 * Check if a given object implements the SqlV1StatementList interface.
 */
export function instanceOfSqlV1StatementList(value: object): value is SqlV1StatementList {
  if (!("api_version" in value) || value["api_version"] === undefined) return false;
  if (!("kind" in value) || value["kind"] === undefined) return false;
  if (!("metadata" in value) || value["metadata"] === undefined) return false;
  if (!("data" in value) || value["data"] === undefined) return false;
  return true;
}

export function SqlV1StatementListFromJSON(json: any): SqlV1StatementList {
  return SqlV1StatementListFromJSONTyped(json, false);
}

export function SqlV1StatementListFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): SqlV1StatementList {
  if (json == null) {
    return json;
  }
  return {
    api_version: json["api_version"],
    kind: json["kind"],
    metadata: SqlV1StatementListMetadataFromJSON(json["metadata"]),
    data: new Set((json["data"] as Array<any>).map(SqlV1StatementListDataInnerFromJSON)),
  };
}

export function SqlV1StatementListToJSON(json: any): SqlV1StatementList {
  return SqlV1StatementListToJSONTyped(json, false);
}

export function SqlV1StatementListToJSONTyped(
  value?: SqlV1StatementList | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    api_version: value["api_version"],
    kind: value["kind"],
    metadata: SqlV1StatementListMetadataToJSON(value["metadata"]),
    data: Array.from(value["data"] as Set<any>).map(SqlV1StatementListDataInnerToJSON),
  };
}
