/* tslint:disable */
/* eslint-disable */
/**
 * SQL API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { SqlV1ConnectionStatus } from "./SqlV1ConnectionStatus";
import {
  SqlV1ConnectionStatusFromJSON,
  SqlV1ConnectionStatusFromJSONTyped,
  SqlV1ConnectionStatusToJSON,
  SqlV1ConnectionStatusToJSONTyped,
} from "./SqlV1ConnectionStatus";
import type { SqlV1ConnectionSpec } from "./SqlV1ConnectionSpec";
import {
  SqlV1ConnectionSpecFromJSON,
  SqlV1ConnectionSpecFromJSONTyped,
  SqlV1ConnectionSpecToJSON,
  SqlV1ConnectionSpecToJSONTyped,
} from "./SqlV1ConnectionSpec";
import type { SqlV1ConnectionMetadata } from "./SqlV1ConnectionMetadata";
import {
  SqlV1ConnectionMetadataFromJSON,
  SqlV1ConnectionMetadataFromJSONTyped,
  SqlV1ConnectionMetadataToJSON,
  SqlV1ConnectionMetadataToJSONTyped,
} from "./SqlV1ConnectionMetadata";

/**
 * `Connection` models a reusable endpoint and auth token to authenticate the caller to
 * use that endpoint.
 * Only `OrganizationAdmins` and `EnvironmentAdmins` will have the permissions to create, update and delete `Connections`.
 * `FlinkDevelopers` and `ModelResourceOwners` can later reference a `Connection` resource within their Model
 * creation statements.
 * The API allows you to list, create, read, and delete your connections.
 * ## The Connections Model
 * <SchemaDefinition schemaRef="#/components/schemas/sql.v1.Connection" />
 * @export
 * @interface SqlV1Connection
 */
export interface SqlV1Connection {
  /**
   * APIVersion defines the schema version of this representation of a resource.
   * @type {string}
   * @memberof SqlV1Connection
   */
  readonly api_version?: SqlV1ConnectionApiVersionEnum;
  /**
   * Kind defines the object this REST resource represents.
   * @type {string}
   * @memberof SqlV1Connection
   */
  readonly kind?: SqlV1ConnectionKindEnum;
  /**
   *
   * @type {SqlV1ConnectionMetadata}
   * @memberof SqlV1Connection
   */
  metadata?: SqlV1ConnectionMetadata;
  /**
   * The user provided name of the resource, unique within this environment.
   * @type {string}
   * @memberof SqlV1Connection
   */
  name?: string;
  /**
   *
   * @type {SqlV1ConnectionSpec}
   * @memberof SqlV1Connection
   */
  spec?: SqlV1ConnectionSpec;
  /**
   *
   * @type {SqlV1ConnectionStatus}
   * @memberof SqlV1Connection
   */
  status?: SqlV1ConnectionStatus;
}

/**
 * @export
 * @enum {string}
 */
export enum SqlV1ConnectionApiVersionEnum {
  SqlV1 = "sql/v1",
}
/**
 * @export
 * @enum {string}
 */
export enum SqlV1ConnectionKindEnum {
  Connection = "Connection",
}

/**
 * Check if a given object implements the SqlV1Connection interface.
 */
export function instanceOfSqlV1Connection(value: object): value is SqlV1Connection {
  return true;
}

export function SqlV1ConnectionFromJSON(json: any): SqlV1Connection {
  return SqlV1ConnectionFromJSONTyped(json, false);
}

export function SqlV1ConnectionFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): SqlV1Connection {
  if (json == null) {
    return json;
  }
  return {
    api_version: json["api_version"] == null ? undefined : json["api_version"],
    kind: json["kind"] == null ? undefined : json["kind"],
    metadata:
      json["metadata"] == null ? undefined : SqlV1ConnectionMetadataFromJSON(json["metadata"]),
    name: json["name"] == null ? undefined : json["name"],
    spec: json["spec"] == null ? undefined : SqlV1ConnectionSpecFromJSON(json["spec"]),
    status: json["status"] == null ? undefined : SqlV1ConnectionStatusFromJSON(json["status"]),
  };
}

export function SqlV1ConnectionToJSON(json: any): SqlV1Connection {
  return SqlV1ConnectionToJSONTyped(json, false);
}

export function SqlV1ConnectionToJSONTyped(
  value?: Omit<SqlV1Connection, "api_version" | "kind"> | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    metadata: SqlV1ConnectionMetadataToJSON(value["metadata"]),
    name: value["name"],
    spec: SqlV1ConnectionSpecToJSON(value["spec"]),
    status: SqlV1ConnectionStatusToJSON(value["status"]),
  };
}
