/* tslint:disable */
/* eslint-disable */
/**
 * SQL API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 * This option is used to add or replace a value for a field
 * @export
 * @interface JsonPatchRequestAddReplace
 */
export interface JsonPatchRequestAddReplace {
  /**
   * A JSON Pointer path.
   * @type {string}
   * @memberof JsonPatchRequestAddReplace
   */
  path: string;
  /**
   * The value to add, replace or test.
   * @type {any}
   * @memberof JsonPatchRequestAddReplace
   */
  value: any | null;
  /**
   * The operation to perform.
   * @type {string}
   * @memberof JsonPatchRequestAddReplace
   */
  op: JsonPatchRequestAddReplaceOpEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonPatchRequestAddReplaceOpEnum {
  Add = "ADD",
  Replace = "REPLACE",
  Test = "TEST",
}

/**
 * Check if a given object implements the JsonPatchRequestAddReplace interface.
 */
export function instanceOfJsonPatchRequestAddReplace(
  value: object,
): value is JsonPatchRequestAddReplace {
  if (!("path" in value) || value["path"] === undefined) return false;
  if (!("value" in value) || value["value"] === undefined) return false;
  if (!("op" in value) || value["op"] === undefined) return false;
  return true;
}

export function JsonPatchRequestAddReplaceFromJSON(json: any): JsonPatchRequestAddReplace {
  return JsonPatchRequestAddReplaceFromJSONTyped(json, false);
}

export function JsonPatchRequestAddReplaceFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): JsonPatchRequestAddReplace {
  if (json == null) {
    return json;
  }
  return {
    path: json["path"],
    value: json["value"],
    op: json["op"],
  };
}

export function JsonPatchRequestAddReplaceToJSON(json: any): JsonPatchRequestAddReplace {
  return JsonPatchRequestAddReplaceToJSONTyped(json, false);
}

export function JsonPatchRequestAddReplaceToJSONTyped(
  value?: JsonPatchRequestAddReplace | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    path: value["path"],
    value: value["value"],
    op: value["op"],
  };
}
