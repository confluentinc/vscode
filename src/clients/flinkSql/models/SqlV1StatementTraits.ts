/* tslint:disable */
/* eslint-disable */
/**
 * SQL API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { SqlV1ResultSchema } from "./SqlV1ResultSchema";
import {
  SqlV1ResultSchemaFromJSON,
  SqlV1ResultSchemaFromJSONTyped,
  SqlV1ResultSchemaToJSON,
  SqlV1ResultSchemaToJSONTyped,
} from "./SqlV1ResultSchema";

/**
 * StatementTraits contains detailed information about the properties of a Statement
 * @export
 * @interface SqlV1StatementTraits
 */
export interface SqlV1StatementTraits {
  /**
   * Categorizes the SQL statement. The result is Confluent-specific but inspired by SQL. It uses underscores for separating concepts e.g. "CREATE_TABLE".
   * @type {string}
   * @memberof SqlV1StatementTraits
   */
  sql_kind?: string;
  /**
   * Indicates the special case where results of a statement are bounded.
   * @type {boolean}
   * @memberof SqlV1StatementTraits
   */
  is_bounded?: boolean;
  /**
   * Indicates the special case where results of a statement are insert/append only.
   * @type {boolean}
   * @memberof SqlV1StatementTraits
   */
  is_append_only?: boolean;
  /**
   * Defines the column indices clients can use as upsert keys.
   * @type {Array<number>}
   * @memberof SqlV1StatementTraits
   */
  upsert_columns?: Array<number>;
  /**
   *
   * @type {SqlV1ResultSchema}
   * @memberof SqlV1StatementTraits
   */
  schema?: SqlV1ResultSchema;
}

/**
 * Check if a given object implements the SqlV1StatementTraits interface.
 */
export function instanceOfSqlV1StatementTraits(value: object): value is SqlV1StatementTraits {
  return true;
}

export function SqlV1StatementTraitsFromJSON(json: any): SqlV1StatementTraits {
  return SqlV1StatementTraitsFromJSONTyped(json, false);
}

export function SqlV1StatementTraitsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): SqlV1StatementTraits {
  if (json == null) {
    return json;
  }
  return {
    sql_kind: json["sql_kind"] == null ? undefined : json["sql_kind"],
    is_bounded: json["is_bounded"] == null ? undefined : json["is_bounded"],
    is_append_only: json["is_append_only"] == null ? undefined : json["is_append_only"],
    upsert_columns: json["upsert_columns"] == null ? undefined : json["upsert_columns"],
    schema: json["schema"] == null ? undefined : SqlV1ResultSchemaFromJSON(json["schema"]),
  };
}

export function SqlV1StatementTraitsToJSON(json: any): SqlV1StatementTraits {
  return SqlV1StatementTraitsToJSONTyped(json, false);
}

export function SqlV1StatementTraitsToJSONTyped(
  value?: SqlV1StatementTraits | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    sql_kind: value["sql_kind"],
    is_bounded: value["is_bounded"],
    is_append_only: value["is_append_only"],
    upsert_columns: value["upsert_columns"],
    schema: SqlV1ResultSchemaToJSON(value["schema"]),
  };
}
