/* tslint:disable */
/* eslint-disable */
/**
 * SQL API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 * Describes a sensitive piece of information passed in plaintext.
 *
 * Confluent only accepts authentication tokens of supported model providers from OrgAdmins and EnvAdmins.
 * For now, only 'PlainText' provider is supported. It stores authentication token details as opaque bytes in an encrypted form.
 * This option offers limited security as it only provides a single level of encryption.
 *
 * @export
 * @interface SqlV1PlaintextProvider
 */
export interface SqlV1PlaintextProvider {
  /**
   * Plaintext Provider Kind Type
   *
   * @type {string}
   * @memberof SqlV1PlaintextProvider
   */
  kind?: SqlV1PlaintextProviderKindEnum;
  /**
   * Authentication token in plaintext JSON string.
   * For composite tokens, provide them as JSON.
   * This is sensitive piece of information stored as opaque bytes in an encrypted form with single level of encryption.
   *
   * Scoped to an endpoint of a `Connection` resource.
   *
   * @type {string}
   * @memberof SqlV1PlaintextProvider
   */
  data?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum SqlV1PlaintextProviderKindEnum {
  PlaintextProvider = "PlaintextProvider",
}

/**
 * Check if a given object implements the SqlV1PlaintextProvider interface.
 */
export function instanceOfSqlV1PlaintextProvider(value: object): value is SqlV1PlaintextProvider {
  return true;
}

export function SqlV1PlaintextProviderFromJSON(json: any): SqlV1PlaintextProvider {
  return SqlV1PlaintextProviderFromJSONTyped(json, false);
}

export function SqlV1PlaintextProviderFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): SqlV1PlaintextProvider {
  if (json == null) {
    return json;
  }
  return {
    kind: json["kind"] == null ? undefined : json["kind"],
    data: json["data"] == null ? undefined : json["data"],
  };
}

export function SqlV1PlaintextProviderToJSON(json: any): SqlV1PlaintextProvider {
  return SqlV1PlaintextProviderToJSONTyped(json, false);
}

export function SqlV1PlaintextProviderToJSONTyped(
  value?: SqlV1PlaintextProvider | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    kind: value["kind"],
    data: value["data"],
  };
}
