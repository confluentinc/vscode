/* tslint:disable */
/* eslint-disable */
/**
 * SQL API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { SqlV1StatementResultResults } from "./SqlV1StatementResultResults";
import {
  SqlV1StatementResultResultsFromJSON,
  SqlV1StatementResultResultsFromJSONTyped,
  SqlV1StatementResultResultsToJSON,
  SqlV1StatementResultResultsToJSONTyped,
} from "./SqlV1StatementResultResults";
import type { ResultListMeta } from "./ResultListMeta";
import {
  ResultListMetaFromJSON,
  ResultListMetaFromJSONTyped,
  ResultListMetaToJSON,
  ResultListMetaToJSONTyped,
} from "./ResultListMeta";

/**
 * `Statement Result` represents a resource used to model results of SQL statements.
 * The API allows you to read your SQL statement result.
 * @export
 * @interface SqlV1StatementResult
 */
export interface SqlV1StatementResult {
  /**
   * APIVersion defines the schema version of this representation of a resource.
   * @type {string}
   * @memberof SqlV1StatementResult
   */
  api_version: SqlV1StatementResultApiVersionEnum;
  /**
   * Kind defines the object this REST resource represents.
   * @type {string}
   * @memberof SqlV1StatementResult
   */
  kind: SqlV1StatementResultKindEnum;
  /**
   *
   * @type {ResultListMeta}
   * @memberof SqlV1StatementResult
   */
  metadata: ResultListMeta;
  /**
   *
   * @type {SqlV1StatementResultResults}
   * @memberof SqlV1StatementResult
   */
  results?: SqlV1StatementResultResults;
}

/**
 * @export
 * @enum {string}
 */
export enum SqlV1StatementResultApiVersionEnum {
  SqlV1 = "sql/v1",
}
/**
 * @export
 * @enum {string}
 */
export enum SqlV1StatementResultKindEnum {
  StatementResult = "StatementResult",
}

/**
 * Check if a given object implements the SqlV1StatementResult interface.
 */
export function instanceOfSqlV1StatementResult(value: object): value is SqlV1StatementResult {
  if (!("api_version" in value) || value["api_version"] === undefined) return false;
  if (!("kind" in value) || value["kind"] === undefined) return false;
  if (!("metadata" in value) || value["metadata"] === undefined) return false;
  return true;
}

export function SqlV1StatementResultFromJSON(json: any): SqlV1StatementResult {
  return SqlV1StatementResultFromJSONTyped(json, false);
}

export function SqlV1StatementResultFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): SqlV1StatementResult {
  if (json == null) {
    return json;
  }
  return {
    api_version: json["api_version"],
    kind: json["kind"],
    metadata: ResultListMetaFromJSON(json["metadata"]),
    results:
      json["results"] == null ? undefined : SqlV1StatementResultResultsFromJSON(json["results"]),
  };
}

export function SqlV1StatementResultToJSON(json: any): SqlV1StatementResult {
  return SqlV1StatementResultToJSONTyped(json, false);
}

export function SqlV1StatementResultToJSONTyped(
  value?: SqlV1StatementResult | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    api_version: value["api_version"],
    kind: value["kind"],
    metadata: ResultListMetaToJSON(value["metadata"]),
    results: SqlV1StatementResultResultsToJSON(value["results"]),
  };
}
