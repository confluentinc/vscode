/* tslint:disable */
/* eslint-disable */
/**
 * SQL API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { SqlV1PlaintextProvider } from "./SqlV1PlaintextProvider";
import {
  instanceOfSqlV1PlaintextProvider,
  SqlV1PlaintextProviderFromJSON,
  SqlV1PlaintextProviderFromJSONTyped,
  SqlV1PlaintextProviderToJSON,
} from "./SqlV1PlaintextProvider";

/**
 * @type SqlV1ConnectionSpecAuthData
 * The vendor specific authentication token details
 *
 * The contents are stored as opaque bytes given in plaintext by an EnvAdmin.
 * In future, we would support more secure methods for distributing authentication tokens.
 *
 * @export
 */
export type SqlV1ConnectionSpecAuthData = { kind: "PlaintextProvider" } & SqlV1PlaintextProvider;

export function SqlV1ConnectionSpecAuthDataFromJSON(json: any): SqlV1ConnectionSpecAuthData {
  return SqlV1ConnectionSpecAuthDataFromJSONTyped(json, false);
}

export function SqlV1ConnectionSpecAuthDataFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): SqlV1ConnectionSpecAuthData {
  if (json == null) {
    return json;
  }
  switch (json["kind"]) {
    case "PlaintextProvider":
      return Object.assign({}, SqlV1PlaintextProviderFromJSONTyped(json, true), {
        kind: "PlaintextProvider",
      } as const);
    default:
      throw new Error(
        `No variant of SqlV1ConnectionSpecAuthData exists with 'kind=${json["kind"]}'`,
      );
  }
}

export function SqlV1ConnectionSpecAuthDataToJSON(json: any): any {
  return SqlV1ConnectionSpecAuthDataToJSONTyped(json, false);
}

export function SqlV1ConnectionSpecAuthDataToJSONTyped(
  value?: SqlV1ConnectionSpecAuthData | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }
  switch (value["kind"]) {
    case "PlaintextProvider":
      return Object.assign({}, SqlV1PlaintextProviderToJSON(value), {
        kind: "PlaintextProvider",
      } as const);
    default:
      throw new Error(
        `No variant of SqlV1ConnectionSpecAuthData exists with 'kind=${value["kind"]}'`,
      );
  }
}
