/* tslint:disable */
/* eslint-disable */
/**
 * SQL API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { SqlV1StatementTraits } from "./SqlV1StatementTraits";
import {
  SqlV1StatementTraitsFromJSON,
  SqlV1StatementTraitsFromJSONTyped,
  SqlV1StatementTraitsToJSON,
  SqlV1StatementTraitsToJSONTyped,
} from "./SqlV1StatementTraits";
import type { SqlV1ScalingStatus } from "./SqlV1ScalingStatus";
import {
  SqlV1ScalingStatusFromJSON,
  SqlV1ScalingStatusFromJSONTyped,
  SqlV1ScalingStatusToJSON,
  SqlV1ScalingStatusToJSONTyped,
} from "./SqlV1ScalingStatus";

/**
 * The status of the Statement
 * @export
 * @interface SqlV1StatementStatus
 */
export interface SqlV1StatementStatus {
  /**
   * The lifecycle phase of the submitted SQL statement:
   *
   * PENDING: SQL statement is pending execution;
   *
   * RUNNING: SQL statement execution is in progress;
   *
   * COMPLETED: SQL statement is completed;
   *
   * DELETING: SQL statement deletion is in progress;
   *
   * FAILING: SQL statement is failing;
   *
   * FAILED: SQL statement execution has failed;
   *
   * STOPPED: SQL statement execution has successfully been stopped;
   *
   * @type {string}
   * @memberof SqlV1StatementStatus
   */
  readonly phase: string;
  /**
   *
   * @type {SqlV1ScalingStatus}
   * @memberof SqlV1StatementStatus
   */
  scaling_status?: SqlV1ScalingStatus;
  /**
   * Details about the execution status of this statement.
   * @type {string}
   * @memberof SqlV1StatementStatus
   */
  readonly detail?: string;
  /**
   *
   * @type {SqlV1StatementTraits}
   * @memberof SqlV1StatementStatus
   */
  traits?: SqlV1StatementTraits;
  /**
   * The networking type used by the submitted SQL statement:
   *
   * PUBLIC: SQL statement is using public networking;
   *
   * PRIVATE: SQL statement is using private networking;
   *
   * @type {string}
   * @memberof SqlV1StatementStatus
   */
  readonly network_kind?: string;
  /**
   * The last Kafka offsets that a statement has processed. Represented by a mapping from Kafka topic to a
   * string representation of partitions mapped to offsets.
   *
   * @type {{ [key: string]: string; }}
   * @memberof SqlV1StatementStatus
   */
  readonly latest_offsets?: { [key: string]: string };
  /**
   * The date and time at which the Kafka topic offsets were added to the statement status. It is represented in RFC3339 format and is in UTC.
   * @type {Date}
   * @memberof SqlV1StatementStatus
   */
  readonly latest_offsets_timestamp?: Date;
}

/**
 * Check if a given object implements the SqlV1StatementStatus interface.
 */
export function instanceOfSqlV1StatementStatus(value: object): value is SqlV1StatementStatus {
  if (!("phase" in value) || value["phase"] === undefined) return false;
  return true;
}

export function SqlV1StatementStatusFromJSON(json: any): SqlV1StatementStatus {
  return SqlV1StatementStatusFromJSONTyped(json, false);
}

export function SqlV1StatementStatusFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): SqlV1StatementStatus {
  if (json == null) {
    return json;
  }
  return {
    phase: json["phase"],
    scaling_status:
      json["scaling_status"] == null
        ? undefined
        : SqlV1ScalingStatusFromJSON(json["scaling_status"]),
    detail: json["detail"] == null ? undefined : json["detail"],
    traits: json["traits"] == null ? undefined : SqlV1StatementTraitsFromJSON(json["traits"]),
    network_kind: json["network_kind"] == null ? undefined : json["network_kind"],
    latest_offsets: json["latest_offsets"] == null ? undefined : json["latest_offsets"],
    latest_offsets_timestamp:
      json["latest_offsets_timestamp"] == null
        ? undefined
        : new Date(json["latest_offsets_timestamp"]),
  };
}

export function SqlV1StatementStatusToJSON(json: any): SqlV1StatementStatus {
  return SqlV1StatementStatusToJSONTyped(json, false);
}

export function SqlV1StatementStatusToJSONTyped(
  value?: Omit<
    SqlV1StatementStatus,
    "phase" | "detail" | "network_kind" | "latest_offsets" | "latest_offsets_timestamp"
  > | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    scaling_status: SqlV1ScalingStatusToJSON(value["scaling_status"]),
    traits: SqlV1StatementTraitsToJSON(value["traits"]),
  };
}
