/* tslint:disable */
/* eslint-disable */
/**
 * SQL API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 *
 * @export
 * @interface SqlV1StatementException
 */
export interface SqlV1StatementException {
  /**
   * Kind defines the object this REST resource represents.
   * @type {string}
   * @memberof SqlV1StatementException
   */
  kind?: SqlV1StatementExceptionKindEnum;
  /**
   * Name of the SQL statement exception.
   * @type {string}
   * @memberof SqlV1StatementException
   */
  readonly name?: string;
  /**
   * Error message of the statement exception.
   * @type {string}
   * @memberof SqlV1StatementException
   */
  readonly message?: string;
  /**
   * The date and time at which the exception occurred. It is represented in RFC3339 format and is in UTC.
   * @type {Date}
   * @memberof SqlV1StatementException
   */
  readonly timestamp?: Date;
}

/**
 * @export
 * @enum {string}
 */
export enum SqlV1StatementExceptionKindEnum {
  StatementException = "StatementException",
}

/**
 * Check if a given object implements the SqlV1StatementException interface.
 */
export function instanceOfSqlV1StatementException(value: object): value is SqlV1StatementException {
  return true;
}

export function SqlV1StatementExceptionFromJSON(json: any): SqlV1StatementException {
  return SqlV1StatementExceptionFromJSONTyped(json, false);
}

export function SqlV1StatementExceptionFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): SqlV1StatementException {
  if (json == null) {
    return json;
  }
  return {
    kind: json["kind"] == null ? undefined : json["kind"],
    name: json["name"] == null ? undefined : json["name"],
    message: json["message"] == null ? undefined : json["message"],
    timestamp: json["timestamp"] == null ? undefined : new Date(json["timestamp"]),
  };
}

export function SqlV1StatementExceptionToJSON(json: any): SqlV1StatementException {
  return SqlV1StatementExceptionToJSONTyped(json, false);
}

export function SqlV1StatementExceptionToJSONTyped(
  value?: Omit<SqlV1StatementException, "name" | "message" | "timestamp"> | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    kind: value["kind"],
  };
}
