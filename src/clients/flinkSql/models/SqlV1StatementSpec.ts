/* tslint:disable */
/* eslint-disable */
/**
 * SQL API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 * The specs of the Statement
 * @export
 * @interface SqlV1StatementSpec
 */
export interface SqlV1StatementSpec {
  /**
   * The raw SQL text statement.
   * @type {string}
   * @memberof SqlV1StatementSpec
   */
  statement?: string;
  /**
   * A map (key-value pairs) of statement properties.
   * @type {{ [key: string]: string; }}
   * @memberof SqlV1StatementSpec
   */
  properties?: { [key: string]: string };
  /**
   * The id associated with the compute pool in context.
   * @type {string}
   * @memberof SqlV1StatementSpec
   */
  compute_pool_id?: string;
  /**
   * The id of a principal this statement runs as.
   * @type {string}
   * @memberof SqlV1StatementSpec
   */
  principal?: string;
  /**
   * The list of ids of the principals granting permissions to run this statement.
   * @type {Array<string>}
   * @memberof SqlV1StatementSpec
   */
  authorized_principals?: Array<string>;
  /**
   * Indicates whether the statement should be stopped.
   * @type {boolean}
   * @memberof SqlV1StatementSpec
   */
  stopped?: boolean;
}

/**
 * Check if a given object implements the SqlV1StatementSpec interface.
 */
export function instanceOfSqlV1StatementSpec(value: object): value is SqlV1StatementSpec {
  return true;
}

export function SqlV1StatementSpecFromJSON(json: any): SqlV1StatementSpec {
  return SqlV1StatementSpecFromJSONTyped(json, false);
}

export function SqlV1StatementSpecFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): SqlV1StatementSpec {
  if (json == null) {
    return json;
  }
  return {
    statement: json["statement"] == null ? undefined : json["statement"],
    properties: json["properties"] == null ? undefined : json["properties"],
    compute_pool_id: json["compute_pool_id"] == null ? undefined : json["compute_pool_id"],
    principal: json["principal"] == null ? undefined : json["principal"],
    authorized_principals:
      json["authorized_principals"] == null ? undefined : json["authorized_principals"],
    stopped: json["stopped"] == null ? undefined : json["stopped"],
  };
}

export function SqlV1StatementSpecToJSON(json: any): SqlV1StatementSpec {
  return SqlV1StatementSpecToJSONTyped(json, false);
}

export function SqlV1StatementSpecToJSONTyped(
  value?: SqlV1StatementSpec | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    statement: value["statement"],
    properties: value["properties"],
    compute_pool_id: value["compute_pool_id"],
    principal: value["principal"],
    authorized_principals: value["authorized_principals"],
    stopped: value["stopped"],
  };
}
