/* tslint:disable */
/* eslint-disable */
/**
 * SQL API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { SqlV1StatementMetadata } from "./SqlV1StatementMetadata";
import {
  SqlV1StatementMetadataFromJSON,
  SqlV1StatementMetadataFromJSONTyped,
  SqlV1StatementMetadataToJSON,
  SqlV1StatementMetadataToJSONTyped,
} from "./SqlV1StatementMetadata";
import type { SqlV1StatementResult } from "./SqlV1StatementResult";
import {
  SqlV1StatementResultFromJSON,
  SqlV1StatementResultFromJSONTyped,
  SqlV1StatementResultToJSON,
  SqlV1StatementResultToJSONTyped,
} from "./SqlV1StatementResult";
import type { SqlV1StatementSpec } from "./SqlV1StatementSpec";
import {
  SqlV1StatementSpecFromJSON,
  SqlV1StatementSpecFromJSONTyped,
  SqlV1StatementSpecToJSON,
  SqlV1StatementSpecToJSONTyped,
} from "./SqlV1StatementSpec";
import type { SqlV1StatementStatus } from "./SqlV1StatementStatus";
import {
  SqlV1StatementStatusFromJSON,
  SqlV1StatementStatusFromJSONTyped,
  SqlV1StatementStatusToJSON,
  SqlV1StatementStatusToJSONTyped,
} from "./SqlV1StatementStatus";

/**
 * `Statement` represents a core resource used to model SQL statements for execution.
 * A statement generalizes DDL, DML, DQL, etc., but doesnâ€™t attempt to handle session
 * management or any higher-level functionality.
 * The API allows you to list, create, read, and delete your statements.
 * ## The Statements Model
 * <SchemaDefinition schemaRef="#/components/schemas/sql.v1.Statement" />
 * @export
 * @interface SqlV1Statement
 */
export interface SqlV1Statement {
  /**
   * APIVersion defines the schema version of this representation of a resource.
   * @type {string}
   * @memberof SqlV1Statement
   */
  readonly api_version?: SqlV1StatementApiVersionEnum;
  /**
   * Kind defines the object this REST resource represents.
   * @type {string}
   * @memberof SqlV1Statement
   */
  readonly kind?: SqlV1StatementKindEnum;
  /**
   *
   * @type {SqlV1StatementMetadata}
   * @memberof SqlV1Statement
   */
  metadata?: SqlV1StatementMetadata;
  /**
   * The user provided name of the resource, unique within this environment.
   * @type {string}
   * @memberof SqlV1Statement
   */
  name?: string;
  /**
   * The unique identifier for the organization.
   * @type {string}
   * @memberof SqlV1Statement
   */
  organization_id?: string;
  /**
   * The unique identifier for the environment.
   * @type {string}
   * @memberof SqlV1Statement
   */
  environment_id?: string;
  /**
   *
   * @type {SqlV1StatementSpec}
   * @memberof SqlV1Statement
   */
  spec?: SqlV1StatementSpec;
  /**
   *
   * @type {SqlV1StatementStatus}
   * @memberof SqlV1Statement
   */
  status?: SqlV1StatementStatus;
  /**
   *
   * @type {SqlV1StatementResult}
   * @memberof SqlV1Statement
   */
  result?: SqlV1StatementResult;
}

/**
 * @export
 * @enum {string}
 */
export enum SqlV1StatementApiVersionEnum {
  SqlV1 = "sql/v1",
}
/**
 * @export
 * @enum {string}
 */
export enum SqlV1StatementKindEnum {
  Statement = "Statement",
}

/**
 * Check if a given object implements the SqlV1Statement interface.
 */
export function instanceOfSqlV1Statement(value: object): value is SqlV1Statement {
  return true;
}

export function SqlV1StatementFromJSON(json: any): SqlV1Statement {
  return SqlV1StatementFromJSONTyped(json, false);
}

export function SqlV1StatementFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): SqlV1Statement {
  if (json == null) {
    return json;
  }
  return {
    api_version: json["api_version"] == null ? undefined : json["api_version"],
    kind: json["kind"] == null ? undefined : json["kind"],
    metadata:
      json["metadata"] == null ? undefined : SqlV1StatementMetadataFromJSON(json["metadata"]),
    name: json["name"] == null ? undefined : json["name"],
    organization_id: json["organization_id"] == null ? undefined : json["organization_id"],
    environment_id: json["environment_id"] == null ? undefined : json["environment_id"],
    spec: json["spec"] == null ? undefined : SqlV1StatementSpecFromJSON(json["spec"]),
    status: json["status"] == null ? undefined : SqlV1StatementStatusFromJSON(json["status"]),
    result: json["result"] == null ? undefined : SqlV1StatementResultFromJSON(json["result"]),
  };
}

export function SqlV1StatementToJSON(json: any): SqlV1Statement {
  return SqlV1StatementToJSONTyped(json, false);
}

export function SqlV1StatementToJSONTyped(
  value?: Omit<SqlV1Statement, "api_version" | "kind"> | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    metadata: SqlV1StatementMetadataToJSON(value["metadata"]),
    name: value["name"],
    organization_id: value["organization_id"],
    environment_id: value["environment_id"],
    spec: SqlV1StatementSpecToJSON(value["spec"]),
    status: SqlV1StatementStatusToJSON(value["status"]),
    result: SqlV1StatementResultToJSON(value["result"]),
  };
}
