/* tslint:disable */
/* eslint-disable */
/**
 * SQL API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { SqlV1StatementException } from "./SqlV1StatementException";
import {
  SqlV1StatementExceptionFromJSON,
  SqlV1StatementExceptionFromJSONTyped,
  SqlV1StatementExceptionToJSON,
  SqlV1StatementExceptionToJSONTyped,
} from "./SqlV1StatementException";
import type { ExceptionListMeta } from "./ExceptionListMeta";
import {
  ExceptionListMetaFromJSON,
  ExceptionListMetaFromJSONTyped,
  ExceptionListMetaToJSON,
  ExceptionListMetaToJSONTyped,
} from "./ExceptionListMeta";

/**
 * StatementExceptionList is a list of exceptions coming from FAILED or FAILING Statements created by
 * the SQL Statements API.
 * @export
 * @interface SqlV1StatementExceptionList
 */
export interface SqlV1StatementExceptionList {
  /**
   * APIVersion defines the schema version of this representation of a resource.
   * @type {string}
   * @memberof SqlV1StatementExceptionList
   */
  api_version: SqlV1StatementExceptionListApiVersionEnum;
  /**
   * Kind defines the object this REST resource represents.
   * @type {string}
   * @memberof SqlV1StatementExceptionList
   */
  kind: SqlV1StatementExceptionListKindEnum;
  /**
   *
   * @type {ExceptionListMeta}
   * @memberof SqlV1StatementExceptionList
   */
  metadata: ExceptionListMeta;
  /**
   * A data property that contains an array of resource items. Each entry in the array is a separate resource.
   * @type {Array<SqlV1StatementException>}
   * @memberof SqlV1StatementExceptionList
   */
  data: Array<SqlV1StatementException>;
}

/**
 * @export
 */
export const SqlV1StatementExceptionListApiVersionEnum = {
  SqlV1: "sql/v1",
} as const;
export type SqlV1StatementExceptionListApiVersionEnum =
  (typeof SqlV1StatementExceptionListApiVersionEnum)[keyof typeof SqlV1StatementExceptionListApiVersionEnum];

/**
 * @export
 */
export const SqlV1StatementExceptionListKindEnum = {
  StatementExceptionList: "StatementExceptionList",
} as const;
export type SqlV1StatementExceptionListKindEnum =
  (typeof SqlV1StatementExceptionListKindEnum)[keyof typeof SqlV1StatementExceptionListKindEnum];

/**
 * Check if a given object implements the SqlV1StatementExceptionList interface.
 */
export function instanceOfSqlV1StatementExceptionList(
  value: object,
): value is SqlV1StatementExceptionList {
  if (!("api_version" in value) || value["api_version"] === undefined) return false;
  if (!("kind" in value) || value["kind"] === undefined) return false;
  if (!("metadata" in value) || value["metadata"] === undefined) return false;
  if (!("data" in value) || value["data"] === undefined) return false;
  return true;
}

export function SqlV1StatementExceptionListFromJSON(json: any): SqlV1StatementExceptionList {
  return SqlV1StatementExceptionListFromJSONTyped(json, false);
}

export function SqlV1StatementExceptionListFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): SqlV1StatementExceptionList {
  if (json == null) {
    return json;
  }
  return {
    api_version: json["api_version"],
    kind: json["kind"],
    metadata: ExceptionListMetaFromJSON(json["metadata"]),
    data: (json["data"] as Array<any>).map(SqlV1StatementExceptionFromJSON),
  };
}

export function SqlV1StatementExceptionListToJSON(json: any): SqlV1StatementExceptionList {
  return SqlV1StatementExceptionListToJSONTyped(json, false);
}

export function SqlV1StatementExceptionListToJSONTyped(
  value?: SqlV1StatementExceptionList | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    api_version: value["api_version"],
    kind: value["kind"],
    metadata: ExceptionListMetaToJSON(value["metadata"]),
    data: (value["data"] as Array<any>).map(SqlV1StatementExceptionToJSON),
  };
}
