/* tslint:disable */
/* eslint-disable */
/**
 * SQL API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { SqlV1ConnectionListDataInner } from "./SqlV1ConnectionListDataInner";
import {
  SqlV1ConnectionListDataInnerFromJSON,
  SqlV1ConnectionListDataInnerFromJSONTyped,
  SqlV1ConnectionListDataInnerToJSON,
  SqlV1ConnectionListDataInnerToJSONTyped,
} from "./SqlV1ConnectionListDataInner";
import type { SqlV1ConnectionListMetadata } from "./SqlV1ConnectionListMetadata";
import {
  SqlV1ConnectionListMetadataFromJSON,
  SqlV1ConnectionListMetadataFromJSONTyped,
  SqlV1ConnectionListMetadataToJSON,
  SqlV1ConnectionListMetadataToJSONTyped,
} from "./SqlV1ConnectionListMetadata";

/**
 * `Connection` models a reusable endpoint and auth token to authenticate the caller to
 * use that endpoint.
 * Only `OrgAdmins` and `EnvAdmins` will have the permissions to create, update and delete `Connections`.
 * `FlinkDevelopers` and `ModelResourceOwners` can later reference a `Connection` resource within their Model
 * creation statements.
 * The API allows you to list, create, read, and delete your connections.
 * ## The Connection Model
 * <SchemaDefinition schemaRef="#/components/schemas/sql.v1.Connection" />
 * @export
 * @interface SqlV1ConnectionList
 */
export interface SqlV1ConnectionList {
  /**
   * APIVersion defines the schema version of this representation of a resource.
   * @type {string}
   * @memberof SqlV1ConnectionList
   */
  api_version: SqlV1ConnectionListApiVersionEnum;
  /**
   * Kind defines the object this REST resource represents.
   * @type {string}
   * @memberof SqlV1ConnectionList
   */
  kind: SqlV1ConnectionListKindEnum;
  /**
   *
   * @type {SqlV1ConnectionListMetadata}
   * @memberof SqlV1ConnectionList
   */
  metadata: SqlV1ConnectionListMetadata;
  /**
   * A data property that contains an array of resource items. Each entry in the array is a separate resource.
   * @type {Set<SqlV1ConnectionListDataInner>}
   * @memberof SqlV1ConnectionList
   */
  data: Set<SqlV1ConnectionListDataInner>;
}

/**
 * @export
 * @enum {string}
 */
export enum SqlV1ConnectionListApiVersionEnum {
  SqlV1 = "sql/v1",
}
/**
 * @export
 * @enum {string}
 */
export enum SqlV1ConnectionListKindEnum {
  ConnectionList = "ConnectionList",
}

/**
 * Check if a given object implements the SqlV1ConnectionList interface.
 */
export function instanceOfSqlV1ConnectionList(value: object): value is SqlV1ConnectionList {
  if (!("api_version" in value) || value["api_version"] === undefined) return false;
  if (!("kind" in value) || value["kind"] === undefined) return false;
  if (!("metadata" in value) || value["metadata"] === undefined) return false;
  if (!("data" in value) || value["data"] === undefined) return false;
  return true;
}

export function SqlV1ConnectionListFromJSON(json: any): SqlV1ConnectionList {
  return SqlV1ConnectionListFromJSONTyped(json, false);
}

export function SqlV1ConnectionListFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): SqlV1ConnectionList {
  if (json == null) {
    return json;
  }
  return {
    api_version: json["api_version"],
    kind: json["kind"],
    metadata: SqlV1ConnectionListMetadataFromJSON(json["metadata"]),
    data: new Set((json["data"] as Array<any>).map(SqlV1ConnectionListDataInnerFromJSON)),
  };
}

export function SqlV1ConnectionListToJSON(json: any): SqlV1ConnectionList {
  return SqlV1ConnectionListToJSONTyped(json, false);
}

export function SqlV1ConnectionListToJSONTyped(
  value?: SqlV1ConnectionList | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    api_version: value["api_version"],
    kind: value["kind"],
    metadata: SqlV1ConnectionListMetadataToJSON(value["metadata"]),
    data: Array.from(value["data"] as Set<any>).map(SqlV1ConnectionListDataInnerToJSON),
  };
}
