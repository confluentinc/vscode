/* tslint:disable */
/* eslint-disable */
/**
 * Flink Compute Pool Management API
 * This is the Flink Compute Pool management API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { FcpmV2ComputePoolListDataInner } from "./FcpmV2ComputePoolListDataInner";
import {
  FcpmV2ComputePoolListDataInnerFromJSON,
  FcpmV2ComputePoolListDataInnerFromJSONTyped,
  FcpmV2ComputePoolListDataInnerToJSON,
  FcpmV2ComputePoolListDataInnerToJSONTyped,
} from "./FcpmV2ComputePoolListDataInner";
import type { FcpmV2ComputePoolListMetadata } from "./FcpmV2ComputePoolListMetadata";
import {
  FcpmV2ComputePoolListMetadataFromJSON,
  FcpmV2ComputePoolListMetadataFromJSONTyped,
  FcpmV2ComputePoolListMetadataToJSON,
  FcpmV2ComputePoolListMetadataToJSONTyped,
} from "./FcpmV2ComputePoolListMetadata";

/**
 * A Compute Pool represents a set of compute resources that is used to run your Queries.
 * The resources (CPUs, memory,â€¦) provided by a Compute Pool are shared between all Queries that use it.
 *
 *
 * ## The Compute Pools Model
 * <SchemaDefinition schemaRef="#/components/schemas/fcpm.v2.ComputePool" />
 * @export
 * @interface FcpmV2ComputePoolList
 */
export interface FcpmV2ComputePoolList {
  /**
   * APIVersion defines the schema version of this representation of a resource.
   * @type {string}
   * @memberof FcpmV2ComputePoolList
   */
  readonly api_version: FcpmV2ComputePoolListApiVersionEnum;
  /**
   * Kind defines the object this REST resource represents.
   * @type {string}
   * @memberof FcpmV2ComputePoolList
   */
  readonly kind: FcpmV2ComputePoolListKindEnum;
  /**
   *
   * @type {FcpmV2ComputePoolListMetadata}
   * @memberof FcpmV2ComputePoolList
   */
  metadata: FcpmV2ComputePoolListMetadata;
  /**
   * A data property that contains an array of resource items. Each entry in the array is a separate resource.
   * @type {Set<FcpmV2ComputePoolListDataInner>}
   * @memberof FcpmV2ComputePoolList
   */
  data: Set<FcpmV2ComputePoolListDataInner>;
}

/**
 * @export
 */
export const FcpmV2ComputePoolListApiVersionEnum = {
  FcpmV2: "fcpm/v2",
} as const;
export type FcpmV2ComputePoolListApiVersionEnum =
  (typeof FcpmV2ComputePoolListApiVersionEnum)[keyof typeof FcpmV2ComputePoolListApiVersionEnum];

/**
 * @export
 */
export const FcpmV2ComputePoolListKindEnum = {
  ComputePoolList: "ComputePoolList",
} as const;
export type FcpmV2ComputePoolListKindEnum =
  (typeof FcpmV2ComputePoolListKindEnum)[keyof typeof FcpmV2ComputePoolListKindEnum];

/**
 * Check if a given object implements the FcpmV2ComputePoolList interface.
 */
export function instanceOfFcpmV2ComputePoolList(value: object): value is FcpmV2ComputePoolList {
  if (!("api_version" in value) || value["api_version"] === undefined) return false;
  if (!("kind" in value) || value["kind"] === undefined) return false;
  if (!("metadata" in value) || value["metadata"] === undefined) return false;
  if (!("data" in value) || value["data"] === undefined) return false;
  return true;
}

export function FcpmV2ComputePoolListFromJSON(json: any): FcpmV2ComputePoolList {
  return FcpmV2ComputePoolListFromJSONTyped(json, false);
}

export function FcpmV2ComputePoolListFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): FcpmV2ComputePoolList {
  if (json == null) {
    return json;
  }
  return {
    api_version: json["api_version"],
    kind: json["kind"],
    metadata: FcpmV2ComputePoolListMetadataFromJSON(json["metadata"]),
    data: new Set((json["data"] as Array<any>).map(FcpmV2ComputePoolListDataInnerFromJSON)),
  };
}

export function FcpmV2ComputePoolListToJSON(json: any): FcpmV2ComputePoolList {
  return FcpmV2ComputePoolListToJSONTyped(json, false);
}

export function FcpmV2ComputePoolListToJSONTyped(
  value?: Omit<FcpmV2ComputePoolList, "api_version" | "kind"> | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    metadata: FcpmV2ComputePoolListMetadataToJSON(value["metadata"]),
    data: Array.from(value["data"] as Set<any>).map(FcpmV2ComputePoolListDataInnerToJSON),
  };
}
