/* tslint:disable */
/* eslint-disable */
/**
 * Flink Compute Pool Management API
 * This is the Flink Compute Pool management API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { GlobalObjectReference } from "./GlobalObjectReference";
import {
  GlobalObjectReferenceFromJSON,
  GlobalObjectReferenceFromJSONTyped,
  GlobalObjectReferenceToJSON,
  GlobalObjectReferenceToJSONTyped,
} from "./GlobalObjectReference";
import type { EnvScopedObjectReference } from "./EnvScopedObjectReference";
import {
  EnvScopedObjectReferenceFromJSON,
  EnvScopedObjectReferenceFromJSONTyped,
  EnvScopedObjectReferenceToJSON,
  EnvScopedObjectReferenceToJSONTyped,
} from "./EnvScopedObjectReference";

/**
 * The desired state of the Compute Pool
 * @export
 * @interface FcpmV2ComputePoolSpec
 */
export interface FcpmV2ComputePoolSpec {
  /**
   * The name of the Flink compute pool.
   * @type {string}
   * @memberof FcpmV2ComputePoolSpec
   */
  display_name?: string;
  /**
   * The cloud service provider that runs the compute pool.
   * @type {string}
   * @memberof FcpmV2ComputePoolSpec
   */
  cloud?: string;
  /**
   * Flink compute pools in the region provided will be able to use this identity pool
   * @type {string}
   * @memberof FcpmV2ComputePoolSpec
   */
  region?: string;
  /**
   * Maximum number of Confluent Flink Units (CFUs) that the Flink compute pool should auto-scale to.
   *
   * @type {number}
   * @memberof FcpmV2ComputePoolSpec
   */
  max_cfu?: number;
  /**
   * The flag to enable AI computing using Ray for the Flink compute pool. It's available in the Early Access API
   * lifecycle stage only.
   *
   * @type {boolean}
   * @memberof FcpmV2ComputePoolSpec
   */
  enable_ai?: boolean;
  /**
   * The environment to which this belongs.
   * @type {GlobalObjectReference}
   * @memberof FcpmV2ComputePoolSpec
   */
  environment?: GlobalObjectReference;
  /**
   * The network to which this belongs.
   * @type {EnvScopedObjectReference}
   * @memberof FcpmV2ComputePoolSpec
   */
  network?: EnvScopedObjectReference;
}

/**
 * Check if a given object implements the FcpmV2ComputePoolSpec interface.
 */
export function instanceOfFcpmV2ComputePoolSpec(value: object): value is FcpmV2ComputePoolSpec {
  return true;
}

export function FcpmV2ComputePoolSpecFromJSON(json: any): FcpmV2ComputePoolSpec {
  return FcpmV2ComputePoolSpecFromJSONTyped(json, false);
}

export function FcpmV2ComputePoolSpecFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): FcpmV2ComputePoolSpec {
  if (json == null) {
    return json;
  }
  return {
    display_name: json["display_name"] == null ? undefined : json["display_name"],
    cloud: json["cloud"] == null ? undefined : json["cloud"],
    region: json["region"] == null ? undefined : json["region"],
    max_cfu: json["max_cfu"] == null ? undefined : json["max_cfu"],
    enable_ai: json["enable_ai"] == null ? undefined : json["enable_ai"],
    environment:
      json["environment"] == null ? undefined : GlobalObjectReferenceFromJSON(json["environment"]),
    network:
      json["network"] == null ? undefined : EnvScopedObjectReferenceFromJSON(json["network"]),
  };
}

export function FcpmV2ComputePoolSpecToJSON(json: any): FcpmV2ComputePoolSpec {
  return FcpmV2ComputePoolSpecToJSONTyped(json, false);
}

export function FcpmV2ComputePoolSpecToJSONTyped(
  value?: FcpmV2ComputePoolSpec | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    display_name: value["display_name"],
    cloud: value["cloud"],
    region: value["region"],
    max_cfu: value["max_cfu"],
    enable_ai: value["enable_ai"],
    environment: GlobalObjectReferenceToJSON(value["environment"]),
    network: EnvScopedObjectReferenceToJSON(value["network"]),
  };
}
